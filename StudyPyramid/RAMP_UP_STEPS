First Pyramid Application:
1. start it:
	~/devenv/bin/python helloworld.py
	OR
	source ~/devenv/bin/activate && python helloworld.py
2. visit it:
	http://localhost:8080/
	http://localhost:8080/goodbye
	http://localhost:8080/hello

Creating a Pyramid Project:
	source ~/devenv/bin/activate
# Create new project
	paster create -t pyramid_routesalchemy MyProject
# Make sure from now on your working directory is your project folder: MyProject
	cd MyProject
# Install new project for development, this will install a distribution into the python interpreter's library.
	python setup.py develop
# Run test case, the tests are in MyProject/myproject/tests.py
	python setup.py test -q
# Interactive shell, "MyProject" here is the value of section name "app" in development.ini file, see more about pshell in pyramid docs.
	paster pshell development.ini MyProject
# Running the project application
	paster serve development.ini
	OR for development phase:
	paster serve development.ini --reload
	OR for production phase:
	paster serve production.ini
# tar your application:
	python setup.py sdist
	This will tar a .tar.gz file for your application, and make sure all the non-python file types are in your MANIFEST.in file, otherwise, the tar will miss these unspecified file types.
# Modifying Package Structure:
	You can create a new package for example "blog" under "myproject" folder and "cp views.py blog/views.py", and change the "myproject/__init__.py"
	from:
	config.add_view('myproject.views.my_view', renderer='myproject:templates/mytemplate.pt')
	to:
	config.add_view('myproject.views.blog.my_view', renderer='myproject:templates/mytemplate.pt')
# myproject/__init__.py:main function:
	def main(global_config, **settings=settings):
		config = Configurator(root_factory = Root, settings = settings)
		// blablabla
	if you have a "[DEFAULT]" section in development.ini, "global_config" here stores all the key/values pairs in "[DEFAULT]" section.
	"settings" here stores all the key/values pairs in "[app.MyProject]" section in development except one: "use = egg:MyProject"
	 you can put anything you want here into "settings" and access it later from "view callable" by invoking request.registry.setting dictionary at application runtime.
# URL dispatch:



# Activate virtual python env first:
# source ~/mydevenv/bin/activate
#
# To create a new project named helloword and running it:
# $ paster create -t pylons StudyPylons
# cd StudyPylons
# $ paster serve --reload development.ini
# Visiting http://127.0.0.1:5000/ to see welcome page.
#
# To create a controller, this will produce a module which is located at studypylons/controllers/hello.py:
# $ paster controller hello
# Visiting http://127.0.0.1:5000/hello/index
#
# For SQLAlchemy:
#     0. "service mysql status" to make sure mysql is running.
#     1. Make sure you log into mysql console and run "CREATE DATABASE studypylons DEFAULT CHARACTER SET utf8;" first, and if it's a mysql on amazon ec2, 3306 port on ec2 should be exposed for outsider.
#     2. vi development.ini to add mysql db url.
#     3. Put model classes like person.py, address.py into studypylons/model/
#     4. Run "paster setup-app development.ini" to create the tables in the database, this command will call studypylons/websetup.py
#     5. Run "paster serve --reload development.ini"
# Visiting http://127.0.0.1:5000/person/index to see a sample for SQLAlchemy
#
# For unit testing:
# Run "nosetests" in "StudyPylons" folder to start unit testing, it will automatically run the test case in StudyPylons/studypylons/tests
#
# Using the model standalone:
# % python
# Python 2.5.1 (r251:54863, Oct 5 2007, 13:36:32)
# [GCC 4.1.3 20070929 (prerelease) (Ubuntu 4.1.2-16ubuntu2)] on linux2
# Type "help", "copyright", "credits" or "license" for more information.
# >>> import sqlalchemy as sa
# >>> engine = sa.create_engine("sqlite:///test.sqlite")
# >>> from studypylons.model import init_model, Person
# >>> from studypylons.model.meta import Session, Base
# >>> init_model(engine)
# >>> a = Person()
# >>> a.name = "Aaa"
# >>> a.email = "aaa@example.com"
# >>> Session.add(a)
# >>> Session.commit()
#
# For Generating the Production Configuration
# paster make-config studypylons production.ini
#
# Put set-up once objects for the entire application to config/environment.py or lib/app_globals __init__() method.
#
# Put custom middleware to config/middleware.py at comment marker:
# # CUSTOM MIDDLEWARE HERE (filtered by error hanlding middlewares)
#
# StudyPylons is a standard Python package which contains setup.py where defines the package dependencies
# To re-parse the setup.py line for new dependencies, run "$ python setup.py develop"
#
