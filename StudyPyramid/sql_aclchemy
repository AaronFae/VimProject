SQLAlchemy ORM

[BEGIN: Object Relational Tutorial]

Version Check

	>>> import sqlalchemy
	>>> sqlalchemy.__version__
	0.6.0


Connecting

	>>> from sqlalchemy import create_engine
	>>> engine = create_engine('sqlite:///:memory:', echo=True)

	echo=True means generated SQL produced.

	Define and Create a Table:

	>>> from sqlalchemy import Table, Column, Integer, String, MetaData, ForeignKey
	>>> metadata = MetaData()
	>>> users_table = Table('users', metadata,
	...     Column('id', Integer, primary_key=True),
	...     Column('name', String),
	...     Column('fullname', String),
	...     Column('password', String)
	... )

	Call create_all() and passing it the engine instance which points to our database to create table, this will check for the presence of a table first before creating, so it’s safe to call multiple times:

	sql>>> metadata.create_all(engine)
	PRAGMA table_info("users")
	()
	CREATE TABLE users (
		id INTEGER NOT NULL,
		name VARCHAR,
		fullname VARCHAR,
		password VARCHAR,
		PRIMARY KEY (id)
	)
	()
	COMMIT

	If you see issue when create table, it could be the target db requires "length" to the String type as below:
	Column('name', String(50))

	For oracle sequence:
	Column('id', Integer, Sequence('user_id_seq'), primary_key=True)


Define a Python Class to be Mapped

	>>> class User(object):
	...     def __init__(self, name, fullname, password):
	...         self.name = name
	...         self.fullname = fullname
	...         self.password = password
	...
	...     def __repr__(self):
	...        return "<User('%s','%s', '%s')>" % (self.name, self.fullname, self.password)


Setting up the Mapping

>>> from sqlalchemy.orm import mapper
>>> mapper(User, users_table)
		<Mapper at 0x...; User>

		The mapper() function creates a new Mapper object and stores it away for future
		reference, associated with our class. Let’s now create and inspect a User
		object:

		>>> ed_user = User('ed', 'Ed Jones', 'edspassword')
		>>> ed_user.name
		'ed'
		>>> ed_user.password
		'edspassword'
		>>> str(ed_user.id)
		'None'


