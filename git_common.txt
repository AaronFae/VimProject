Reference:

http://www.kernel.org/pub/software/scm/git/docs/gittutorial.html
http://www.spheredev.org/wiki/Git_for_the_lazy
http://www.kernel.org/pub/software/scm/git/docs/everyday.html
http://progit.org/book/

0.

git add filenmae
git commit -m 'commit message'

Or simply tht two steps above like blow:

git commit -a -m 'commit message'

1. FOR LOCAL:

git log v10..v20 -p -n3
git log stable..master

git diff v10 v20
git diff stable master

(v10 v20 above can be HEAD)

gitk is a gui version for git log I think, so that you can:

gitk v10..v20
gitk stable..master
gitk filenmae


2. FOR REMOTE:

1) see the changes before merging...

git fetch origin (not git fetch origin master !!!)
git log master..origin/master
git diff master origin/master (after git fetch command, use this to see whether local repository is same to remote one.)
gitk master..origin/master

git fetch origin master
git log HEAD..FETCH_HEAD
git diff HEAD FETCH_HEAD
gitk HEAD..FETCH_HEAD

2) begin to merge after fetch...

git merge origin/master

3) Or, "pull = fetch + merge" above:

for cloned project:
Use "git pull/git pull origin" means "git fetch origin"(refresh origin/master fetch head above) + "git merge origin/master"

for initialized/cloned project:
Use "git pull origin master" means "git fetch origin master"(refresh FETCH_HEAD above) + "git merge origin/master"


====================================================================================================================================
4) IMPORTANT FOR NOW, use the clause to make sure you've syn local and remote respository.
.. FIRST OF ALL: convert initialized project to cloned project by typing
"git config branch.master.remote origin" & "git config branch.master.merge refs/heads/master"
in a git folder like VimProject so that the initialized project can support "git pull/git pull origin" above/below so that you can use "git diff master origin/master" after pull before push.
Initialized project means the initial project which is used to push to github at the very beginning.

optional steps before pull:
git fetch origin
git diff master origin/master

a. git pull/git pull origin
(will prompt commit if any uncommited files which in both local & remote repository have been changed.)

b. git status
(make sure no uncommited files in local respository)

optional steps before push:
git diff master origin/master
(see difference & what will be pushed to remote, return empty means "same" so that you don't have to push.)

c. git push origin master
(may prompt pull action if you skip step a. above,ince remote repository version may be ahead of local one, after this push, you can make sure, both your local & remote respository are synchronized.)

git merge/pull is not safe enough since it will auto merge if no conflicts.
so that just keep in mind to "RECHECK THE AUTO MERGED FILES" after pull action by the way below, (suppose the auto merged file name is test):
git diff HEAD^:test HEAD:test
OR
gitk test
====================================================================================================================================


3. REVERT CHANGES:

untag uncommitted changes:
git reset

revert uncommitted changes:
git reset --hard

soft revert committed changes to cache:
git reset --soft HEAD^

hard revert committed changes to local:
git reset --hard HEAD^


4. Multiple Accounts for github.com
See details at http://github.com/guides/multiple-github-accounts

1) Enter file in which to save the key (/Users/tom/.ssh/id_rsa):
Instead of using “id_rsa”, you should use something like “id_rsa_github_useraccount” to denote the purpose of the key. So ultimately, you would enter:
/Users/tom/.ssh/id_rsa_github_useraccount
Still, add your public key in ~/.ssh/*.pub to your github account.

2) vi (~/.ssh/config) file, add the following:

# GitHub for cylence
Host github-tom
  HostName github.com
  User git
  IdentityFile /Users/tom/.ssh/id_rsa_git_tom

If you are using ssh-agent (with or without keychain) you might also have to enable ForwardAgent:

# GitHub for cylence
Host github-tom
  HostName github.com
  User git
  ForwardAgent yes
  IdentityFile /Users/tom/.ssh/id_rsa_git_tom

3) Instead of using:

git clone git@github.com:account/repository.git

USE

git clone git@github-tom:account/repository.git


5. For trailing whitespace error when committing in Cygwin for dos format file:

1) Solution 1: open file with vi and :set fileformat=unix

2) Solution 2:
Modify the perl script <GIT_DIR>/.git/hooks/pre-commit  (where <GIT_DIR> is the top level of the copy of the repository on my local machine) , and comment out the following lines:

if (/\s$/) {
bad_line("trailing whitespace", $_);
}

like so:

# if (/\s$/) {
# bad_line("trailing whitespace", $_);
# }

