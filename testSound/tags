!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
AddTraceMessage	.\include\pa_trace.h	/^    void AddTraceMessage( char *msg, int data );$/;"	p	signature:( char *msg, int data )
AddTraceMessage	.\include\pa_trace.h	57;"	d
DumpTraceMessages	.\include\pa_trace.h	/^    void DumpTraceMessages();$/;"	p	signature:()
DumpTraceMessages	.\include\pa_trace.h	59;"	d
MAX_TRACE_RECORDS	.\include\pa_trace.h	37;"	d
PA_TRACE_H	.\include\pa_trace.h	2;"	d
PORT_AUDIO_H	.\include\portaudio.h	2;"	d
PORT_MIXER_H	.\include\portmixer.h	2;"	d
PaDeviceID	.\include\portaudio.h	/^typedef int PaDeviceID;$/;"	t
PaDeviceInfo	.\include\portaudio.h	/^PaDeviceInfo;$/;"	t	typeref:struct:__anon2
PaError	.\include\portaudio.h	/^typedef int PaError;$/;"	t
PaErrorNum	.\include\portaudio.h	/^} PaErrorNum;$/;"	t	typeref:enum:__anon1
PaSampleFormat	.\include\portaudio.h	/^typedef unsigned long PaSampleFormat;$/;"	t
PaStream	.\include\portaudio.h	248;"	d
PaStreamFlags	.\include\portaudio.h	/^typedef   unsigned long PaStreamFlags;$/;"	t
PaTimestamp	.\include\portaudio.h	/^typedef double PaTimestamp;$/;"	t
Pa_AbortStream	.\include\portaudio.h	/^PaError Pa_AbortStream( PortAudioStream *stream );$/;"	p	signature:( PortAudioStream *stream )
Pa_CloseStream	.\include\portaudio.h	/^PaError Pa_CloseStream( PortAudioStream* );$/;"	p	signature:( PortAudioStream* )
Pa_CountDevices	.\include\portaudio.h	/^int Pa_CountDevices( void );$/;"	p	signature:( void )
Pa_GetCPULoad	.\include\portaudio.h	/^double Pa_GetCPULoad( PortAudioStream* stream );$/;"	p	signature:( PortAudioStream* stream )
Pa_GetDefaultInputDeviceID	.\include\portaudio.h	/^PaDeviceID Pa_GetDefaultInputDeviceID( void );$/;"	p	signature:( void )
Pa_GetDefaultOutputDeviceID	.\include\portaudio.h	/^PaDeviceID Pa_GetDefaultOutputDeviceID( void );$/;"	p	signature:( void )
Pa_GetDeviceInfo	.\include\portaudio.h	/^const PaDeviceInfo* Pa_GetDeviceInfo( PaDeviceID device );$/;"	p	signature:( PaDeviceID device )
Pa_GetErrorText	.\include\portaudio.h	/^const char *Pa_GetErrorText( PaError errnum );$/;"	p	signature:( PaError errnum )
Pa_GetHostError	.\include\portaudio.h	/^long Pa_GetHostError( void );$/;"	p	signature:( void )
Pa_GetMinNumBuffers	.\include\portaudio.h	/^int Pa_GetMinNumBuffers( int framesPerBuffer, double sampleRate );$/;"	p	signature:( int framesPerBuffer, double sampleRate )
Pa_GetSampleSize	.\include\portaudio.h	/^PaError Pa_GetSampleSize( PaSampleFormat format );$/;"	p	signature:( PaSampleFormat format )
Pa_Initialize	.\include\portaudio.h	/^PaError Pa_Initialize( void );$/;"	p	signature:( void )
Pa_OpenDefaultStream	.\include\portaudio.h	/^PaError Pa_OpenDefaultStream( PortAudioStream** stream,$/;"	p	signature:( PortAudioStream** stream, int numInputChannels, int numOutputChannels, PaSampleFormat sampleFormat, double sampleRate, unsigned long framesPerBuffer, unsigned long numberOfBuffers, PortAudioCallback *callback, void *userData )
Pa_OpenStream	.\include\portaudio.h	/^PaError Pa_OpenStream( PortAudioStream** stream,$/;"	p	signature:( PortAudioStream** stream, PaDeviceID inputDevice, int numInputChannels, PaSampleFormat inputSampleFormat, void *inputDriverInfo, PaDeviceID outputDevice, int numOutputChannels, PaSampleFormat outputSampleFormat, void *outputDriverInfo, double sampleRate, unsigned long framesPerBuffer, unsigned long numberOfBuffers, PaStreamFlags streamFlags, PortAudioCallback *callback, void *userData )
Pa_Sleep	.\include\portaudio.h	/^void Pa_Sleep( long msec );$/;"	p	signature:( long msec )
Pa_StartStream	.\include\portaudio.h	/^PaError Pa_StartStream( PortAudioStream *stream );$/;"	p	signature:( PortAudioStream *stream )
Pa_StopStream	.\include\portaudio.h	/^PaError Pa_StopStream( PortAudioStream *stream );$/;"	p	signature:( PortAudioStream *stream )
Pa_StreamActive	.\include\portaudio.h	/^PaError Pa_StreamActive( PortAudioStream *stream );$/;"	p	signature:( PortAudioStream *stream )
Pa_StreamTime	.\include\portaudio.h	/^PaTimestamp Pa_StreamTime( PortAudioStream *stream );$/;"	p	signature:( PortAudioStream *stream )
Pa_Terminate	.\include\portaudio.h	/^PaError Pa_Terminate( void );$/;"	p	signature:( void )
PortAudioCallback	.\include\portaudio.h	/^typedef int (PortAudioCallback)($/;"	t
PortAudioStream	.\include\portaudio.h	/^typedef void PortAudioStream;$/;"	t
PxBalance	.\include\portmixer.h	/^typedef float PxBalance; \/* -1.0 (left) --> 1.0 (right) *\/$/;"	t
PxMixer	.\include\portmixer.h	/^typedef void PxMixer;$/;"	t
PxVolume	.\include\portmixer.h	/^typedef float PxVolume; \/* 0.0 (min) --> 1.0 (max) *\/$/;"	t
Px_CloseMixer	.\include\portmixer.h	/^void Px_CloseMixer(PxMixer *mixer);$/;"	p	signature:(PxMixer *mixer)
Px_GetCurrentInputSource	.\include\portmixer.h	/^int Px_GetCurrentInputSource( PxMixer *mixer ); \/* may return -1 == none *\/$/;"	p	signature:( PxMixer *mixer )
Px_GetInputSourceName	.\include\portmixer.h	/^const char *Px_GetInputSourceName( PxMixer *mixer, int i);$/;"	p	signature:( PxMixer *mixer, int i)
Px_GetInputVolume	.\include\portmixer.h	/^PxVolume Px_GetInputVolume( PxMixer *mixer );$/;"	p	signature:( PxMixer *mixer )
Px_GetMasterVolume	.\include\portmixer.h	/^PxVolume Px_GetMasterVolume( PxMixer *mixer );$/;"	p	signature:( PxMixer *mixer )
Px_GetMixerName	.\include\portmixer.h	/^const char *Px_GetMixerName( void *pa_stream, int i );$/;"	p	signature:( void *pa_stream, int i )
Px_GetNumInputSources	.\include\portmixer.h	/^int Px_GetNumInputSources( PxMixer *mixer );$/;"	p	signature:( PxMixer *mixer )
Px_GetNumMixers	.\include\portmixer.h	/^int Px_GetNumMixers( void *pa_stream );$/;"	p	signature:( void *pa_stream )
Px_GetNumOutputVolumes	.\include\portmixer.h	/^int Px_GetNumOutputVolumes( PxMixer *mixer );$/;"	p	signature:( PxMixer *mixer )
Px_GetOutputBalance	.\include\portmixer.h	/^PxBalance Px_GetOutputBalance( PxMixer *mixer );$/;"	p	signature:( PxMixer *mixer )
Px_GetOutputVolume	.\include\portmixer.h	/^PxVolume Px_GetOutputVolume( PxMixer *mixer, int i );$/;"	p	signature:( PxMixer *mixer, int i )
Px_GetOutputVolumeName	.\include\portmixer.h	/^const char *Px_GetOutputVolumeName( PxMixer *mixer, int i );$/;"	p	signature:( PxMixer *mixer, int i )
Px_GetPCMOutputVolume	.\include\portmixer.h	/^PxVolume Px_GetPCMOutputVolume( PxMixer *mixer );$/;"	p	signature:( PxMixer *mixer )
Px_GetPlaythrough	.\include\portmixer.h	/^PxVolume Px_GetPlaythrough( PxMixer *mixer );$/;"	p	signature:( PxMixer *mixer )
Px_OpenMixer	.\include\portmixer.h	/^PxMixer *Px_OpenMixer( void *pa_stream, int i );$/;"	p	signature:( void *pa_stream, int i )
Px_SetCurrentInputSource	.\include\portmixer.h	/^void Px_SetCurrentInputSource( PxMixer *mixer, int i );$/;"	p	signature:( PxMixer *mixer, int i )
Px_SetInputVolume	.\include\portmixer.h	/^void Px_SetInputVolume( PxMixer *mixer, PxVolume volume );$/;"	p	signature:( PxMixer *mixer, PxVolume volume )
Px_SetMasterVolume	.\include\portmixer.h	/^void Px_SetMasterVolume( PxMixer *mixer, PxVolume volume );$/;"	p	signature:( PxMixer *mixer, PxVolume volume )
Px_SetOutputBalance	.\include\portmixer.h	/^void Px_SetOutputBalance( PxMixer *mixer, PxBalance balance );$/;"	p	signature:( PxMixer *mixer, PxBalance balance )
Px_SetOutputVolume	.\include\portmixer.h	/^void Px_SetOutputVolume( PxMixer *mixer, int i, PxVolume volume );$/;"	p	signature:( PxMixer *mixer, int i, PxVolume volume )
Px_SetPCMOutputVolume	.\include\portmixer.h	/^void Px_SetPCMOutputVolume( PxMixer *mixer, PxVolume volume );$/;"	p	signature:( PxMixer *mixer, PxVolume volume )
Px_SetPlaythrough	.\include\portmixer.h	/^void Px_SetPlaythrough( PxMixer *mixer, PxVolume volume );$/;"	p	signature:( PxMixer *mixer, PxVolume volume )
Px_SupportsOutputBalance	.\include\portmixer.h	/^int Px_SupportsOutputBalance( PxMixer *mixer );$/;"	p	signature:( PxMixer *mixer )
Px_SupportsPCMOutputVolume	.\include\portmixer.h	/^int Px_SupportsPCMOutputVolume( PxMixer* mixer ) ;$/;"	p	signature:( PxMixer* mixer )
Px_SupportsPlaythrough	.\include\portmixer.h	/^int Px_SupportsPlaythrough( PxMixer *mixer );$/;"	p	signature:( PxMixer *mixer )
ResetTraceMessages	.\include\pa_trace.h	/^    void ResetTraceMessages();$/;"	p	signature:()
ResetTraceMessages	.\include\pa_trace.h	58;"	d
SFC_CALC_MAX_ALL_CHANNELS	.\include\sndfile.h	/^	SFC_CALC_MAX_ALL_CHANNELS		= 0x1042,$/;"	e	enum:__anon4
SFC_CALC_NORM_MAX_ALL_CHANNELS	.\include\sndfile.h	/^	SFC_CALC_NORM_MAX_ALL_CHANNELS	= 0x1043,$/;"	e	enum:__anon4
SFC_CALC_NORM_SIGNAL_MAX	.\include\sndfile.h	/^	SFC_CALC_NORM_SIGNAL_MAX		= 0x1041,$/;"	e	enum:__anon4
SFC_CALC_SIGNAL_MAX	.\include\sndfile.h	/^	SFC_CALC_SIGNAL_MAX				= 0x1040,$/;"	e	enum:__anon4
SFC_FILE_TRUNCATE	.\include\sndfile.h	/^	SFC_FILE_TRUNCATE				= 0x1080,$/;"	e	enum:__anon4
SFC_GET_BROADCAST_INFO	.\include\sndfile.h	/^	SFC_GET_BROADCAST_INFO			= 0x10F0,$/;"	e	enum:__anon4
SFC_GET_CLIPPING	.\include\sndfile.h	/^	SFC_GET_CLIPPING				= 0x10C1,$/;"	e	enum:__anon4
SFC_GET_DITHER_INFO	.\include\sndfile.h	/^	SFC_GET_DITHER_INFO				= 0x10A3,$/;"	e	enum:__anon4
SFC_GET_DITHER_INFO_COUNT	.\include\sndfile.h	/^	SFC_GET_DITHER_INFO_COUNT		= 0x10A2,$/;"	e	enum:__anon4
SFC_GET_EMBED_FILE_INFO	.\include\sndfile.h	/^	SFC_GET_EMBED_FILE_INFO			= 0x10B0,$/;"	e	enum:__anon4
SFC_GET_FORMAT_INFO	.\include\sndfile.h	/^	SFC_GET_FORMAT_INFO				= 0x1028,$/;"	e	enum:__anon4
SFC_GET_FORMAT_MAJOR	.\include\sndfile.h	/^	SFC_GET_FORMAT_MAJOR			= 0x1031,$/;"	e	enum:__anon4
SFC_GET_FORMAT_MAJOR_COUNT	.\include\sndfile.h	/^	SFC_GET_FORMAT_MAJOR_COUNT		= 0x1030,$/;"	e	enum:__anon4
SFC_GET_FORMAT_SUBTYPE	.\include\sndfile.h	/^	SFC_GET_FORMAT_SUBTYPE			= 0x1033,$/;"	e	enum:__anon4
SFC_GET_FORMAT_SUBTYPE_COUNT	.\include\sndfile.h	/^	SFC_GET_FORMAT_SUBTYPE_COUNT	= 0x1032,$/;"	e	enum:__anon4
SFC_GET_INSTRUMENT	.\include\sndfile.h	/^	SFC_GET_INSTRUMENT				= 0x10D0,$/;"	e	enum:__anon4
SFC_GET_LIB_VERSION	.\include\sndfile.h	/^{	SFC_GET_LIB_VERSION				= 0x1000,$/;"	e	enum:__anon4
SFC_GET_LOG_INFO	.\include\sndfile.h	/^	SFC_GET_LOG_INFO				= 0x1001,$/;"	e	enum:__anon4
SFC_GET_LOOP_INFO	.\include\sndfile.h	/^	SFC_GET_LOOP_INFO				= 0x10E0,$/;"	e	enum:__anon4
SFC_GET_MAX_ALL_CHANNELS	.\include\sndfile.h	/^	SFC_GET_MAX_ALL_CHANNELS		= 0x1045,$/;"	e	enum:__anon4
SFC_GET_NORM_DOUBLE	.\include\sndfile.h	/^	SFC_GET_NORM_DOUBLE				= 0x1010,$/;"	e	enum:__anon4
SFC_GET_NORM_FLOAT	.\include\sndfile.h	/^	SFC_GET_NORM_FLOAT				= 0x1011,$/;"	e	enum:__anon4
SFC_GET_SIGNAL_MAX	.\include\sndfile.h	/^	SFC_GET_SIGNAL_MAX				= 0x1044,$/;"	e	enum:__anon4
SFC_GET_SIMPLE_FORMAT	.\include\sndfile.h	/^	SFC_GET_SIMPLE_FORMAT			= 0x1021,$/;"	e	enum:__anon4
SFC_GET_SIMPLE_FORMAT_COUNT	.\include\sndfile.h	/^	SFC_GET_SIMPLE_FORMAT_COUNT		= 0x1020,$/;"	e	enum:__anon4
SFC_SET_ADD_DITHER_ON_READ	.\include\sndfile.h	/^	SFC_SET_ADD_DITHER_ON_READ		= 0x1071$/;"	e	enum:__anon4
SFC_SET_ADD_DITHER_ON_WRITE	.\include\sndfile.h	/^	SFC_SET_ADD_DITHER_ON_WRITE		= 0x1070,$/;"	e	enum:__anon4
SFC_SET_ADD_PEAK_CHUNK	.\include\sndfile.h	/^	SFC_SET_ADD_PEAK_CHUNK			= 0x1050,$/;"	e	enum:__anon4
SFC_SET_BROADCAST_INFO	.\include\sndfile.h	/^	SFC_SET_BROADCAST_INFO			= 0x10F1,$/;"	e	enum:__anon4
SFC_SET_CLIPPING	.\include\sndfile.h	/^	SFC_SET_CLIPPING				= 0x10C0,$/;"	e	enum:__anon4
SFC_SET_DITHER_ON_READ	.\include\sndfile.h	/^	SFC_SET_DITHER_ON_READ			= 0x10A1,$/;"	e	enum:__anon4
SFC_SET_DITHER_ON_WRITE	.\include\sndfile.h	/^	SFC_SET_DITHER_ON_WRITE			= 0x10A0,$/;"	e	enum:__anon4
SFC_SET_INSTRUMENT	.\include\sndfile.h	/^	SFC_SET_INSTRUMENT				= 0x10D1,$/;"	e	enum:__anon4
SFC_SET_NORM_DOUBLE	.\include\sndfile.h	/^	SFC_SET_NORM_DOUBLE				= 0x1012,$/;"	e	enum:__anon4
SFC_SET_NORM_FLOAT	.\include\sndfile.h	/^	SFC_SET_NORM_FLOAT				= 0x1013,$/;"	e	enum:__anon4
SFC_SET_RAW_START_OFFSET	.\include\sndfile.h	/^	SFC_SET_RAW_START_OFFSET		= 0x1090,$/;"	e	enum:__anon4
SFC_SET_SCALE_FLOAT_INT_READ	.\include\sndfile.h	/^	SFC_SET_SCALE_FLOAT_INT_READ	= 0x1014,$/;"	e	enum:__anon4
SFC_SET_UPDATE_HEADER_AUTO	.\include\sndfile.h	/^	SFC_SET_UPDATE_HEADER_AUTO		= 0x1061,$/;"	e	enum:__anon4
SFC_TEST_IEEE_FLOAT_REPLACE	.\include\sndfile.h	/^	SFC_TEST_IEEE_FLOAT_REPLACE		= 0x6001,$/;"	e	enum:__anon4
SFC_UPDATE_HEADER_NOW	.\include\sndfile.h	/^	SFC_UPDATE_HEADER_NOW			= 0x1060,$/;"	e	enum:__anon4
SFD_CUSTOM_LEVEL	.\include\sndfile.h	/^	SFD_CUSTOM_LEVEL	= 0x40000000,$/;"	e	enum:__anon9
SFD_DEFAULT_LEVEL	.\include\sndfile.h	/^{	SFD_DEFAULT_LEVEL	= 0,$/;"	e	enum:__anon9
SFD_NO_DITHER	.\include\sndfile.h	/^	SFD_NO_DITHER		= 500,$/;"	e	enum:__anon9
SFD_TRIANGULAR_PDF	.\include\sndfile.h	/^	SFD_TRIANGULAR_PDF	= 502$/;"	e	enum:__anon9
SFD_WHITE	.\include\sndfile.h	/^	SFD_WHITE			= 501,$/;"	e	enum:__anon9
SFM_RDWR	.\include\sndfile.h	/^	SFM_RDWR	= 0x30$/;"	e	enum:__anon6
SFM_READ	.\include\sndfile.h	/^	SFM_READ	= 0x10,$/;"	e	enum:__anon6
SFM_WRITE	.\include\sndfile.h	/^	SFM_WRITE	= 0x20,$/;"	e	enum:__anon6
SF_BROADCAST_INFO	.\include\sndfile.h	/^} SF_BROADCAST_INFO ;$/;"	t	typeref:struct:__anon16
SF_COUNT_MAX	.\include\sndfile.h	255;"	d
SF_DITHER_INFO	.\include\sndfile.h	/^} SF_DITHER_INFO ;$/;"	t	typeref:struct:__anon10
SF_EMBED_FILE_INFO	.\include\sndfile.h	/^} SF_EMBED_FILE_INFO ;$/;"	t	typeref:struct:__anon11
SF_ENDIAN_BIG	.\include\sndfile.h	/^	SF_ENDIAN_BIG			= 0x20000000,	\/* Force big endian-ness. *\/$/;"	e	enum:__anon3
SF_ENDIAN_CPU	.\include\sndfile.h	/^	SF_ENDIAN_CPU			= 0x30000000,	\/* Force CPU endian-ness. *\/$/;"	e	enum:__anon3
SF_ENDIAN_FILE	.\include\sndfile.h	/^	SF_ENDIAN_FILE			= 0x00000000,	\/* Default file endian-ness. *\/$/;"	e	enum:__anon3
SF_ENDIAN_LITTLE	.\include\sndfile.h	/^	SF_ENDIAN_LITTLE		= 0x10000000,	\/* Force little endian-ness. *\/$/;"	e	enum:__anon3
SF_ERR_MALFORMED_FILE	.\include\sndfile.h	/^	SF_ERR_MALFORMED_FILE		= 3,$/;"	e	enum:__anon7
SF_ERR_NO_ERROR	.\include\sndfile.h	/^{	SF_ERR_NO_ERROR				= 0,$/;"	e	enum:__anon7
SF_ERR_SYSTEM	.\include\sndfile.h	/^	SF_ERR_SYSTEM				= 2,$/;"	e	enum:__anon7
SF_ERR_UNRECOGNISED_FORMAT	.\include\sndfile.h	/^	SF_ERR_UNRECOGNISED_FORMAT	= 1,$/;"	e	enum:__anon7
SF_ERR_UNSUPPORTED_ENCODING	.\include\sndfile.h	/^	SF_ERR_UNSUPPORTED_ENCODING	= 4$/;"	e	enum:__anon7
SF_FALSE	.\include\sndfile.h	/^	SF_FALSE	= 0,$/;"	e	enum:__anon6
SF_FORMAT_AIFF	.\include\sndfile.h	/^	SF_FORMAT_AIFF			= 0x020000,		\/* Apple\/SGI AIFF format (big endian). *\/$/;"	e	enum:__anon3
SF_FORMAT_ALAW	.\include\sndfile.h	/^	SF_FORMAT_ALAW			= 0x0011,		\/* A-Law encoded. *\/$/;"	e	enum:__anon3
SF_FORMAT_AU	.\include\sndfile.h	/^	SF_FORMAT_AU			= 0x030000,		\/* Sun\/NeXT AU format (big endian). *\/$/;"	e	enum:__anon3
SF_FORMAT_AVR	.\include\sndfile.h	/^	SF_FORMAT_AVR			= 0x120000,		\/* Audio Visual Research *\/$/;"	e	enum:__anon3
SF_FORMAT_CAF	.\include\sndfile.h	/^	SF_FORMAT_CAF			= 0x180000,		\/* Core Audio File format *\/$/;"	e	enum:__anon3
SF_FORMAT_DOUBLE	.\include\sndfile.h	/^	SF_FORMAT_DOUBLE		= 0x0007,		\/* 64 bit float data *\/$/;"	e	enum:__anon3
SF_FORMAT_DPCM_16	.\include\sndfile.h	/^	SF_FORMAT_DPCM_16		= 0x0051,		\/* 16 bit differential PCM (XI only) *\/$/;"	e	enum:__anon3
SF_FORMAT_DPCM_8	.\include\sndfile.h	/^	SF_FORMAT_DPCM_8		= 0x0050,		\/* 8 bit differential PCM (XI only) *\/$/;"	e	enum:__anon3
SF_FORMAT_DWVW_12	.\include\sndfile.h	/^	SF_FORMAT_DWVW_12		= 0x0040, 		\/* 12 bit Delta Width Variable Word encoding. *\/$/;"	e	enum:__anon3
SF_FORMAT_DWVW_16	.\include\sndfile.h	/^	SF_FORMAT_DWVW_16		= 0x0041, 		\/* 16 bit Delta Width Variable Word encoding. *\/$/;"	e	enum:__anon3
SF_FORMAT_DWVW_24	.\include\sndfile.h	/^	SF_FORMAT_DWVW_24		= 0x0042, 		\/* 24 bit Delta Width Variable Word encoding. *\/$/;"	e	enum:__anon3
SF_FORMAT_DWVW_N	.\include\sndfile.h	/^	SF_FORMAT_DWVW_N		= 0x0043, 		\/* N bit Delta Width Variable Word encoding. *\/$/;"	e	enum:__anon3
SF_FORMAT_ENDMASK	.\include\sndfile.h	/^	SF_FORMAT_ENDMASK		= 0x30000000$/;"	e	enum:__anon3
SF_FORMAT_FLAC	.\include\sndfile.h	/^	SF_FORMAT_FLAC			= 0x170000,		\/* FLAC lossless file format *\/$/;"	e	enum:__anon3
SF_FORMAT_FLOAT	.\include\sndfile.h	/^	SF_FORMAT_FLOAT			= 0x0006,		\/* 32 bit float data *\/$/;"	e	enum:__anon3
SF_FORMAT_G721_32	.\include\sndfile.h	/^	SF_FORMAT_G721_32		= 0x0030,		\/* 32kbs G721 ADPCM encoding. *\/$/;"	e	enum:__anon3
SF_FORMAT_G723_24	.\include\sndfile.h	/^	SF_FORMAT_G723_24		= 0x0031,		\/* 24kbs G723 ADPCM encoding. *\/$/;"	e	enum:__anon3
SF_FORMAT_G723_40	.\include\sndfile.h	/^	SF_FORMAT_G723_40		= 0x0032,		\/* 40kbs G723 ADPCM encoding. *\/$/;"	e	enum:__anon3
SF_FORMAT_GSM610	.\include\sndfile.h	/^	SF_FORMAT_GSM610		= 0x0020,		\/* GSM 6.10 encoding. *\/$/;"	e	enum:__anon3
SF_FORMAT_HTK	.\include\sndfile.h	/^	SF_FORMAT_HTK			= 0x100000,		\/* HMM Tool Kit format *\/$/;"	e	enum:__anon3
SF_FORMAT_IMA_ADPCM	.\include\sndfile.h	/^	SF_FORMAT_IMA_ADPCM		= 0x0012,		\/* IMA ADPCM. *\/$/;"	e	enum:__anon3
SF_FORMAT_INFO	.\include\sndfile.h	/^} SF_FORMAT_INFO ;$/;"	t	typeref:struct:__anon8
SF_FORMAT_IRCAM	.\include\sndfile.h	/^	SF_FORMAT_IRCAM			= 0x0A0000,		\/* Berkeley\/IRCAM\/CARL *\/$/;"	e	enum:__anon3
SF_FORMAT_MAT4	.\include\sndfile.h	/^	SF_FORMAT_MAT4			= 0x0C0000,		\/* Matlab (tm) V4.2 \/ GNU Octave 2.0 *\/$/;"	e	enum:__anon3
SF_FORMAT_MAT5	.\include\sndfile.h	/^	SF_FORMAT_MAT5			= 0x0D0000,		\/* Matlab (tm) V5.0 \/ GNU Octave 2.1 *\/$/;"	e	enum:__anon3
SF_FORMAT_MS_ADPCM	.\include\sndfile.h	/^	SF_FORMAT_MS_ADPCM		= 0x0013,		\/* Microsoft ADPCM. *\/$/;"	e	enum:__anon3
SF_FORMAT_NIST	.\include\sndfile.h	/^	SF_FORMAT_NIST			= 0x070000,		\/* Sphere NIST format. *\/$/;"	e	enum:__anon3
SF_FORMAT_PAF	.\include\sndfile.h	/^	SF_FORMAT_PAF			= 0x050000,		\/* Ensoniq PARIS file format. *\/$/;"	e	enum:__anon3
SF_FORMAT_PCM_16	.\include\sndfile.h	/^	SF_FORMAT_PCM_16		= 0x0002,		\/* Signed 16 bit data *\/$/;"	e	enum:__anon3
SF_FORMAT_PCM_24	.\include\sndfile.h	/^	SF_FORMAT_PCM_24		= 0x0003,		\/* Signed 24 bit data *\/$/;"	e	enum:__anon3
SF_FORMAT_PCM_32	.\include\sndfile.h	/^	SF_FORMAT_PCM_32		= 0x0004,		\/* Signed 32 bit data *\/$/;"	e	enum:__anon3
SF_FORMAT_PCM_S8	.\include\sndfile.h	/^	SF_FORMAT_PCM_S8		= 0x0001,		\/* Signed 8 bit data *\/$/;"	e	enum:__anon3
SF_FORMAT_PCM_U8	.\include\sndfile.h	/^	SF_FORMAT_PCM_U8		= 0x0005,		\/* Unsigned 8 bit data (WAV and RAW only) *\/$/;"	e	enum:__anon3
SF_FORMAT_PVF	.\include\sndfile.h	/^	SF_FORMAT_PVF			= 0x0E0000,		\/* Portable Voice Format *\/$/;"	e	enum:__anon3
SF_FORMAT_RAW	.\include\sndfile.h	/^	SF_FORMAT_RAW			= 0x040000,		\/* RAW PCM data. *\/$/;"	e	enum:__anon3
SF_FORMAT_SD2	.\include\sndfile.h	/^	SF_FORMAT_SD2			= 0x160000,		\/* Sound Designer 2 *\/$/;"	e	enum:__anon3
SF_FORMAT_SDS	.\include\sndfile.h	/^	SF_FORMAT_SDS			= 0x110000,		\/* Midi Sample Dump Standard *\/$/;"	e	enum:__anon3
SF_FORMAT_SUBMASK	.\include\sndfile.h	/^	SF_FORMAT_SUBMASK		= 0x0000FFFF,$/;"	e	enum:__anon3
SF_FORMAT_SVX	.\include\sndfile.h	/^	SF_FORMAT_SVX			= 0x060000,		\/* Amiga IFF \/ SVX8 \/ SV16 format. *\/$/;"	e	enum:__anon3
SF_FORMAT_TYPEMASK	.\include\sndfile.h	/^	SF_FORMAT_TYPEMASK		= 0x0FFF0000,$/;"	e	enum:__anon3
SF_FORMAT_ULAW	.\include\sndfile.h	/^	SF_FORMAT_ULAW			= 0x0010,		\/* U-Law encoded. *\/$/;"	e	enum:__anon3
SF_FORMAT_VOC	.\include\sndfile.h	/^	SF_FORMAT_VOC			= 0x080000,		\/* VOC files. *\/$/;"	e	enum:__anon3
SF_FORMAT_VOX_ADPCM	.\include\sndfile.h	/^	SF_FORMAT_VOX_ADPCM		= 0x0021,		\/* OKI \/ Dialogix ADPCM *\/$/;"	e	enum:__anon3
SF_FORMAT_W64	.\include\sndfile.h	/^	SF_FORMAT_W64			= 0x0B0000,		\/* Sonic Foundry's 64 bit RIFF\/WAV *\/$/;"	e	enum:__anon3
SF_FORMAT_WAV	.\include\sndfile.h	/^	SF_FORMAT_WAV			= 0x010000,		\/* Microsoft WAV format (little endian default). *\/$/;"	e	enum:__anon3
SF_FORMAT_WAVEX	.\include\sndfile.h	/^	SF_FORMAT_WAVEX			= 0x130000,		\/* MS WAVE with WAVEFORMATEX *\/$/;"	e	enum:__anon3
SF_FORMAT_XI	.\include\sndfile.h	/^	SF_FORMAT_XI			= 0x0F0000,		\/* Fasttracker 2 Extended Instrument *\/$/;"	e	enum:__anon3
SF_INFO	.\include\sndfile.h	/^struct SF_INFO$/;"	s
SF_INFO	.\include\sndfile.h	/^typedef	struct SF_INFO SF_INFO ;$/;"	t	typeref:struct:SF_INFO
SF_INFO::channels	.\include\sndfile.h	/^	int			channels ;$/;"	m	struct:SF_INFO	access:public
SF_INFO::format	.\include\sndfile.h	/^	int			format ;$/;"	m	struct:SF_INFO	access:public
SF_INFO::frames	.\include\sndfile.h	/^{	sf_count_t	frames ;		\/* Used to be called samples.  Changed to avoid confusion. *\/$/;"	m	struct:SF_INFO	access:public
SF_INFO::samplerate	.\include\sndfile.h	/^	int			samplerate ;$/;"	m	struct:SF_INFO	access:public
SF_INFO::sections	.\include\sndfile.h	/^	int			sections ;$/;"	m	struct:SF_INFO	access:public
SF_INFO::seekable	.\include\sndfile.h	/^	int			seekable ;$/;"	m	struct:SF_INFO	access:public
SF_INSTRUMENT	.\include\sndfile.h	/^} SF_INSTRUMENT ;$/;"	t	typeref:struct:__anon13
SF_LOOP_ALTERNATING	.\include\sndfile.h	/^	SF_LOOP_ALTERNATING$/;"	e	enum:__anon12
SF_LOOP_BACKWARD	.\include\sndfile.h	/^	SF_LOOP_BACKWARD,$/;"	e	enum:__anon12
SF_LOOP_FORWARD	.\include\sndfile.h	/^	SF_LOOP_FORWARD,$/;"	e	enum:__anon12
SF_LOOP_INFO	.\include\sndfile.h	/^} SF_LOOP_INFO ;$/;"	t	typeref:struct:__anon15
SF_LOOP_NONE	.\include\sndfile.h	/^	SF_LOOP_NONE = 800,$/;"	e	enum:__anon12
SF_STR_ARTIST	.\include\sndfile.h	/^	SF_STR_ARTIST					= 0x04,$/;"	e	enum:__anon5
SF_STR_COMMENT	.\include\sndfile.h	/^	SF_STR_COMMENT					= 0x05,$/;"	e	enum:__anon5
SF_STR_COPYRIGHT	.\include\sndfile.h	/^	SF_STR_COPYRIGHT				= 0x02,$/;"	e	enum:__anon5
SF_STR_DATE	.\include\sndfile.h	/^	SF_STR_DATE						= 0x06$/;"	e	enum:__anon5
SF_STR_FIRST	.\include\sndfile.h	216;"	d
SF_STR_LAST	.\include\sndfile.h	217;"	d
SF_STR_SOFTWARE	.\include\sndfile.h	/^	SF_STR_SOFTWARE					= 0x03,$/;"	e	enum:__anon5
SF_STR_TITLE	.\include\sndfile.h	/^{	SF_STR_TITLE					= 0x01,$/;"	e	enum:__anon5
SF_TRUE	.\include\sndfile.h	/^	SF_TRUE		= 1,$/;"	e	enum:__anon6
SF_VIRTUAL_IO	.\include\sndfile.h	/^struct SF_VIRTUAL_IO$/;"	s
SF_VIRTUAL_IO	.\include\sndfile.h	/^typedef	struct SF_VIRTUAL_IO SF_VIRTUAL_IO ;$/;"	t	typeref:struct:SF_VIRTUAL_IO
SF_VIRTUAL_IO::get_filelen	.\include\sndfile.h	/^{	sf_vio_get_filelen	get_filelen ;$/;"	m	struct:SF_VIRTUAL_IO	access:public
SF_VIRTUAL_IO::read	.\include\sndfile.h	/^	sf_vio_read			read ;$/;"	m	struct:SF_VIRTUAL_IO	access:public
SF_VIRTUAL_IO::seek	.\include\sndfile.h	/^	sf_vio_seek			seek ;$/;"	m	struct:SF_VIRTUAL_IO	access:public
SF_VIRTUAL_IO::tell	.\include\sndfile.h	/^	sf_vio_tell			tell ;$/;"	m	struct:SF_VIRTUAL_IO	access:public
SF_VIRTUAL_IO::write	.\include\sndfile.h	/^	sf_vio_write		write ;$/;"	m	struct:SF_VIRTUAL_IO	access:public
SNDFILE	.\include\sndfile.h	/^typedef	struct SNDFILE_tag	SNDFILE ;$/;"	t	typeref:struct:SNDFILE_tag
SNDFILE_1	.\include\sndfile.h	30;"	d
SNDFILE_H	.\include\sndfile.h	27;"	d
SNDINFO	.\testPlay.c	/^} SNDINFO;$/;"	t	typeref:struct:_SNDINFO	file:
TRACE_REALTIME_EVENTS	.\include\pa_trace.h	36;"	d
_SNDINFO	.\testPlay.c	/^typedef struct _SNDINFO {$/;"	s	file:
_SNDINFO::sf_info	.\testPlay.c	/^	SF_INFO sf_info;$/;"	m	struct:_SNDINFO	file:	access:public
_SNDINFO::sndfile	.\testPlay.c	/^	SNDFILE *sndfile;$/;"	m	struct:_SNDINFO	file:	access:public
__anon10::level	.\include\sndfile.h	/^	double		level ;$/;"	m	struct:__anon10	access:public
__anon10::name	.\include\sndfile.h	/^	const char	*name ;$/;"	m	struct:__anon10	access:public
__anon10::type	.\include\sndfile.h	/^{	int			type ;$/;"	m	struct:__anon10	access:public
__anon11::length	.\include\sndfile.h	/^	sf_count_t	length ;$/;"	m	struct:__anon11	access:public
__anon11::offset	.\include\sndfile.h	/^{	sf_count_t	offset ;$/;"	m	struct:__anon11	access:public
__anon13::__anon14::count	.\include\sndfile.h	/^		unsigned int count ;$/;"	m	struct:__anon13::__anon14	access:public
__anon13::__anon14::end	.\include\sndfile.h	/^		unsigned int end ;$/;"	m	struct:__anon13::__anon14	access:public
__anon13::__anon14::mode	.\include\sndfile.h	/^	{	int mode ;$/;"	m	struct:__anon13::__anon14	access:public
__anon13::__anon14::start	.\include\sndfile.h	/^		unsigned int start ;$/;"	m	struct:__anon13::__anon14	access:public
__anon13::basenote	.\include\sndfile.h	/^	char basenote, detune ;$/;"	m	struct:__anon13	access:public
__anon13::detune	.\include\sndfile.h	/^	char basenote, detune ;$/;"	m	struct:__anon13	access:public
__anon13::gain	.\include\sndfile.h	/^{	int gain ;$/;"	m	struct:__anon13	access:public
__anon13::key_hi	.\include\sndfile.h	/^	char key_lo, key_hi ;$/;"	m	struct:__anon13	access:public
__anon13::key_lo	.\include\sndfile.h	/^	char key_lo, key_hi ;$/;"	m	struct:__anon13	access:public
__anon13::loop_count	.\include\sndfile.h	/^	int loop_count ;$/;"	m	struct:__anon13	access:public
__anon13::loops	.\include\sndfile.h	/^	} loops [16] ; \/* make variable in a sensible way *\/$/;"	m	struct:__anon13	typeref:struct:__anon13::__anon14	access:public
__anon13::velocity_hi	.\include\sndfile.h	/^	char velocity_lo, velocity_hi ;$/;"	m	struct:__anon13	access:public
__anon13::velocity_lo	.\include\sndfile.h	/^	char velocity_lo, velocity_hi ;$/;"	m	struct:__anon13	access:public
__anon15::bpm	.\include\sndfile.h	/^	float	bpm ;			\/* suggestion, as it can be calculated using other fields:*\/$/;"	m	struct:__anon15	access:public
__anon15::future	.\include\sndfile.h	/^	int future [6] ;$/;"	m	struct:__anon15	access:public
__anon15::loop_mode	.\include\sndfile.h	/^	int		loop_mode ;		\/* see SF_LOOP enum             *\/$/;"	m	struct:__anon15	access:public
__anon15::num_beats	.\include\sndfile.h	/^	int		num_beats ;		\/* this is NOT the amount of quarter notes !!!*\/$/;"	m	struct:__anon15	access:public
__anon15::root_key	.\include\sndfile.h	/^	int	root_key ;			\/* MIDI note, or -1 for None *\/$/;"	m	struct:__anon15	access:public
__anon15::time_sig_den	.\include\sndfile.h	/^	short	time_sig_den ;	\/* any positive power of 2 > 0  *\/$/;"	m	struct:__anon15	access:public
__anon15::time_sig_num	.\include\sndfile.h	/^	short	time_sig_num ;	\/* any positive integer    > 0  *\/$/;"	m	struct:__anon15	access:public
__anon16::coding_history	.\include\sndfile.h	/^	char			coding_history [256] ;$/;"	m	struct:__anon16	access:public
__anon16::coding_history_size	.\include\sndfile.h	/^	unsigned int	coding_history_size ;$/;"	m	struct:__anon16	access:public
__anon16::description	.\include\sndfile.h	/^{	char			description [256] ;$/;"	m	struct:__anon16	access:public
__anon16::origination_date	.\include\sndfile.h	/^	char			origination_date [10] ;$/;"	m	struct:__anon16	access:public
__anon16::origination_time	.\include\sndfile.h	/^	char			origination_time [8] ;$/;"	m	struct:__anon16	access:public
__anon16::originator	.\include\sndfile.h	/^	char			originator [32] ;$/;"	m	struct:__anon16	access:public
__anon16::originator_reference	.\include\sndfile.h	/^	char			originator_reference [32] ;$/;"	m	struct:__anon16	access:public
__anon16::reserved	.\include\sndfile.h	/^	char			reserved [190] ;$/;"	m	struct:__anon16	access:public
__anon16::time_reference_high	.\include\sndfile.h	/^	int				time_reference_high ;$/;"	m	struct:__anon16	access:public
__anon16::time_reference_low	.\include\sndfile.h	/^	int				time_reference_low ;$/;"	m	struct:__anon16	access:public
__anon16::umid	.\include\sndfile.h	/^	char			umid [64] ;$/;"	m	struct:__anon16	access:public
__anon16::version	.\include\sndfile.h	/^	short			version ;$/;"	m	struct:__anon16	access:public
__anon2::maxInputChannels	.\include\portaudio.h	/^    int maxInputChannels;$/;"	m	struct:__anon2	access:public
__anon2::maxOutputChannels	.\include\portaudio.h	/^    int maxOutputChannels;$/;"	m	struct:__anon2	access:public
__anon2::name	.\include\portaudio.h	/^    const char *name;$/;"	m	struct:__anon2	access:public
__anon2::nativeSampleFormats	.\include\portaudio.h	/^    PaSampleFormat nativeSampleFormats;$/;"	m	struct:__anon2	access:public
__anon2::numSampleRates	.\include\portaudio.h	/^    int numSampleRates;$/;"	m	struct:__anon2	access:public
__anon2::sampleRates	.\include\portaudio.h	/^    const double *sampleRates;$/;"	m	struct:__anon2	access:public
__anon2::structVersion	.\include\portaudio.h	/^    int structVersion;$/;"	m	struct:__anon2	access:public
__anon8::extension	.\include\sndfile.h	/^	const char	*extension ;$/;"	m	struct:__anon8	access:public
__anon8::format	.\include\sndfile.h	/^{	int			format ;$/;"	m	struct:__anon8	access:public
__anon8::name	.\include\sndfile.h	/^	const char	*name ;$/;"	m	struct:__anon8	access:public
basenote	.\include\sndfile.h	/^	char basenote, detune ;$/;"	m	struct:__anon13	access:public
bpm	.\include\sndfile.h	/^	float	bpm ;			\/* suggestion, as it can be calculated using other fields:*\/$/;"	m	struct:__anon15	access:public
channels	.\include\sndfile.h	/^	int			channels ;$/;"	m	struct:SF_INFO	access:public
checkPaError	.\testPlay.c	/^int checkPaError(PaError paError) {$/;"	f	signature:(PaError paError)
checkPaError	.\testPlay.c	/^int checkPaError(PaError paError);$/;"	p	file:	signature:(PaError paError)
coding_history	.\include\sndfile.h	/^	char			coding_history [256] ;$/;"	m	struct:__anon16	access:public
coding_history_size	.\include\sndfile.h	/^	unsigned int	coding_history_size ;$/;"	m	struct:__anon16	access:public
count	.\include\sndfile.h	/^		unsigned int count ;$/;"	m	struct:__anon13::__anon14	access:public
description	.\include\sndfile.h	/^{	char			description [256] ;$/;"	m	struct:__anon16	access:public
detune	.\include\sndfile.h	/^	char basenote, detune ;$/;"	m	struct:__anon13	access:public
end	.\include\sndfile.h	/^		unsigned int end ;$/;"	m	struct:__anon13::__anon14	access:public
extension	.\include\sndfile.h	/^	const char	*extension ;$/;"	m	struct:__anon8	access:public
format	.\include\sndfile.h	/^	int			format ;$/;"	m	struct:SF_INFO	access:public
format	.\include\sndfile.h	/^{	int			format ;$/;"	m	struct:__anon8	access:public
frames	.\include\sndfile.h	/^{	sf_count_t	frames ;		\/* Used to be called samples.  Changed to avoid confusion. *\/$/;"	m	struct:SF_INFO	access:public
future	.\include\sndfile.h	/^	int future [6] ;$/;"	m	struct:__anon15	access:public
gain	.\include\sndfile.h	/^{	int gain ;$/;"	m	struct:__anon13	access:public
get_filelen	.\include\sndfile.h	/^{	sf_vio_get_filelen	get_filelen ;$/;"	m	struct:SF_VIRTUAL_IO	access:public
key_hi	.\include\sndfile.h	/^	char key_lo, key_hi ;$/;"	m	struct:__anon13	access:public
key_lo	.\include\sndfile.h	/^	char key_lo, key_hi ;$/;"	m	struct:__anon13	access:public
length	.\include\sndfile.h	/^	sf_count_t	length ;$/;"	m	struct:__anon11	access:public
level	.\include\sndfile.h	/^	double		level ;$/;"	m	struct:__anon10	access:public
loop_count	.\include\sndfile.h	/^	int loop_count ;$/;"	m	struct:__anon13	access:public
loop_mode	.\include\sndfile.h	/^	int		loop_mode ;		\/* see SF_LOOP enum             *\/$/;"	m	struct:__anon15	access:public
loops	.\include\sndfile.h	/^	} loops [16] ; \/* make variable in a sensible way *\/$/;"	m	struct:__anon13	typeref:struct:__anon13::__anon14	access:public
main	.\testPlay.c	/^int main (int argc, char *argv[]) {$/;"	f	signature:(int argc, char *argv[])
maxInputChannels	.\include\portaudio.h	/^    int maxInputChannels;$/;"	m	struct:__anon2	access:public
maxOutputChannels	.\include\portaudio.h	/^    int maxOutputChannels;$/;"	m	struct:__anon2	access:public
mode	.\include\sndfile.h	/^	{	int mode ;$/;"	m	struct:__anon13::__anon14	access:public
name	.\include\portaudio.h	/^    const char *name;$/;"	m	struct:__anon2	access:public
name	.\include\sndfile.h	/^	const char	*name ;$/;"	m	struct:__anon10	access:public
name	.\include\sndfile.h	/^	const char	*name ;$/;"	m	struct:__anon8	access:public
nativeSampleFormats	.\include\portaudio.h	/^    PaSampleFormat nativeSampleFormats;$/;"	m	struct:__anon2	access:public
numSampleRates	.\include\portaudio.h	/^    int numSampleRates;$/;"	m	struct:__anon2	access:public
num_beats	.\include\sndfile.h	/^	int		num_beats ;		\/* this is NOT the amount of quarter notes !!!*\/$/;"	m	struct:__anon15	access:public
offset	.\include\sndfile.h	/^{	sf_count_t	offset ;$/;"	m	struct:__anon11	access:public
origination_date	.\include\sndfile.h	/^	char			origination_date [10] ;$/;"	m	struct:__anon16	access:public
origination_time	.\include\sndfile.h	/^	char			origination_time [8] ;$/;"	m	struct:__anon16	access:public
originator	.\include\sndfile.h	/^	char			originator [32] ;$/;"	m	struct:__anon16	access:public
originator_reference	.\include\sndfile.h	/^	char			originator_reference [32] ;$/;"	m	struct:__anon16	access:public
paBadIODeviceCombination	.\include\portaudio.h	/^    paBadIODeviceCombination,$/;"	e	enum:__anon1
paBadStreamPtr	.\include\portaudio.h	/^    paBadStreamPtr,$/;"	e	enum:__anon1
paBufferTooBig	.\include\portaudio.h	/^    paBufferTooBig,$/;"	e	enum:__anon1
paBufferTooSmall	.\include\portaudio.h	/^    paBufferTooSmall,$/;"	e	enum:__anon1
paClipOff	.\include\portaudio.h	236;"	d
paCustomFormat	.\include\portaudio.h	120;"	d
paDeviceUnavailable	.\include\portaudio.h	/^    paDeviceUnavailable$/;"	e	enum:__anon1
paDitherOff	.\include\portaudio.h	237;"	d
paErrorHandling	.\testPlay.c	/^void paErrorHandling(PaError paError) {$/;"	f	signature:(PaError paError)
paErrorHandling	.\testPlay.c	/^void paErrorHandling(PaError paError);$/;"	p	file:	signature:(PaError paError)
paFloat32	.\include\portaudio.h	113;"	d
paHostError	.\include\portaudio.h	/^    paHostError = -10000,$/;"	e	enum:__anon1
paInsufficientMemory	.\include\portaudio.h	/^    paInsufficientMemory,$/;"	e	enum:__anon1
paInt16	.\include\portaudio.h	114;"	d
paInt24	.\include\portaudio.h	116;"	d
paInt32	.\include\portaudio.h	115;"	d
paInt8	.\include\portaudio.h	118;"	d
paInternalError	.\include\portaudio.h	/^    paInternalError,$/;"	e	enum:__anon1
paInvalidChannelCount	.\include\portaudio.h	/^    paInvalidChannelCount,$/;"	e	enum:__anon1
paInvalidDeviceId	.\include\portaudio.h	/^    paInvalidDeviceId,$/;"	e	enum:__anon1
paInvalidFlag	.\include\portaudio.h	/^    paInvalidFlag,$/;"	e	enum:__anon1
paInvalidSampleRate	.\include\portaudio.h	/^    paInvalidSampleRate,$/;"	e	enum:__anon1
paNoDevice	.\include\portaudio.h	132;"	d
paNoError	.\include\portaudio.h	/^    paNoError = 0,$/;"	e	enum:__anon1
paNoFlag	.\include\portaudio.h	235;"	d
paNullCallback	.\include\portaudio.h	/^    paNullCallback,$/;"	e	enum:__anon1
paPackedInt24	.\include\portaudio.h	117;"	d
paPlatformSpecificFlags	.\include\portaudio.h	238;"	d
paProcess	.\testPlay.c	/^int paProcess(SNDINFO *sndInfo) {$/;"	f	signature:(SNDINFO *sndInfo)
paProcess	.\testPlay.c	/^int paProcess(SNDINFO *sndInfo);$/;"	p	file:	signature:(SNDINFO *sndInfo)
paSampleFormatNotSupported	.\include\portaudio.h	/^    paSampleFormatNotSupported,$/;"	e	enum:__anon1
paTimedOut	.\include\portaudio.h	/^    paTimedOut,$/;"	e	enum:__anon1
paUInt8	.\include\portaudio.h	119;"	d
playCallback	.\testPlay.c	/^int playCallback(void *inputBuffer, void *outputBuffer, unsigned long framesPerBuffer, PaTimestamp outTime, void *userData) {$/;"	f	signature:(void *inputBuffer, void *outputBuffer, unsigned long framesPerBuffer, PaTimestamp outTime, void *userData)
playCallback	.\testPlay.c	/^int playCallback(void *inputBuffer, void *outputBuffer, unsigned long framesPerBuffer, PaTimestamp outTime, void *userData); $/;"	p	file:	signature:(void *inputBuffer, void *outputBuffer, unsigned long framesPerBuffer, PaTimestamp outTime, void *userData)
read	.\include\sndfile.h	/^	sf_vio_read			read ;$/;"	m	struct:SF_VIRTUAL_IO	access:public
reserved	.\include\sndfile.h	/^	char			reserved [190] ;$/;"	m	struct:__anon16	access:public
root_key	.\include\sndfile.h	/^	int	root_key ;			\/* MIDI note, or -1 for None *\/$/;"	m	struct:__anon15	access:public
sampleRates	.\include\portaudio.h	/^    const double *sampleRates;$/;"	m	struct:__anon2	access:public
samplerate	.\include\sndfile.h	/^	int			samplerate ;$/;"	m	struct:SF_INFO	access:public
sections	.\include\sndfile.h	/^	int			sections ;$/;"	m	struct:SF_INFO	access:public
seek	.\include\sndfile.h	/^	sf_vio_seek			seek ;$/;"	m	struct:SF_VIRTUAL_IO	access:public
seekable	.\include\sndfile.h	/^	int			seekable ;$/;"	m	struct:SF_INFO	access:public
sfErrorHandling	.\testPlay.c	/^void sfErrorHandling(int errorNumber) {$/;"	f	signature:(int errorNumber)
sfErrorHandling	.\testPlay.c	/^void sfErrorHandling(int errorNumber);$/;"	p	file:	signature:(int errorNumber)
sf_close	.\include\sndfile.h	/^int		sf_close		(SNDFILE *sndfile) ;$/;"	p	signature:(SNDFILE *sndfile)
sf_command	.\include\sndfile.h	/^int		sf_command	(SNDFILE *sndfile, int command, void *data, int datasize) ;$/;"	p	signature:(SNDFILE *sndfile, int command, void *data, int datasize)
sf_count_t	.\include\sndfile.h	/^typedef __int64	sf_count_t ;$/;"	t
sf_error	.\include\sndfile.h	/^int		sf_error		(SNDFILE *sndfile) ;$/;"	p	signature:(SNDFILE *sndfile)
sf_error_number	.\include\sndfile.h	/^const char*	sf_error_number	(int errnum) ;$/;"	p	signature:(int errnum)
sf_error_str	.\include\sndfile.h	/^int		sf_error_str	(SNDFILE *sndfile, char* str, size_t len) ;$/;"	p	signature:(SNDFILE *sndfile, char* str, size_t len)
sf_format_check	.\include\sndfile.h	/^int		sf_format_check	(const SF_INFO *info) ;$/;"	p	signature:(const SF_INFO *info)
sf_get_string	.\include\sndfile.h	/^const char* sf_get_string (SNDFILE *sndfile, int str_type) ;$/;"	p	signature:(SNDFILE *sndfile, int str_type)
sf_info	.\testPlay.c	/^	SF_INFO sf_info;$/;"	m	struct:_SNDINFO	file:	access:public
sf_open	.\include\sndfile.h	/^SNDFILE* 	sf_open		(const char *path, int mode, SF_INFO *sfinfo) ;$/;"	p	signature:(const char *path, int mode, SF_INFO *sfinfo)
sf_open_fd	.\include\sndfile.h	/^SNDFILE* 	sf_open_fd	(int fd, int mode, SF_INFO *sfinfo, int close_desc) ;$/;"	p	signature:(int fd, int mode, SF_INFO *sfinfo, int close_desc)
sf_open_virtual	.\include\sndfile.h	/^SNDFILE* 	sf_open_virtual	(SF_VIRTUAL_IO *sfvirtual, int mode, SF_INFO *sfinfo, void *user_data) ;$/;"	p	signature:(SF_VIRTUAL_IO *sfvirtual, int mode, SF_INFO *sfinfo, void *user_data)
sf_perror	.\include\sndfile.h	/^int		sf_perror		(SNDFILE *sndfile) ;$/;"	p	signature:(SNDFILE *sndfile)
sf_read_double	.\include\sndfile.h	/^sf_count_t	sf_read_double	(SNDFILE *sndfile, double *ptr, sf_count_t items) ;$/;"	p	signature:(SNDFILE *sndfile, double *ptr, sf_count_t items)
sf_read_float	.\include\sndfile.h	/^sf_count_t	sf_read_float	(SNDFILE *sndfile, float *ptr, sf_count_t items) ;$/;"	p	signature:(SNDFILE *sndfile, float *ptr, sf_count_t items)
sf_read_int	.\include\sndfile.h	/^sf_count_t	sf_read_int		(SNDFILE *sndfile, int *ptr, sf_count_t items) ;$/;"	p	signature:(SNDFILE *sndfile, int *ptr, sf_count_t items)
sf_read_raw	.\include\sndfile.h	/^sf_count_t	sf_read_raw		(SNDFILE *sndfile, void *ptr, sf_count_t bytes) ;$/;"	p	signature:(SNDFILE *sndfile, void *ptr, sf_count_t bytes)
sf_read_short	.\include\sndfile.h	/^sf_count_t	sf_read_short	(SNDFILE *sndfile, short *ptr, sf_count_t items) ;$/;"	p	signature:(SNDFILE *sndfile, short *ptr, sf_count_t items)
sf_readf_double	.\include\sndfile.h	/^sf_count_t	sf_readf_double		(SNDFILE *sndfile, double *ptr, sf_count_t frames) ;$/;"	p	signature:(SNDFILE *sndfile, double *ptr, sf_count_t frames)
sf_readf_float	.\include\sndfile.h	/^sf_count_t	sf_readf_float	(SNDFILE *sndfile, float *ptr, sf_count_t frames) ;$/;"	p	signature:(SNDFILE *sndfile, float *ptr, sf_count_t frames)
sf_readf_int	.\include\sndfile.h	/^sf_count_t	sf_readf_int	(SNDFILE *sndfile, int *ptr, sf_count_t frames) ;$/;"	p	signature:(SNDFILE *sndfile, int *ptr, sf_count_t frames)
sf_readf_short	.\include\sndfile.h	/^sf_count_t	sf_readf_short	(SNDFILE *sndfile, short *ptr, sf_count_t frames) ;$/;"	p	signature:(SNDFILE *sndfile, short *ptr, sf_count_t frames)
sf_seek	.\include\sndfile.h	/^sf_count_t	sf_seek 		(SNDFILE *sndfile, sf_count_t frames, int whence) ;$/;"	p	signature:(SNDFILE *sndfile, sf_count_t frames, int whence)
sf_set_string	.\include\sndfile.h	/^int sf_set_string (SNDFILE *sndfile, int str_type, const char* str) ;$/;"	p	signature:(SNDFILE *sndfile, int str_type, const char* str)
sf_strerror	.\include\sndfile.h	/^const char* sf_strerror (SNDFILE *sndfile) ;$/;"	p	signature:(SNDFILE *sndfile)
sf_vio_get_filelen	.\include\sndfile.h	/^typedef sf_count_t		(*sf_vio_get_filelen)	(void *user_data) ;$/;"	t
sf_vio_read	.\include\sndfile.h	/^typedef sf_count_t		(*sf_vio_read)		(void *ptr, sf_count_t count, void *user_data) ;$/;"	t
sf_vio_seek	.\include\sndfile.h	/^typedef sf_count_t		(*sf_vio_seek)		(sf_count_t offset, int whence, void *user_data) ;$/;"	t
sf_vio_tell	.\include\sndfile.h	/^typedef sf_count_t		(*sf_vio_tell)		(void *user_data) ;$/;"	t
sf_vio_write	.\include\sndfile.h	/^typedef sf_count_t		(*sf_vio_write)		(const void *ptr, sf_count_t count, void *user_data) ;$/;"	t
sf_write_double	.\include\sndfile.h	/^sf_count_t	sf_write_double	(SNDFILE *sndfile, const double *ptr, sf_count_t items) ;$/;"	p	signature:(SNDFILE *sndfile, const double *ptr, sf_count_t items)
sf_write_float	.\include\sndfile.h	/^sf_count_t	sf_write_float	(SNDFILE *sndfile, const float *ptr, sf_count_t items) ;$/;"	p	signature:(SNDFILE *sndfile, const float *ptr, sf_count_t items)
sf_write_int	.\include\sndfile.h	/^sf_count_t	sf_write_int 	(SNDFILE *sndfile, const int *ptr, sf_count_t items) ;$/;"	p	signature:(SNDFILE *sndfile, const int *ptr, sf_count_t items)
sf_write_raw	.\include\sndfile.h	/^sf_count_t	sf_write_raw 	(SNDFILE *sndfile, const void *ptr, sf_count_t bytes) ;$/;"	p	signature:(SNDFILE *sndfile, const void *ptr, sf_count_t bytes)
sf_write_short	.\include\sndfile.h	/^sf_count_t	sf_write_short	(SNDFILE *sndfile, const short *ptr, sf_count_t items) ;$/;"	p	signature:(SNDFILE *sndfile, const short *ptr, sf_count_t items)
sf_write_sync	.\include\sndfile.h	/^void	sf_write_sync	(SNDFILE *sndfile) ;$/;"	p	signature:(SNDFILE *sndfile)
sf_writef_double	.\include\sndfile.h	/^sf_count_t	sf_writef_double	(SNDFILE *sndfile, const double *ptr, sf_count_t frames) ;$/;"	p	signature:(SNDFILE *sndfile, const double *ptr, sf_count_t frames)
sf_writef_float	.\include\sndfile.h	/^sf_count_t	sf_writef_float	(SNDFILE *sndfile, const float *ptr, sf_count_t frames) ;$/;"	p	signature:(SNDFILE *sndfile, const float *ptr, sf_count_t frames)
sf_writef_int	.\include\sndfile.h	/^sf_count_t	sf_writef_int 	(SNDFILE *sndfile, const int *ptr, sf_count_t frames) ;$/;"	p	signature:(SNDFILE *sndfile, const int *ptr, sf_count_t frames)
sf_writef_short	.\include\sndfile.h	/^sf_count_t	sf_writef_short	(SNDFILE *sndfile, const short *ptr, sf_count_t frames) ;$/;"	p	signature:(SNDFILE *sndfile, const short *ptr, sf_count_t frames)
sndfile	.\testPlay.c	/^	SNDFILE *sndfile;$/;"	m	struct:_SNDINFO	file:	access:public
start	.\include\sndfile.h	/^		unsigned int start ;$/;"	m	struct:__anon13::__anon14	access:public
structVersion	.\include\portaudio.h	/^    int structVersion;$/;"	m	struct:__anon2	access:public
tell	.\include\sndfile.h	/^	sf_vio_tell			tell ;$/;"	m	struct:SF_VIRTUAL_IO	access:public
time_reference_high	.\include\sndfile.h	/^	int				time_reference_high ;$/;"	m	struct:__anon16	access:public
time_reference_low	.\include\sndfile.h	/^	int				time_reference_low ;$/;"	m	struct:__anon16	access:public
time_sig_den	.\include\sndfile.h	/^	short	time_sig_den ;	\/* any positive power of 2 > 0  *\/$/;"	m	struct:__anon15	access:public
time_sig_num	.\include\sndfile.h	/^	short	time_sig_num ;	\/* any positive integer    > 0  *\/$/;"	m	struct:__anon15	access:public
type	.\include\sndfile.h	/^{	int			type ;$/;"	m	struct:__anon10	access:public
umid	.\include\sndfile.h	/^	char			umid [64] ;$/;"	m	struct:__anon16	access:public
velocity_hi	.\include\sndfile.h	/^	char velocity_lo, velocity_hi ;$/;"	m	struct:__anon13	access:public
velocity_lo	.\include\sndfile.h	/^	char velocity_lo, velocity_hi ;$/;"	m	struct:__anon13	access:public
version	.\include\sndfile.h	/^	short			version ;$/;"	m	struct:__anon16	access:public
write	.\include\sndfile.h	/^	sf_vio_write		write ;$/;"	m	struct:SF_VIRTUAL_IO	access:public
