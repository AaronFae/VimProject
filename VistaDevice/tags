!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
AUDIO_DEVICE_API	.\audio-device.h	14;"	d
AUDIO_DEVICE_API	.\audio-device.h	16;"	d
AUDIO_DEVICE_H	.\audio-device.h	2;"	d
AUDIO_INTERNAL_H	.\audio-internal.h	2;"	d
CLSID_PolicyConfig	.\audio-internal.h	/^EXTERN_C const CLSID CLSID_PolicyConfig;$/;"	v
DestroyAudioDevice	.\audio-device.cpp	/^AUDIO_DEVICE_API void DestroyAudioDevice(DeviceInfo *pDeviceInfo)$/;"	f	signature:(DeviceInfo *pDeviceInfo)
DestroyAudioDevice	.\audio-device.h	/^AUDIO_DEVICE_API void DestroyAudioDevice(DeviceInfo *pDeviceInfo);$/;"	p	signature:(DeviceInfo *pDeviceInfo)
DeviceInfo	.\audio-device.h	/^typedef void DeviceInfo;$/;"	t
EXIT_ON_ERROR	.\audio-internal.h	82;"	d
GetCaptureDeviceListCount	.\audio-device.cpp	/^AUDIO_DEVICE_API int GetCaptureDeviceListCount(DeviceInfo *pDeviceInfo)$/;"	f	signature:(DeviceInfo *pDeviceInfo)
GetCaptureDeviceListCount	.\audio-device.h	/^AUDIO_DEVICE_API int GetCaptureDeviceListCount(DeviceInfo *pDeviceInfo);$/;"	p	signature:(DeviceInfo *pDeviceInfo)
GetCaptureListDeviceChannelCount	.\audio-device.cpp	/^AUDIO_DEVICE_API HRESULT GetCaptureListDeviceChannelCount(DeviceInfo *pDeviceInfo, int index, UINT *iCount)$/;"	f	signature:(DeviceInfo *pDeviceInfo, int index, UINT *iCount)
GetCaptureListDeviceChannelCount	.\audio-device.h	/^AUDIO_DEVICE_API HRESULT GetCaptureListDeviceChannelCount(DeviceInfo *pDeviceInfo, int index, UINT *iCount);$/;"	p	signature:(DeviceInfo *pDeviceInfo, int index, UINT *iCount)
GetCaptureListDeviceChannelVolume	.\audio-device.cpp	/^AUDIO_DEVICE_API HRESULT GetCaptureListDeviceChannelVolume(DeviceInfo *pDeviceInfo, int index, float *pfVolume, UINT iChannel)$/;"	f	signature:(DeviceInfo *pDeviceInfo, int index, float *pfVolume, UINT iChannel)
GetCaptureListDeviceChannelVolume	.\audio-device.h	/^AUDIO_DEVICE_API HRESULT GetCaptureListDeviceChannelVolume(DeviceInfo *pDeviceInfo, int index, float *pfVolume, UINT iChannel);$/;"	p	signature:(DeviceInfo *pDeviceInfo, int index, float *pfVolume, UINT iChannel)
GetCaptureListDeviceId	.\audio-device.cpp	/^AUDIO_DEVICE_API void GetCaptureListDeviceId(DeviceInfo *pDeviceInfo, int index, LPWSTR szBuffer, int bufferLen)$/;"	f	signature:(DeviceInfo *pDeviceInfo, int index, LPWSTR szBuffer, int bufferLen)
GetCaptureListDeviceId	.\audio-device.h	/^AUDIO_DEVICE_API void GetCaptureListDeviceId(DeviceInfo *pDeviceInfo, int index, LPWSTR szBuffer, int bufferLen);$/;"	p	signature:(DeviceInfo *pDeviceInfo, int index, LPWSTR szBuffer, int bufferLen)
GetCaptureListDeviceName	.\audio-device.cpp	/^AUDIO_DEVICE_API void GetCaptureListDeviceName(DeviceInfo *pDeviceInfo, int index, LPWSTR szBuffer, int bufferLen, DWORD dwKeyName)$/;"	f	signature:(DeviceInfo *pDeviceInfo, int index, LPWSTR szBuffer, int bufferLen, DWORD dwKeyName)
GetCaptureListDeviceName	.\audio-device.h	/^AUDIO_DEVICE_API void GetCaptureListDeviceName(DeviceInfo *pDeviceInfo, int index, LPWSTR szBuffer, int bufferLen, DWORD dwKeyName);$/;"	p	signature:(DeviceInfo *pDeviceInfo, int index, LPWSTR szBuffer, int bufferLen, DWORD dwKeyName)
GetCaptureListDeviceState	.\audio-device.cpp	/^AUDIO_DEVICE_API BOOL GetCaptureListDeviceState(DeviceInfo *pDeviceInfo, int index)$/;"	f	signature:(DeviceInfo *pDeviceInfo, int index)
GetCaptureListDeviceState	.\audio-device.h	/^AUDIO_DEVICE_API BOOL GetCaptureListDeviceState(DeviceInfo *pDeviceInfo, int index);$/;"	p	signature:(DeviceInfo *pDeviceInfo, int index)
GetCaptureListDeviceVolume	.\audio-device.cpp	/^AUDIO_DEVICE_API HRESULT GetCaptureListDeviceVolume(DeviceInfo *pDeviceInfo, int index, float *pfVolume)$/;"	f	signature:(DeviceInfo *pDeviceInfo, int index, float *pfVolume)
GetCaptureListDeviceVolume	.\audio-device.h	/^AUDIO_DEVICE_API HRESULT GetCaptureListDeviceVolume(DeviceInfo *pDeviceInfo, int index, float *pfVolume);$/;"	p	signature:(DeviceInfo *pDeviceInfo, int index, float *pfVolume)
GetDefaultCaptureDeviceId	.\audio-device.cpp	/^AUDIO_DEVICE_API void GetDefaultCaptureDeviceId(DeviceInfo *pDeviceInfo, LPWSTR szBuffer, int bufferLen)$/;"	f	signature:(DeviceInfo *pDeviceInfo, LPWSTR szBuffer, int bufferLen)
GetDefaultCaptureDeviceId	.\audio-device.h	/^AUDIO_DEVICE_API void GetDefaultCaptureDeviceId(DeviceInfo *pDeviceInfo, LPWSTR szBuffer, int bufferLen);$/;"	p	signature:(DeviceInfo *pDeviceInfo, LPWSTR szBuffer, int bufferLen)
GetMixFormat	.\audio-device.cpp	/^AUDIO_DEVICE_API void GetMixFormat(DeviceInfo *pDeviceInfo, LPCWSTR lpcwstrDeviceId, WAVEFORMATEX **ppWaveFormatEx)$/;"	f	signature:(DeviceInfo *pDeviceInfo, LPCWSTR lpcwstrDeviceId, WAVEFORMATEX **ppWaveFormatEx)
GetMixFormat	.\audio-device.h	/^AUDIO_DEVICE_API void GetMixFormat(DeviceInfo *pDeviceInfo, LPCWSTR lpcwstrDeviceId, WAVEFORMATEX **ppWaveFormatEx);$/;"	p	signature:(DeviceInfo *pDeviceInfo, LPCWSTR lpcwstrDeviceId, WAVEFORMATEX **ppWaveFormatEx)
IID_IPolicyConfig	.\audio-internal.h	/^EXTERN_C const IID IID_IPolicyConfig;$/;"	v
IPolicyConfig	.\audio-internal.h	/^typedef interface IPolicyConfig IPolicyConfig;$/;"	t
InitializeAudioDevice	.\audio-device.cpp	/^AUDIO_DEVICE_API BOOL InitializeAudioDevice(DeviceInfo **ppDeviceInfo)$/;"	f	signature:(DeviceInfo **ppDeviceInfo)
InitializeAudioDevice	.\audio-device.h	/^AUDIO_DEVICE_API BOOL InitializeAudioDevice(DeviceInfo **ppDeviceInfo);$/;"	p	signature:(DeviceInfo **ppDeviceInfo)
InternalDeviceInfo	.\audio-internal.h	/^} InternalDeviceInfo;$/;"	t	typeref:struct:__anon1
PolicyConfig	.\audio-internal.h	/^typedef class PolicyConfig PolicyConfig;$/;"	t	typeref:class:PolicyConfig
PolicyConfig	.\audio-internal.h	/^typedef struct PolicyConfig PolicyConfig;$/;"	t	typeref:struct:PolicyConfig
SAFE_RELEASE	.\audio-internal.h	85;"	d
SetCaptureListDeviceChannelVolume	.\audio-device.cpp	/^AUDIO_DEVICE_API HRESULT SetCaptureListDeviceChannelVolume(DeviceInfo *pDeviceInfo, int index, float fVolume, UINT iChannel)$/;"	f	signature:(DeviceInfo *pDeviceInfo, int index, float fVolume, UINT iChannel)
SetCaptureListDeviceChannelVolume	.\audio-device.h	/^AUDIO_DEVICE_API HRESULT SetCaptureListDeviceChannelVolume(DeviceInfo *pDeviceInfo, int index, float fVolume, UINT iChannel);$/;"	p	signature:(DeviceInfo *pDeviceInfo, int index, float fVolume, UINT iChannel)
SetCaptureListDeviceVolume	.\audio-device.cpp	/^AUDIO_DEVICE_API HRESULT SetCaptureListDeviceVolume(DeviceInfo *pDeviceInfo, int index, float fVolume)$/;"	f	signature:(DeviceInfo *pDeviceInfo, int index, float fVolume)
SetCaptureListDeviceVolume	.\audio-device.h	/^AUDIO_DEVICE_API HRESULT SetCaptureListDeviceVolume(DeviceInfo *pDeviceInfo, int index, float fVolume);$/;"	p	signature:(DeviceInfo *pDeviceInfo, int index, float fVolume)
SetDefaultEndpoint	.\audio-device.cpp	/^AUDIO_DEVICE_API void SetDefaultEndpoint(DeviceInfo *pDeviceInfo, LPCWSTR lpcwstrDeviceId)$/;"	f	signature:(DeviceInfo *pDeviceInfo, LPCWSTR lpcwstrDeviceId)
SetDefaultEndpoint	.\audio-device.h	/^AUDIO_DEVICE_API void SetDefaultEndpoint(DeviceInfo *pDeviceInfo, LPCWSTR lpcwstrDeviceId);$/;"	p	signature:(DeviceInfo *pDeviceInfo, LPCWSTR lpcwstrDeviceId)
SetEndpointVisibility	.\audio-device.cpp	/^AUDIO_DEVICE_API void SetEndpointVisibility(DeviceInfo *pDeviceInfo, LPCWSTR lpcwstrDeviceId, BOOL bVisibility)$/;"	f	signature:(DeviceInfo *pDeviceInfo, LPCWSTR lpcwstrDeviceId, BOOL bVisibility)
SetEndpointVisibility	.\audio-device.h	/^AUDIO_DEVICE_API void SetEndpointVisibility(DeviceInfo *pDeviceInfo, LPCWSTR lpcwstrDeviceId, BOOL bVisibility);$/;"	p	signature:(DeviceInfo *pDeviceInfo, LPCWSTR lpcwstrDeviceId, BOOL bVisibility)
_GetCaptureDeviceList	.\audio-device.cpp	/^void _GetCaptureDeviceList(InternalDeviceInfo *pInternalDeviceInfo)$/;"	f	signature:(InternalDeviceInfo *pInternalDeviceInfo)
_GetDeviceName	.\audio-device.cpp	/^void _GetDeviceName(IMMDevice *pDevice, LPWSTR pszBuffer, int bufferLen, DWORD dwKeyName)$/;"	f	signature:(IMMDevice *pDevice, LPWSTR pszBuffer, int bufferLen, DWORD dwKeyName)
__IPolicyConfig_FWD_DEFINED__	.\audio-internal.h	11;"	d
__IPolicyConfig_INTERFACE_DEFINED__	.\audio-internal.h	28;"	d
__PolicyConfig_FWD_DEFINED__	.\audio-internal.h	17;"	d
__anon1::pCaptureCollection	.\audio-internal.h	/^    IMMDeviceCollection *pCaptureCollection;$/;"	m	struct:__anon1	access:public
__anon1::pEnumerator	.\audio-internal.h	/^    IMMDeviceEnumerator *pEnumerator;$/;"	m	struct:__anon1	access:public
__anon1::pPolicyConfig	.\audio-internal.h	/^    IPolicyConfig *pPolicyConfig;$/;"	m	struct:__anon1	access:public
g_EventContext	.\audio-internal.h	/^GUID g_EventContext =$/;"	v
main	.\test-audio-device.cpp	/^int main(int argc, char *argv[]) {$/;"	f	signature:(int argc, char *argv[])
pCaptureCollection	.\audio-internal.h	/^    IMMDeviceCollection *pCaptureCollection;$/;"	m	struct:__anon1	access:public
pEnumerator	.\audio-internal.h	/^    IMMDeviceEnumerator *pEnumerator;$/;"	m	struct:__anon1	access:public
pPolicyConfig	.\audio-internal.h	/^    IPolicyConfig *pPolicyConfig;$/;"	m	struct:__anon1	access:public
