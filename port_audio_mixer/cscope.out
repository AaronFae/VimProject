cscope 16 G:\testSound"               0000502835
	@pa_tests/debug_dual.c

38 
	~<°dio.h
>

39 
	~<m©h.h
>

40 
	~"p‹èudio.h
"

41 
	#DEV_ID_1
 (13)

	)

42 
	#DEV_ID_2
 (15)

	)

43 
	#NUM_SECONDS
 (8)

	)

44 
	#SLEEP_DUR
 (800)

	)

45 
	#SAMPLE_RATE
 (44100)

	)

46 
	#FRAMES_PER_BUFFER
 (256)

	)

48 
	#MIN_LATENCY_MSEC
 (200)

	)

49 
	#NUM_BUFFERS
 ((
MIN_LATENCY_MSEC
 * 
SAMPLE_RATE
Ë/ (
FRAMES_PER_BUFFER
 * 1000))

	)

51 
	#NUM_BUFFERS
 (0)

	)

53 
	#MIN_FREQ
 (100.0f)

	)

54 
	#MAX_FREQ
 (4000.0f)

	)

55 
	#FREQ_SCALAR
 (1.00002f)

	)

56 
	#CÆcPha£In¸emít
(
‰eq
Ë(‰eq/
SAMPLE_RATE
)

	)

57 #i‚de‡
M_PI


58 
	#M_PI
 (3.14159265)

	)

60 
	#TABLE_SIZE
 (400)

	)

63 
	msöe
[
TABLE_SIZE
 + 1];

64 
	mpha£_ö¸emít
;

65 
	mÀ·_pha£
;

66 
	mright_pha£
;

68 
	t∑Te°D©a
;

72 
LookupSöe
–
∑Te°D©a
 *
d©a
, 
pha£
 );

73 
	$LookupSöe
–
∑Te°D©a
 *
d©a
, 
pha£
 )

75 
fIndex
 = 
pha£
*
TABLE_SIZE
;

76 
ödex
 = (Ë
fIndex
;

77 
‰a˘
 = 
fIndex
 - 
ödex
;

78 
lo
 = 
d©a
->
söe
[
ödex
];

79 
hi
 = 
d©a
->
söe
[
ödex
+1];

80 
vÆ
 = 
lo
 + 
‰a˘
*(
hi
-lo);

81  
vÆ
;

82 
	}
}

87 
	$∑ã°CÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

88 
‰amesPîBuf„r
,

89 
PaTime°amp
 
outTime
, *
u£rD©a
 )

91 
∑Te°D©a
 *
d©a
 = (∑Te°D©a*)
u£rD©a
;

92 *
out
 = (*)
ouçutBuf„r
;

93 
i
;

94 
föished
 = 0;

95 (Ë
outTime
;

96 (Ë
öputBuf„r
;

99  
i
=0; i<
‰amesPîBuf„r
; i++ )

101 *
out
++ = 
	`LookupSöe
(
d©a
, d©a->
À·_pha£
);

102 *
out
++ = 
	`LookupSöe
(
d©a
, d©a->
right_pha£
);

103 
d©a
->
À·_pha£
 +d©a->
pha£_ö¸emít
;

104 if–
d©a
->
À·_pha£
 >= 1.0f ) data->left_phase -= 1.0f;

105 
d©a
->
right_pha£
 +(d©a->
pha£_ö¸emít
 * 1.5f);

106 if–
d©a
->
right_pha£
 >= 1.0f ) data->right_phase -= 1.0f;

108 
d©a
->
pha£_ö¸emít
 *
FREQ_SCALAR
;

109 if–
d©a
->
pha£_ö¸emít
 > 
	`CÆcPha£In¸emít
(
MAX_FREQ
ËËd©a->pha£_ö¸emíàCÆcPha£In¸emít(
MIN_FREQ
);

112 
	}
}

114 
PaEº‹
 
Te°Sèπ
–
P‹tAudioSåóm
 **
°ªamPå
, 
PaDevi˚ID
 
devID
,

115 
∑Te°D©a
 *
d©a
 );

117 
maö
();

118 
	$maö
()

120 
P‹tAudioSåóm
 *
°ªam1
, *
°ªam2
;

121 
PaEº‹
 
îr
;

122 
∑Te°D©a
 
DATA1
, 
DATA2
;

123 
	`¥ötf
("P‹tAudiÿTe°: DUAL söêswìp.ásk f‹ %d buf„rs\n", 
NUM_BUFFERS
 );

124 
îr
 = 
	`Pa_Inôülize
();

125 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

126 
îr
 = 
	`Te°Sèπ
–&
°ªam1
, 
DEV_ID_1
, &
DATA1
 );

127 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

128 
îr
 = 
	`Te°Sèπ
–&
°ªam2
, 
DEV_ID_2
, &
DATA2
 );

129 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

130 
	`¥ötf
("Hit ENTER\n");

131 
	`gëch¨
();

132 
îr
 = 
	`Pa_St›Såóm
–
°ªam1
 );

133 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

134 
îr
 = 
	`Pa_St›Såóm
–
°ªam2
 );

135 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

136 
	`Pa_Tîmö©e
();

137 
	`¥ötf
("Test finished.\n");

138  
îr
;

139 
îr‹
:

140 
	`Pa_Tîmö©e
();

141 
	`Ârötf
–
°dîr
, "AnÉrror occured while usingÅheÖortaudio stream\n" );

142 
	`Ârötf
–
°dîr
, "Eº‹Çumbî: %d\n", 
îr
 );

143 
	`Ârötf
–
°dîr
, "Eº‹ mesßge: %s\n", 
	`Pa_GëEº‹Text
–
îr
 ) );

144  
îr
;

145 
	}
}

146 
PaEº‹
 
	$Te°Sèπ
–
P‹tAudioSåóm
 **
°ªamPå
, 
PaDevi˚ID
 
devID
, 
∑Te°D©a
 *
d©a
 )

148 
P‹tAudioSåóm
 *
°ªam
;

149 
PaEº‹
 
îr
;

150 
i
;

152  
i
=0; i<
TABLE_SIZE
; i++ )

154 
d©a
->
söe
[
i
] = (Ë
	`sö
–(()i/()
TABLE_SIZE
Ë* 
M_PI
 * 2. );

156 
d©a
->
söe
[
TABLE_SIZE
] = data->sine[0];

157 
d©a
->
À·_pha£
 = d©a->
right_pha£
 = 0.0;

158 
d©a
->
pha£_ö¸emít
 = 
	`CÆcPha£In¸emít
(
MIN_FREQ
);

159 
	`¥ötf
("P‹tAudiÿTe°: ouçuàdevi˚ = %d\n", 
devID
 );

160 
îr
 = 
	`Pa_O≥nSåóm
(

161 &
°ªam
,

162 
∑NoDevi˚
,

164 
∑Flﬂt32
,

165 
NULL
,

166 
devID
,

168 
∑Flﬂt32
,

169 
NULL
,

170 
SAMPLE_RATE
,

171 
FRAMES_PER_BUFFER
,

172 
NUM_BUFFERS
,

173 
∑ClùOff
|
∑DôhîOff
,

174 
∑ã°CÆlback
,

175 
d©a
 );

176 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

177 
îr
 = 
	`Pa_SèπSåóm
–
°ªam
 );

178 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

179 *
°ªamPå
 = 
°ªam
;

181 
îr‹
:

182  
îr
;

183 
	}
}

	@pa_tests/debug_multi_in.c

38 
	~<°dio.h
>

39 
	~<m©h.h
>

40 
	~<°rög.h
>

41 
	~"p‹èudio.h
"

43 
	#OUTPUT_DEVICE
 (
	`Pa_GëDeÁu…OuçutDevi˚ID
())

	)

45 
	#SAMPLE_RATE
 (22050)

	)

46 
	#FRAMES_PER_BUFFER
 (256)

	)

47 
	#MIN_LATENCY_MSEC
 (400)

	)

48 
	#NUM_BUFFERS
 ((
MIN_LATENCY_MSEC
 * 
SAMPLE_RATE
Ë/ (
FRAMES_PER_BUFFER
 * 1000))

	)

49 #i‚de‡
M_PI


50 
	#M_PI
 (3.14159265)

	)

54 
	mliveCh™√l
;

55 
	mnumCh™√ls
;

57 
	t∑Te°D©a
;

62 
	$∑ã°CÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

63 
‰amesPîBuf„r
,

64 
PaTime°amp
 
outTime
, *
u£rD©a
 )

66 
∑Te°D©a
 *
d©a
 = (∑Te°D©a*)
u£rD©a
;

67 *
out
 = (*)
ouçutBuf„r
;

68 *
ö
 = (*)
öputBuf„r
;

69 
i
;

70 
föished
 = 0;

71 (Ë
outTime
;

72 (Ë
öputBuf„r
;

74 if–
ö
 =
NULL
 )  0;

75  
i
=0; i<()
‰amesPîBuf„r
; i++ )

78 *
out
++ = 
ö
[
d©a
->
liveCh™√l
];

79 *
out
++ = 
ö
[
d©a
->
liveCh™√l
];

80 
ö
 +
d©a
->
numCh™√ls
;

83 
	}
}

85 
	$PaFödDevi˚ByName
–c⁄° *
«me
 )

87 
i
;

88 
numDevi˚s
;

89 c⁄° 
PaDevi˚Info
 *
pdi
;

90 
Àn
 = 
	`°æí
–
«me
 );

91 
PaDevi˚ID
 
ªsu…
 = 
∑NoDevi˚
;

92 
numDevi˚s
 = 
	`Pa_Cou¡Devi˚s
();

93  
i
=0; i<
numDevi˚s
; i++ )

95 
pdi
 = 
	`Pa_GëDevi˚Info
–
i
 );

96 if–
	`°∫cmp
–
«me
, 
pdi
->«me, 
Àn
 ) == 0 )

98 
ªsu…
 = 
i
;

102  
ªsu…
;

103 
	}
}

105 
maö
();

106 
	$maö
()

108 
P‹tAudioSåóm
 *
°ªam
;

109 
PaEº‹
 
îr
;

110 
∑Te°D©a
 
d©a
;

111 
i
;

112 
PaDevi˚ID
 
öputDevi˚
;

113 c⁄° 
PaDevi˚Info
 *
pdi
;

114 
	`¥ötf
("P‹tAudiÿTe°: i≈uàsig«»‰omÉach ch™√l. %d buf„rs\n", 
NUM_BUFFERS
 );

115 
d©a
.
liveCh™√l
 = 0;

116 
îr
 = 
	`Pa_Inôülize
();

117 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

118 #ifde‡
INPUT_DEVICE_NAME


119 
	`¥ötf
("TryÅÿu£ devi˚: %s\n", 
INPUT_DEVICE_NAME
 );

120 
öputDevi˚
 = 
	`PaFödDevi˚ByName
(
INPUT_DEVICE_NAME
);

121 if–
öputDevi˚
 =
∑NoDevi˚
 )

123 
	`¥ötf
("CouldÇŸ föd %s. Usög deÁu… in°ód.\n", 
INPUT_DEVICE_NAME
 );

124 
öputDevi˚
 = 
	`Pa_GëDeÁu…I≈utDevi˚ID
();

127 
	`¥ötf
("Using default input device.\n");

128 
öputDevi˚
 = 
	`Pa_GëDeÁu…I≈utDevi˚ID
();

130 
pdi
 = 
	`Pa_GëDevi˚Info
–
öputDevi˚
 );

131 if–
pdi
 =
NULL
 )

133 
	`¥ötf
("CouldÇot get device info!\n");

134 
îr‹
;

136 
d©a
.
numCh™√ls
 = 
pdi
->
maxI≈utCh™√ls
;

137 
	`¥ötf
("I≈uàDevi˚Çamêi†%s\n", 
pdi
->
«me
 );

138 
	`¥ötf
("I≈uàDevi˚ ha†%d ch™√ls.\n", 
pdi
->
maxI≈utCh™√ls
);

139 
îr
 = 
	`Pa_O≥nSåóm
(

140 &
°ªam
,

141 
öputDevi˚
,

142 
pdi
->
maxI≈utCh™√ls
,

143 
∑Flﬂt32
,

144 
NULL
,

145 
OUTPUT_DEVICE
,

147 
∑Flﬂt32
,

148 
NULL
,

149 
SAMPLE_RATE
,

150 
FRAMES_PER_BUFFER
,

151 
NUM_BUFFERS
,

152 
∑ClùOff
,

153 
∑ã°CÆlback
,

154 &
d©a
 );

155 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

156 
d©a
.
liveCh™√l
 = 0;

157 
îr
 = 
	`Pa_SèπSåóm
–
°ªam
 );

158 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

159  
i
=0; i<
d©a
.
numCh™√ls
; i++ )

161 
d©a
.
liveCh™√l
 = 
i
;

162 
	`¥ötf
("Ch™√»%d beög síàtÿouçut. Hô ENTER f‹Çexàch™√l.", 
i
 );

163 
	`fÊush
(
°dout
);

164 
	`gëch¨
();

166 
îr
 = 
	`Pa_St›Såóm
–
°ªam
 );

167 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

169 
îr
 = 
	`Pa_Clo£Såóm
–
°ªam
 );

170 
	`Pa_Tîmö©e
();

171 
	`¥ötf
("Test finished.\n");

172  
îr
;

173 
îr‹
:

174 
	`Pa_Tîmö©e
();

175 
	`Ârötf
–
°dîr
, "AnÉrror occured while usingÅheÖortaudio stream\n" );

176 
	`Ârötf
–
°dîr
, "Eº‹Çumbî: %d\n", 
îr
 );

177 
	`Ârötf
–
°dîr
, "Eº‹ mesßge: %s\n", 
	`Pa_GëEº‹Text
–
îr
 ) );

178  
îr
;

179 
	}
}

	@pa_tests/debug_multi_out.c

37 
	~<°dio.h
>

38 
	~<m©h.h
>

39 
	~"p‹èudio.h
"

41 
	#OUTPUT_DEVICE
 (
	`Pa_GëDeÁu…OuçutDevi˚ID
())

	)

42 
	#SAMPLE_RATE
 (44100)

	)

43 
	#FRAMES_PER_BUFFER
 (256)

	)

44 
	#FREQ_INCR
 (300.0 / 
SAMPLE_RATE
)

	)

45 
	#MAX_CHANNELS
 (64)

	)

47 #i‚de‡
M_PI


48 
	#M_PI
 (3.14159265)

	)

53 
	mnumCh™√ls
;

54 
	mpha£s
[
MAX_CHANNELS
];

56 
	t∑Te°D©a
;

62 
	$∑ã°CÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

63 
‰amesPîBuf„r
,

64 
PaTime°amp
 
outTime
, *
u£rD©a
 )

66 
∑Te°D©a
 *
d©a
 = (∑Te°D©a*)
u£rD©a
;

67 *
out
 = (*)
ouçutBuf„r
;

68 
‰ameIndex
, 
ch™√lIndex
;

69 
föished
 = 0;

70 (Ë
outTime
;

71 (Ë
öputBuf„r
;

73  
‰ameIndex
=0; fømeIndex<()
‰amesPîBuf„r
; frameIndex++ )

75  
ch™√lIndex
=0; ch™√lIndex<
d©a
->
numCh™√ls
; channelIndex++ )

78 *
out
++ = (Ë
	`sö
(
d©a
->
pha£s
[
ch™√lIndex
]);

81 
d©a
->
pha£s
[
ch™√lIndex
] +
FREQ_INCR
 * (4 + channelIndex);

82 if–
d©a
->
pha£s
[
ch™√lIndex
] >(2.0 * 
M_PI
) ) data->phases[channelIndex] -= (2.0 * M_PI);

87 
	}
}

89 
maö
();

90 
	$maö
()

92 
P‹tAudioSåóm
 *
°ªam
;

93 
PaEº‹
 
îr
;

94 c⁄° 
PaDevi˚Info
 *
pdi
;

95 
∑Te°D©a
 
d©a
 = {0};

96 
	`¥ötf
("PortAudio Test: output sine wave onÉach channel.\n" );

98 
îr
 = 
	`Pa_Inôülize
();

99 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

101 
pdi
 = 
	`Pa_GëDevi˚Info
–
OUTPUT_DEVICE
 );

102 
d©a
.
numCh™√ls
 = 
pdi
->
maxOuçutCh™√ls
;

103 if–
d©a
.
numCh™√ls
 > 
MAX_CHANNELS
 ) data.numChannels = MAX_CHANNELS;

104 
	`¥ötf
("Numbî o‡Ch™√l†%d\n", 
d©a
.
numCh™√ls
 );

106 
îr
 = 
	`Pa_O≥nSåóm
(

107 &
°ªam
,

108 
∑NoDevi˚
,

110 
∑Flﬂt32
,

111 
NULL
,

112 
OUTPUT_DEVICE
,

113 
d©a
.
numCh™√ls
,

114 
∑Flﬂt32
,

115 
NULL
,

116 
SAMPLE_RATE
,

117 
FRAMES_PER_BUFFER
,

119 
∑ClùOff
,

120 
∑ã°CÆlback
,

121 &
d©a
 );

122 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

124 
îr
 = 
	`Pa_SèπSåóm
–
°ªam
 );

125 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

127 
	`¥ötf
("Hit ENTERÅo stop sound.\n");

128 
	`fÊush
(
°dout
);

129 
	`gëch¨
();

131 
îr
 = 
	`Pa_St›Såóm
–
°ªam
 );

132 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

134 
	`Pa_Clo£Såóm
–
°ªam
 );

135 
	`Pa_Tîmö©e
();

136 
	`¥ötf
("Test finished.\n");

137  
îr
;

138 
îr‹
:

139 
	`Pa_Tîmö©e
();

140 
	`Ârötf
–
°dîr
, "AnÉrror occured while usingÅheÖortaudio stream\n" );

141 
	`Ârötf
–
°dîr
, "Eº‹Çumbî: %d\n", 
îr
 );

142 
	`Ârötf
–
°dîr
, "Eº‹ mesßge: %s\n", 
	`Pa_GëEº‹Text
–
îr
 ) );

143  
îr
;

144 
	}
}

	@pa_tests/debug_record.c

38 
	~<°dio.h
>

39 
	~<°dlib.h
>

40 
	~"p‹èudio.h
"

42 
	#SAMPLE_RATE
 (22050)

	)

43 
	#NUM_SECONDS
 (6)

	)

44 
	#NUM_CHANNELS
 (2)

	)

45 
	#FRAMES_PER_BUFFER
 (64)

	)

47 
	#DITHER_FLAG
 (0)

	)

51 
	#PA_SAMPLE_TYPE
 
∑Flﬂt32


	)

52 
	tSAMPLE
;

53 
	#SAMPLE_SILENCE
 (0.0f)

	)

56 
	#PA_SAMPLE_TYPE
 
∑I¡32


	)

57 
	tSAMPLE
;

58 
	#SAMPLE_SILENCE
 (0)

	)

61 
	#PA_SAMPLE_TYPE
 
∑I¡16


	)

62 
	tSAMPLE
;

63 
	#SAMPLE_SILENCE
 (0)

	)

66 
	#PA_SAMPLE_TYPE
 
∑I¡8


	)

67 
	tSAMPLE
;

68 
	#SAMPLE_SILENCE
 (0)

	)

71 
	#PA_SAMPLE_TYPE
 
∑UI¡8


	)

72 
	tSAMPLE
;

73 
	#SAMPLE_SILENCE
 (128)

	)

79 
	m‰ameIndex
;

80 
	mmaxFømeIndex
;

81 
SAMPLE
 *
	mªc‹dedSam∂es
;

83 
	t∑Te°D©a
;

88 
	$ªc‹dCÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

89 
‰amesPîBuf„r
,

90 
PaTime°amp
 
outTime
, *
u£rD©a
 )

92 
∑Te°D©a
 *
d©a
 = (∑Te°D©a*)
u£rD©a
;

93 
SAMPLE
 *
Ωå
 = (SAMPLE*)
öputBuf„r
;

94 
SAMPLE
 *
w±r
 = &
d©a
->
ªc‹dedSam∂es
[d©a->
‰ameIndex
 * 
NUM_CHANNELS
];

95 
‰amesToCÆc
;

96 
i
;

97 
föished
;

98 
‰amesLe·
 = 
d©a
->
maxFømeIndex
 - d©a->
‰ameIndex
;

100 (Ë
ouçutBuf„r
;

101 (Ë
outTime
;

103 if–
‰amesLe·
 < 
‰amesPîBuf„r
 )

105 
‰amesToCÆc
 = 
‰amesLe·
;

106 
föished
 = 1;

110 
‰amesToCÆc
 = 
‰amesPîBuf„r
;

111 
föished
 = 0;

113 if–
öputBuf„r
 =
NULL
 )

115  
i
=0; i<
‰amesToCÆc
; i++ )

117 *
w±r
++ = 
SAMPLE_SILENCE
;

118 if–
NUM_CHANNELS
 =2 ) *
w±r
++ = 
SAMPLE_SILENCE
;

123  
i
=0; i<
‰amesToCÆc
; i++ )

125 *
w±r
++ = *
Ωå
++;

126 if–
NUM_CHANNELS
 =2 ) *
w±r
++ = *
Ωå
++;

129 
d©a
->
‰ameIndex
 +
‰amesToCÆc
;

130  
föished
;

131 
	}
}

137 
	$∂ayCÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

138 
‰amesPîBuf„r
,

139 
PaTime°amp
 
outTime
, *
u£rD©a
 )

141 
∑Te°D©a
 *
d©a
 = (∑Te°D©a*)
u£rD©a
;

142 
SAMPLE
 *
Ωå
 = &
d©a
->
ªc‹dedSam∂es
[d©a->
‰ameIndex
 * 
NUM_CHANNELS
];

143 
SAMPLE
 *
w±r
 = (SAMPLE*)
ouçutBuf„r
;

144 
i
;

145 
föished
;

146 
‰amesLe·
 = 
d©a
->
maxFømeIndex
 - d©a->
‰ameIndex
;

147 (Ë
öputBuf„r
;

148 (Ë
outTime
;

150 if–
‰amesLe·
 < 
‰amesPîBuf„r
 )

153  
i
=0; i<
‰amesLe·
; i++ )

155 *
w±r
++ = *
Ωå
++;

156 if–
NUM_CHANNELS
 =2 ) *
w±r
++ = *
Ωå
++;

158  ; 
i
<
‰amesPîBuf„r
; i++ )

160 *
w±r
++ = 0;

161 if–
NUM_CHANNELS
 =2 ) *
w±r
++ = 0;

163 
d©a
->
‰ameIndex
 +
‰amesLe·
;

164 
föished
 = 1;

168  
i
=0; i<
‰amesPîBuf„r
; i++ )

170 *
w±r
++ = *
Ωå
++;

171 if–
NUM_CHANNELS
 =2 ) *
w±r
++ = *
Ωå
++;

173 
d©a
->
‰ameIndex
 +
‰amesPîBuf„r
;

174 
föished
 = 0;

176  
föished
;

177 
	}
}

180 
maö
();

181 
	$maö
()

183 
P‹tAudioSåóm
 *
°ªam
;

184 
PaEº‹
 
îr
;

185 
∑Te°D©a
 
d©a
;

186 
i
;

187 
tŸÆFømes
;

188 
numSam∂es
;

189 
numByãs
;

190 
SAMPLE
 
max
, 
avîage
, 
vÆ
;

192 
	`¥ötf
("debug_record.c, sampleRate = %d,ÇumChannels = %d\n",

193 
SAMPLE_RATE
, 
NUM_CHANNELS
 );

194 
	`fÊush
(
°dout
);

196 
d©a
.
maxFømeIndex
 = 
tŸÆFømes
 = 
NUM_SECONDS
 * 
SAMPLE_RATE
;

197 
d©a
.
‰ameIndex
 = 0;

198 
numSam∂es
 = 
tŸÆFømes
 * 
NUM_CHANNELS
;

200 
numByãs
 = 
numSam∂es
 * (
SAMPLE
);

201 
d©a
.
ªc‹dedSam∂es
 = (
SAMPLE
 *Ë
	`mÆloc
–
numByãs
 );

202 if–
d©a
.
ªc‹dedSam∂es
 =
NULL
 )

204 
	`¥ötf
("CouldÇotállocateÑecordárray.\n");

205 
	`exô
(1);

207  
i
=0; i<
numSam∂es
; i++ ) 
d©a
.
ªc‹dedSam∂es
[i] = 0;

209 
îr
 = 
	`Pa_Inôülize
();

210 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

213 
îr
 = 
	`Pa_O≥nSåóm
(

214 &
°ªam
,

215 
	`Pa_GëDeÁu…I≈utDevi˚ID
(),

216 
NUM_CHANNELS
,

217 
PA_SAMPLE_TYPE
,

218 
NULL
,

219 
∑NoDevi˚
,

221 
PA_SAMPLE_TYPE
,

222 
NULL
,

223 
SAMPLE_RATE
,

224 
FRAMES_PER_BUFFER
,

227 
ªc‹dCÆlback
,

228 &
d©a
 );

229 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

231 
îr
 = 
	`Pa_SèπSåóm
–
°ªam
 );

232 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

233 
	`¥ötf
("SèπÑec‹dög!!\n"); 
	`fÊush
(
°dout
);

235  
	`Pa_SåómA˘ive
–
°ªam
 ) )

237 
	`Pa_SÀï
(1000);

238 
	`¥ötf
("ödex = %d\n", 
d©a
.
‰ameIndex
 ); 
	`fÊush
(
°dout
);

240 
	`¥ötf
("St›Ñec‹dög!!\n"); 
	`fÊush
(
°dout
);

241 
îr
 = 
	`Pa_Clo£Såóm
–
°ªam
 );

242 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

245 
max
 = 0;

246 
avîage
 = 0;

247  
i
=0; i<
numSam∂es
; i++ )

249 
vÆ
 = 
d©a
.
ªc‹dedSam∂es
[
i
];

250 if–
vÆ
 < 0 ) val = -val;

251 if–
vÆ
 > 
max
 )

253 
max
 = 
vÆ
;

255 
avîage
 +
vÆ
;

258 
avîage
 =ávîagê/ 
numSam∂es
;

260 if–
PA_SAMPLE_TYPE
 =
∑Flﬂt32
 )

262 
	`¥ötf
("ßm∂êmaxám∂ôudê%f\n", (Ë
max
 );

263 
	`¥ötf
("ßm∂êavîagê%f\n", (Ë
avîage
 );

267 
	`¥ötf
("ßm∂êmaxám∂ôudê%d\n", (Ë
max
 );

268 
	`¥ötf
("ßm∂êavîagê%d\n", (Ë
avîage
 );

274 
FILE
 *
fid
;

275 
fid
 = 
	`f›í
("recorded.raw", "wb");

276 if–
fid
 =
NULL
 )

278 
	`¥ötf
("CouldÇot open file.");

282 
	`fwrôe
–
d©a
.
ªc‹dedSam∂es
, 
NUM_CHANNELS
 * (
SAMPLE
), 
tŸÆFømes
, 
fid
 );

283 
	`f˛o£
–
fid
 );

284 
	`¥ötf
("Wrote dataÅo 'recorded.raw'\n");

290 
d©a
.
‰ameIndex
 = 0;

291 
	`¥ötf
("BegöÖœyback.\n"); 
	`fÊush
(
°dout
);

292 
îr
 = 
	`Pa_O≥nSåóm
(

293 &
°ªam
,

294 
∑NoDevi˚
,

296 
PA_SAMPLE_TYPE
,

297 
NULL
,

298 
	`Pa_GëDeÁu…OuçutDevi˚ID
(),

299 
NUM_CHANNELS
,

300 
PA_SAMPLE_TYPE
,

301 
NULL
,

302 
SAMPLE_RATE
,

303 
FRAMES_PER_BUFFER
,

305 
∑ClùOff
,

306 
∂ayCÆlback
,

307 &
d©a
 );

308 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

310 if–
°ªam
 )

312 
îr
 = 
	`Pa_SèπSåóm
–
°ªam
 );

313 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

314 
	`¥ötf
("SèπÖœyback!!\n"); 
	`fÊush
(
°dout
);

316  
	`Pa_SåómA˘ive
–
°ªam
 ) )

318 
	`Pa_SÀï
(1000);

319 
	`¥ötf
("ödex = %d\n", 
d©a
.
‰ameIndex
 ); 
	`fÊush
(
°dout
);

322 
	`¥ötf
("St›Öœyback!!\n"); 
	`fÊush
(
°dout
);

323 
îr
 = 
	`Pa_Clo£Såóm
–
°ªam
 );

324 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

325 
	`¥ötf
("D⁄e.\n"); 
	`fÊush
(
°dout
);

327 
	`‰ì
–
d©a
.
ªc‹dedSam∂es
 );

329 
	`Pa_Tîmö©e
();

332 
îr‹
:

333 
	`Pa_Tîmö©e
();

334 
	`Ârötf
–
°dîr
, "AnÉrror occured while usingÅheÖortaudio stream\n" );

335 
	`Ârötf
–
°dîr
, "Eº‹Çumbî: %d\n", 
îr
 );

336 
	`Ârötf
–
°dîr
, "Eº‹ mesßge: %s\n", 
	`Pa_GëEº‹Text
–
îr
 ) );

338 
	}
}

	@pa_tests/debug_sine.c

37 
	~<°dio.h
>

38 
	~<m©h.h
>

39 
	~"p‹èudio.h
"

40 
	#OUTPUT_DEVICE
 (
	`Pa_GëDeÁu…OuçutDevi˚ID
())

	)

42 
	#NUM_SECONDS
 (8)

	)

43 
	#SLEEP_DUR
 (800)

	)

44 
	#SAMPLE_RATE
 (44100)

	)

45 
	#FRAMES_PER_BUFFER
 (4096)

	)

47 
	#MSEC_PER_BUFFER
 (1000 * 
FRAMES_PER_BUFFER
 / 
SAMPLE_RATE
)

	)

50 
	#MIN_LATENCY_MSEC
 (200)

	)

51 
	#NUM_BUFFERS
 ((
MIN_LATENCY_MSEC
 * 
SAMPLE_RATE
Ë/ (
FRAMES_PER_BUFFER
 * 1000))

	)

53 
	#NUM_BUFFERS
 (0)

	)

56 
	#MIN_FREQ
 (100.0f)

	)

57 
	#MAX_FREQ
 (4000.0f)

	)

58 
	#FREQ_SCALAR
 (1.00002f)

	)

59 
	#CÆcPha£In¸emít
(
‰eq
Ë(‰eq/
SAMPLE_RATE
)

	)

60 #i‚de‡
M_PI


61 
	#M_PI
 (3.14159265)

	)

63 
	#TABLE_SIZE
 (400)

	)

66 
	msöe
[
TABLE_SIZE
 + 1];

67 
	mpha£_ö¸emít
;

68 
	mÀ·_pha£
;

69 
	mright_pha£
;

70 
	m‰amesToGo
;

72 
	t∑Te°D©a
;

76 
LookupSöe
–
∑Te°D©a
 *
d©a
, 
pha£
 );

77 
	$LookupSöe
–
∑Te°D©a
 *
d©a
, 
pha£
 )

79 
fIndex
 = 
pha£
*
TABLE_SIZE
;

80 
ödex
 = (Ë
fIndex
;

81 
‰a˘
 = 
fIndex
 - 
ödex
;

82 
lo
 = 
d©a
->
söe
[
ödex
];

83 
hi
 = 
d©a
->
söe
[
ödex
+1];

84 
vÆ
 = 
lo
 + 
‰a˘
*(
hi
-lo);

85  
vÆ
;

86 
	}
}

91 
	$∑ã°CÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

92 
‰amesPîBuf„r
,

93 
PaTime°amp
 
outTime
, *
u£rD©a
 )

95 
∑Te°D©a
 *
d©a
 = (∑Te°D©a*)
u£rD©a
;

96 *
out
 = (*)
ouçutBuf„r
;

97 
‰amesToCÆc
;

98 
i
;

99 
föished
 = 0;

100 (Ë
outTime
;

101 (Ë
öputBuf„r
;

103 if–
d©a
->
‰amesToGo
 < 
‰amesPîBuf„r
 )

105 
‰amesToCÆc
 = 
d©a
->
‰amesToGo
;

106 
d©a
->
‰amesToGo
 = 0;

107 
föished
 = 1;

111 
‰amesToCÆc
 = 
‰amesPîBuf„r
;

112 
d©a
->
‰amesToGo
 -
‰amesPîBuf„r
;

115  
i
=0; i<
‰amesToCÆc
; i++ )

117 *
out
++ = 
	`LookupSöe
(
d©a
, d©a->
À·_pha£
);

118 *
out
++ = 
	`LookupSöe
(
d©a
, d©a->
right_pha£
);

119 
d©a
->
À·_pha£
 +d©a->
pha£_ö¸emít
;

120 if–
d©a
->
À·_pha£
 >= 1.0f ) data->left_phase -= 1.0f;

121 
d©a
->
right_pha£
 +(d©a->
pha£_ö¸emít
 * 1.5f);

122 if–
d©a
->
right_pha£
 >= 1.0f ) data->right_phase -= 1.0f;

124 
d©a
->
pha£_ö¸emít
 *
FREQ_SCALAR
;

125 if–
d©a
->
pha£_ö¸emít
 > 
	`CÆcPha£In¸emít
(
MAX_FREQ
ËËd©a->pha£_ö¸emíàCÆcPha£In¸emít(
MIN_FREQ
);

128  ; 
i
<()
‰amesPîBuf„r
; i++ )

130 *
out
++ = 0;

131 *
out
++ = 0;

136  
föished
;

137 
	}
}

139 
maö
();

140 
	$maö
()

142 
P‹tAudioSåóm
 *
°ªam
;

143 
PaEº‹
 
îr
;

144 
∑Te°D©a
 
d©a
;

145 
i
;

146 
tŸÆSamps
;

147 
	`¥ötf
("P‹tAudiÿTe°: ouçuàsöêswìp.ásk f‹ %d buf„rs\n", 
NUM_BUFFERS
 );

148 
	`¥ötf
("MSEC_PER_BUFFER = %d\n", 
MSEC_PER_BUFFER
 );

151  
i
=0; i<
TABLE_SIZE
; i++ )

153 
d©a
.
söe
[
i
] = (Ë
	`sö
–(()i/()
TABLE_SIZE
Ë* 
M_PI
 * 2. );

155 
d©a
.
söe
[
TABLE_SIZE
] = data.sine[0];

156 
d©a
.
À·_pha£
 = d©a.
right_pha£
 = 0.0;

157 
d©a
.
pha£_ö¸emít
 = 
	`CÆcPha£In¸emít
(
MIN_FREQ
);

158 
d©a
.
‰amesToGo
 = 
tŸÆSamps
 = 
NUM_SECONDS
 * 
SAMPLE_RATE
;

159 
	`¥ötf
("tŸÆSamp†%d\n", 
tŸÆSamps
 );

160 
îr
 = 
	`Pa_Inôülize
();

161 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

162 
	`¥ötf
("P‹tAudiÿTe°: ouçuàdevi˚ = %d\n", 
OUTPUT_DEVICE
 );

163 
îr
 = 
	`Pa_O≥nSåóm
(

164 &
°ªam
,

165 
∑NoDevi˚
,

167 
∑Flﬂt32
,

168 
NULL
,

169 
OUTPUT_DEVICE
,

171 
∑Flﬂt32
,

172 
NULL
,

173 
SAMPLE_RATE
,

174 
FRAMES_PER_BUFFER
,

175 
NUM_BUFFERS
,

176 
∑ClùOff
|
∑DôhîOff
,

177 
∑ã°CÆlback
,

178 &
d©a
 );

179 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

180 
îr
 = 
	`Pa_SèπSåóm
–
°ªam
 );

181 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

182 
	`¥ötf
("Is callback being called?\n");

183  
i
=0; i<((
NUM_SECONDS
+1)*1000); i+=
SLEEP_DUR
 )

185 
	`¥ötf
("d©a.‰amesToGÿ%d\n", 
d©a
.
‰amesToGo
 ); 
	`fÊush
(
°dout
);

186 
	`Pa_SÀï
–
SLEEP_DUR
 );

189 
	`¥ötf
("Call Pa_StopStream()\n");

190 
îr
 = 
	`Pa_St›Såóm
–
°ªam
 );

191 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

192 
	`Pa_Tîmö©e
();

193 
	`¥ötf
("Test finished.\n");

194  
îr
;

195 
îr‹
:

196 
	`Pa_Tîmö©e
();

197 
	`Ârötf
–
°dîr
, "AnÉrror occured while usingÅheÖortaudio stream\n" );

198 
	`Ârötf
–
°dîr
, "Eº‹Çumbî: %d\n", 
îr
 );

199 
	`Ârötf
–
°dîr
, "Eº‹ mesßge: %s\n", 
	`Pa_GëEº‹Text
–
îr
 ) );

200  
îr
;

201 
	}
}

	@pa_tests/debug_test1.c

10 
	~<°dio.h
>

11 
	~<m©h.h
>

12 
	~"p‹èudio.h
"

13 #i‚de‡
M_PI


14 
	#M_PI
 (3.14159265)

	)

18 
	msöe
[100];

19 
	mpha£
;

20 
	mßmpsToGo
;

22 
	t∑ã°1d©a
;

23 
	$∑ã°1CÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

24 
buf„rFømes
,

25 
PaTime°amp
 
outTime
, *
u£rD©a
 )

27 
∑ã°1d©a
 *
d©a
 = (∑ã°1d©a*)
u£rD©a
;

28 *
ö
 = (*)
öputBuf„r
;

29 *
out
 = (*)
ouçutBuf„r
;

30 
‰amesToCÆc
 = 
buf„rFømes
;

31 
i
;

32 
föished
 = 0;

33 if(
öputBuf„r
 =
NULL
)  0;

34 if–
d©a
->
ßmpsToGo
 < 
buf„rFømes
 )

36 
föished
 = 1;

38  
i
=0; i<
buf„rFømes
; i++ )

40 *
out
++ = *
ö
++;

41 *
out
++ = *
ö
++;

42 if–
d©a
->
pha£
 >= 100 )

43 
d©a
->
pha£
 = 0;

45 
d©a
->
ßmpsToGo
 -
buf„rFømes
;

47  ; 
i
<
buf„rFømes
; i++ )

49 *
out
++ = 0;

50 *
out
++ = 0;

52  
föished
;

53 
	}
}

54 
maö
(
¨gc
, * 
¨gv
[]);

55 
	$maö
(
¨gc
, * 
¨gv
[])

57 
PaSåóm
 *
°ªam
;

58 
PaEº‹
 
îr
;

59 
∑ã°1d©a
 
d©a
;

60 
i
;

61 
öputDevi˚
 = 
	`Pa_GëDeÁu…I≈utDevi˚ID
();

62 
ouçutDevi˚
 = 
	`Pa_GëDeÁu…OuçutDevi˚ID
();

64  
i
=0; i<100; i++ )

65 
d©a
.
söe
[
i
] = 
	`sö
–(()i/100.Ë* 
M_PI
 * 2. );

66 
d©a
.
pha£
 = 0;

67 
d©a
.
ßmpsToGo
 = 44100 * 4;

69 
	`Pa_Inôülize
();

70 
îr
 = 
	`Pa_O≥nSåóm
(

71 &
°ªam
,

72 
öputDevi˚
,

74 
∑Flﬂt32
,

75 
NULL
,

76 
ouçutDevi˚
,

78 
∑Flﬂt32
,

79 
NULL
,

85 
∑ClùOff
,

86 
∑ã°1CÆlback
,

87 &
d©a
 );

88 if–
îr
 =
∑NoEº‹
 )

90 
îr
 = 
	`Pa_SèπSåóm
–
°ªam
 );

95 
	`¥ötf
( "Waiting for streamÅo complete...\n" );

97  
	`Pa_SåómA˘ive
–
°ªam
 ) )

98 
	`Pa_SÀï
(1000);

100 
îr
 = 
	`Pa_Clo£Såóm
–
°ªam
 );

104 
	`Ârötf
–
°dîr
, "AnÉrror occured while openingÅheÖortaudio stream\n" );

105 if–
îr
 =
∑Ho°Eº‹
 )

106 
	`Ârötf
–
°dîr
, "Ho°Éº‹Çumbî: %d\n", 
	`Pa_GëHo°Eº‹
() );

108 
	`Ârötf
–
°dîr
, "Eº‹Çumbî: %d\n", 
îr
 );

110 
	`Pa_Tîmö©e
();

111 
	`¥ötf
( "bye\n" );

114 
	}
}

	@pa_tests/pa_devs.c

36 
	~<°dio.h
>

37 
	~<m©h.h
>

38 
	~"p‹èudio.h
"

41 
maö
();

42 
	$maö
()

44 
i
,
j
;

45 
numDevi˚s
;

46 c⁄° 
PaDevi˚Info
 *
pdi
;

47 
PaEº‹
 
îr
;

48 
	`Pa_Inôülize
();

49 
numDevi˚s
 = 
	`Pa_Cou¡Devi˚s
();

50 if–
numDevi˚s
 < 0 )

52 
	`¥ötf
("ERROR: Pa_Cou¡Devi˚†ªtu∫ed 0x%x\n", 
numDevi˚s
 );

53 
îr
 = 
numDevi˚s
;

54 
îr‹
;

56 
	`¥ötf
("Numbî o‡devi˚†%d\n", 
numDevi˚s
 );

57  
i
=0; i<
numDevi˚s
; i++ )

59 
pdi
 = 
	`Pa_GëDevi˚Info
–
i
 );

60 
	`¥ötf
("---------------------------------------------- #%d", 
i
 );

61 if–
i
 =
	`Pa_GëDeÁu…I≈utDevi˚ID
(ËË
	`¥ötf
(" DefaultInput");

62 if–
i
 =
	`Pa_GëDeÁu…OuçutDevi˚ID
(ËË
	`¥ötf
(" DefaultOutput");

63 
	`¥ötf
("\nNamê = %s\n", 
pdi
->
«me
 );

64 
	`¥ötf
("Max I≈ut† = %d", 
pdi
->
maxI≈utCh™√ls
 );

65 
	`¥ötf
(", Max Ouçut†%d\n", 
pdi
->
maxOuçutCh™√ls
 );

66 if–
pdi
->
numSam∂eR©es
 == -1 )

68 
	`¥ötf
("Sam∂êR©êR™gê%‡tÿ%f\n", 
pdi
->
ßm∂eR©es
[0],Ödi->sampleRates[1] );

72 
	`¥ötf
("Sample Rates =");

73  
j
=0; j<
pdi
->
numSam∂eR©es
; j++ )

75 
	`¥ötf
(" %8.2f,", 
pdi
->
ßm∂eR©es
[
j
] );

77 
	`¥ötf
("\n");

79 
	`¥ötf
("Native Sample Formats = ");

80 if–
pdi
->
«tiveSam∂eF‹m©s
 & 
∑I¡8
 ) 
	`¥ötf
("paInt8, ");

81 if–
pdi
->
«tiveSam∂eF‹m©s
 & 
∑UI¡8
 ) 
	`¥ötf
("paUInt8, ");

82 if–
pdi
->
«tiveSam∂eF‹m©s
 & 
∑I¡16
 ) 
	`¥ötf
("paInt16, ");

83 if–
pdi
->
«tiveSam∂eF‹m©s
 & 
∑I¡32
 ) 
	`¥ötf
("paInt32, ");

84 if–
pdi
->
«tiveSam∂eF‹m©s
 & 
∑Flﬂt32
 ) 
	`¥ötf
("paFloat32, ");

85 if–
pdi
->
«tiveSam∂eF‹m©s
 & 
∑I¡24
 ) 
	`¥ötf
("paInt24, ");

86 if–
pdi
->
«tiveSam∂eF‹m©s
 & 
∑PackedI¡24
 ) 
	`¥ötf
("paPackedInt24, ");

87 
	`¥ötf
("\n");

89 
	`Pa_Tîmö©e
();

91 
	`¥ötf
("----------------------------------------------\n");

93 
îr‹
:

94 
	`Pa_Tîmö©e
();

95 
	`Ârötf
–
°dîr
, "AnÉrror occured while usingÅheÖortaudio stream\n" );

96 
	`Ârötf
–
°dîr
, "Eº‹Çumbî: %d\n", 
îr
 );

97 
	`Ârötf
–
°dîr
, "Eº‹ mesßge: %s\n", 
	`Pa_GëEº‹Text
–
îr
 ) );

98  
îr
;

99 
	}
}

	@pa_tests/pa_fuzz.c

36 
	~<°dio.h
>

37 
	~<m©h.h
>

38 
	~"p‹èudio.h
"

44 
	#SAMPLE_RATE
 (44100)

	)

45 
	#PA_SAMPLE_TYPE
 
∑Flﬂt32


	)

46 
	#FRAMES_PER_BUFFER
 (64)

	)

48 
	tSAMPLE
;

50 
CubicAm∂ifõr
–
öput
 );

51 
fuzzCÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

52 
‰amesPîBuf„r
,

53 
PaTime°amp
 
outTime
, *
u£rD©a
 );

56 
	$CubicAm∂ifõr
–
öput
 )

58 
ouçut
, 
ãmp
;

59 if–
öput
 < 0.0 )

61 
ãmp
 = 
öput
 + 1.0f;

62 
ouçut
 = (
ãmp
 *Åemp *Åemp) - 1.0f;

66 
ãmp
 = 
öput
 - 1.0f;

67 
ouçut
 = (
ãmp
 *Åemp *Åemp) + 1.0f;

70  
ouçut
;

71 
	}
}

72 
	#FUZZ
(
x
Ë
	`CubicAm∂ifõr
(CubicAm∂ifõr(CubicAm∂ifõr(CubicAm∂ifõr(x))))

	)

74 
	ggNumNoI≈uts
 = 0;

79 
	$fuzzCÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

80 
‰amesPîBuf„r
,

81 
PaTime°amp
 
outTime
, *
u£rD©a
 )

83 
SAMPLE
 *
out
 = (SAMPLE*)
ouçutBuf„r
;

84 
SAMPLE
 *
ö
 = (SAMPLE*)
öputBuf„r
;

85 
i
;

86 (Ë
outTime
;

87 (Ë
u£rD©a
;

89 if–
öputBuf„r
 =
NULL
 )

91  
i
=0; i<
‰amesPîBuf„r
; i++ )

93 *
out
++ = 0;

94 *
out
++ = 0;

96 
gNumNoI≈uts
 += 1;

100  
i
=0; i<
‰amesPîBuf„r
; i++ )

102 *
out
++ = 
	`FUZZ
(*
ö
++);

103 *
out
++ = *
ö
++;

107 
	}
}

110 
maö
();

111 
	$maö
()

113 
P‹tAudioSåóm
 *
°ªam
;

114 
PaEº‹
 
îr
;

116 
îr
 = 
	`Pa_Inôülize
();

117 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

119 
îr
 = 
	`Pa_O≥nSåóm
(

120 &
°ªam
,

121 
	`Pa_GëDeÁu…I≈utDevi˚ID
(),

123 
PA_SAMPLE_TYPE
,

124 
NULL
,

125 
	`Pa_GëDeÁu…OuçutDevi˚ID
(),

127 
PA_SAMPLE_TYPE
,

128 
NULL
,

129 
SAMPLE_RATE
,

130 
FRAMES_PER_BUFFER
,

133 
fuzzCÆlback
,

134 
NULL
 );

135 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

137 
îr
 = 
	`Pa_SèπSåóm
–
°ªam
 );

138 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

140 
	`¥ötf
("Hit ENTERÅo stopÖrogram.\n");

141 
	`fÊush
(
°dout
);

142 
	`gëch¨
();

143 
îr
 = 
	`Pa_Clo£Såóm
–
°ªam
 );

144 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

146 
	`¥ötf
("Föished. gNumNoI≈ut†%d\n", 
gNumNoI≈uts
 );

147 
	`Pa_Tîmö©e
();

150 
îr‹
:

151 
	`Pa_Tîmö©e
();

152 
	`Ârötf
–
°dîr
, "AnÉrror occured while usingÅheÖortaudio stream\n" );

153 
	`Ârötf
–
°dîr
, "Eº‹Çumbî: %d\n", 
îr
 );

154 
	`Ârötf
–
°dîr
, "Eº‹ mesßge: %s\n", 
	`Pa_GëEº‹Text
–
îr
 ) );

156 
	}
}

	@pa_tests/pa_minlat.c

37 
	~<°dio.h
>

38 
	~<°dlib.h
>

39 
	~<m©h.h
>

40 
	~"p‹èudio.h
"

42 #i‚de‡
M_PI


43 
	#M_PI
 (3.14159265)

	)

45 
	#TWOPI
 (
M_PI
 * 2.0)

	)

47 
	#DEFAULT_BUFFER_SIZE
 (64)

	)

51 
	mÀ·_pha£
;

52 
	mright_pha£
;

54 
	t∑Te°D©a
;

57 
	$∑möœtCÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

58 
‰amesPîBuf„r
,

59 
PaTime°amp
 
outTime
, *
u£rD©a
 )

61 
∑Te°D©a
 *
d©a
 = (∑Te°D©a*)
u£rD©a
;

62 *
out
 = (*)
ouçutBuf„r
;

63 
i
;

64 
À·_pha£Inc
 = 0.02;

65 
right_pha£Inc
 = 0.06;

67 
À·_pha£
 = 
d©a
->left_phase;

68 
right_pha£
 = 
d©a
->right_phase;

70  
i
=0; i<
‰amesPîBuf„r
; i++ )

72 
À·_pha£
 +
À·_pha£Inc
;

73 if–
À·_pha£
 > 
TWOPI
 )Üeft_phase -= TWOPI;

74 *
out
++ = (Ë
	`sö
–
À·_pha£
 );

76 
right_pha£
 +
right_pha£Inc
;

77 if–
right_pha£
 > 
TWOPI
 )Ñight_phase -= TWOPI;

78 *
out
++ = (Ë
	`sö
–
right_pha£
 );

81 
d©a
->
À·_pha£
 =Üeft_phase;

82 
d©a
->
right_pha£
 =Ñight_phase;

84 
	}
}

85 
maö
–
¨gc
, **
¨gv
 );

86 
	$maö
–
¨gc
, **
¨gv
 )

88 
P‹tAudioSåóm
 *
°ªam
;

89 
PaEº‹
 
îr
;

90 
∑Te°D©a
 
d©a
;

91 
go
;

92 
numBuf„rs
 = 0;

93 
möBuf„rs
 = 0;

94 
‰amesPîBuf„r
;

95 
ßm∂eR©e
 = 44100.0;

96 
°r
[256];

97 
	`¥ötf
("paminlat - Determine minimumÜatency for your computer.\n");

98 
	`¥ötf
(" usage:Öaminlat {framesPerBuffer}\n");

99 
	`¥ötf
(" forÉxample:Öaminlat 256\n");

100 
	`¥ötf
("Adjust your stereo until you heará smoothÅone inÉach speaker.\n");

101 
	`¥ötf
("ThenÅryÅo findÅhe smallestÇumber of buffersÅhat still sounds smooth.\n");

102 
	`¥ötf
("NoteÅhatÅhe sound will stop momentarily when you changeÅheÇumber of buffers.\n");

104 
‰amesPîBuf„r
 = ( 
¨gc
 > 1 ) ? 
	`©ﬁ
–
¨gv
[1] ) : 
DEFAULT_BUFFER_SIZE
;

105 
	`¥ötf
("Føme†≥∏buf„∏%d\n", 
‰amesPîBuf„r
 );

107 
d©a
.
À·_pha£
 = d©a.
right_pha£
 = 0.0;

108 
îr
 = 
	`Pa_Inôülize
();

109 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

111 
numBuf„rs
 = 
möBuf„rs
 = 
	`Pa_GëMöNumBuf„rs
–
‰amesPîBuf„r
, 
ßm∂eR©e
 );

112 
	`¥ötf
("NumBuf„r†£àtÿ%d ba£d o¿®ˇŒÅÿPa_GëMöNumBuf„rs()\n", 
numBuf„rs
 );

114 
go
 = 1;

115  
go
 )

118 
	`¥ötf
("Latency = framesPerBuffer *ÇumBuffers = %d * %d = %d frames = %d msecs.\n",

119 
‰amesPîBuf„r
, 
numBuf„rs
, framesPerBuffer*numBuffers,

120 ()((1000 * 
‰amesPîBuf„r
 * 
numBuf„rs
Ë/ 
ßm∂eR©e
) );

121 
îr
 = 
	`Pa_O≥nSåóm
(

122 &
°ªam
,

123 
∑NoDevi˚
,

125 
∑Flﬂt32
,

126 
NULL
,

127 
	`Pa_GëDeÁu…OuçutDevi˚ID
(),

129 
∑Flﬂt32
,

130 
NULL
,

131 
ßm∂eR©e
,

132 
‰amesPîBuf„r
,

133 
numBuf„rs
,

134 
∑ClùOff
,

135 
∑möœtCÆlback
,

136 &
d©a
 );

137 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

138 if–
°ªam
 =
NULL
 ) 
îr‹
;

140 
îr
 = 
	`Pa_SèπSåóm
–
°ªam
 );

141 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

143 
	`¥ötf
("\nMove windowsároundÅo see ifÅhe sound glitches.\n");

144 
	`¥ötf
("NumBuf„r†cuºíéy %d,É¡îÇewÇumbî, o∏'q'Åÿquô: ", 
numBuf„rs
 );

145 
	`gës
–
°r
 );

146 if–
°r
[0] ='q' ) 
go
 = 0;

149 
numBuf„rs
 = 
	`©ﬁ
–
°r
 );

150 if–
numBuf„rs
 < 
möBuf„rs
 )

152 
	`¥ötf
–"numBuf„r†bñow möimum o‡%d! SëÅÿmöimum!!!\n", 
möBuf„rs
 );

153 
numBuf„rs
 = 
möBuf„rs
;

157 
îr
 = 
	`Pa_St›Såóm
–
°ªam
 );

158 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

159 
îr
 = 
	`Pa_Clo£Såóm
–
°ªam
 );

160 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

162 
	`¥ötf
("A good setting forÜatency would be somewhat higherÅhan\n");

163 
	`¥ötf
("the minimumÜatencyÅhat worked.\n");

164 
	`¥ötf
("PortAudio: Test finished.\n");

165 
	`Pa_Tîmö©e
();

167 
îr‹
:

168 
	`Pa_Tîmö©e
();

169 
	`Ârötf
–
°dîr
, "AnÉrror occured while usingÅheÖortaudio stream\n" );

170 
	`Ârötf
–
°dîr
, "Eº‹Çumbî: %d\n", 
îr
 );

171 
	`Ârötf
–
°dîr
, "Eº‹ mesßge: %s\n", 
	`Pa_GëEº‹Text
–
îr
 ) );

172 
	}
}

	@pa_tests/paqa_devs.c

38 
	~<°dio.h
>

39 
	~<m©h.h
>

40 
	~"p‹èudio.h
"

41 
	~"∑_åa˚.h
"

43 
	#MODE_INPUT
 (0)

	)

44 
	#MODE_OUTPUT
 (1)

	)

45 
	sPaQaD©a


47 
	m‰amesLe·
;

48 
	mnumCh™√ls
;

49 
	mbyãsPîSam∂e
;

50 
	mmode
;

51 
	mßwPha£
;

52 
PaSam∂eF‹m©
 
	mf‹m©
;

53 } 
	tPaQaD©a
;

56 
Te°Devi˚s
–
mode
 );

57 
Te°F‹m©s
–
mode
, 
PaDevi˚ID
 
devi˚ID
, 
ßm∂eR©e
,

58 
numCh™√ls
 );

59 
Te°Adv™˚
–
mode
, 
PaDevi˚ID
 
devi˚ID
, 
ßm∂eR©e
,

60 
numCh™√ls
, 
PaSam∂eF‹m©
 
f‹m©
 );

61 
QaCÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

62 
‰amesPîBuf„r
,

63 
PaTime°amp
 
outTime
, *
u£rD©a
 );

66 
	ggNumPas£d
 = 0;

67 
	ggNumFaûed
 = 0;

72 
	#EXPECT
(
_exp
) \

75 i‡((
_exp
)) {\

77 
gNumPas£d
++; \

80 
	`¥ötf
("ERROR - 0x%x - %†f‹ %s\n", 
ªsu…
, \

81 ((
ªsu…
 =0Ë? "-" : 
	`Pa_GëEº‹Text
(result)), \

83 
gNumFaûed
++; \

84 
îr‹
; \

86 } 0)

	)

92 
	$QaCÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

93 
‰amesPîBuf„r
,

94 
PaTime°amp
 
outTime
, *
u£rD©a
 )

96 
i
;

97 
pha£
;

98 
PaQaD©a
 *
d©a
 = (PaQaD©®*Ë
u£rD©a
;

99 (Ë
öputBuf„r
;

100 (Ë
outTime
;

103 if–
d©a
->
mode
 =
MODE_OUTPUT
 )

105 
pha£
 = 
d©a
->
ßwPha£
;

106  
d©a
->
f‹m©
 )

108 
∑Flﬂt32
:

110 *
out
 = (*Ë
ouçutBuf„r
;

111  
i
=0; i<
‰amesPîBuf„r
; i++ )

113 
pha£
 += 0x123;

114 *
out
++ = (Ë(
pha£
 * (1.0 / 32768.0));

115 if–
d©a
->
numCh™√ls
 == 2 )

117 *
out
++ = (Ë(
pha£
 * (1.0 / 32768.0));

123 
∑I¡32
:

125 *
out
 = (*Ë
ouçutBuf„r
;

126  
i
=0; i<
‰amesPîBuf„r
; i++ )

128 
pha£
 += 0x123;

129 *
out
++ = ((Ë
pha£
 ) << 16;

130 if–
d©a
->
numCh™√ls
 == 2 )

132 *
out
++ = ((Ë
pha£
 ) << 16;

137 
∑I¡16
:

139 *
out
 = (*Ë
ouçutBuf„r
;

140  
i
=0; i<
‰amesPîBuf„r
; i++ )

142 
pha£
 += 0x123;

143 *
out
++ = 
pha£
;

144 if–
d©a
->
numCh™√ls
 == 2 )

146 *
out
++ = 
pha£
;

154 *
out
 = (*Ë
ouçutBuf„r
;

155 
numByãs
 = 
‰amesPîBuf„r
 * 
d©a
->
numCh™√ls
 * d©a->
byãsPîSam∂e
;

156  
i
=0; i<
numByãs
; i++ )

158 *
out
++ = 0;

163 
d©a
->
ßwPha£
 = 
pha£
;

166 if–
d©a
->
‰amesLe·
 > 
‰amesPîBuf„r
 )

168 
	`AddTø˚Mesßge
("QaCÆlback:Ñu¬ög. fømesLe·", 
d©a
->
‰amesLe·
 );

169 
d©a
->
‰amesLe·
 -
‰amesPîBuf„r
;

174 
	`AddTø˚Mesßge
("QaCÆlback: DONE! fømesLe·", 
d©a
->
‰amesLe·
 );

175 
d©a
->
‰amesLe·
 = 0;

178 
	}
}

180 
maö
();

181 
	$maö
()

183 
PaEº‹
 
ªsu…
;

184 
	`EXPECT
–((
ªsu…
=
	`Pa_Inôülize
()) == 0) );

185 
	`¥ötf
("Test OUTPUT ---------------\n");

186 
	`Te°Devi˚s
–
MODE_OUTPUT
 );

187 
	`¥ötf
("Test INPUT ---------------\n");

188 
	`Te°Devi˚s
–
MODE_INPUT
 );

189 
îr‹
:

190 
	`Pa_Tîmö©e
();

191 
	`¥ötf
("QA Rï‹t: %dÖas£d, %d faûed.\n", 
gNumPas£d
, 
gNumFaûed
 );

192 
	}
}

195 
	$Te°Devi˚s
–
mode
 )

197 
id
,
jc
,
kr
;

198 
maxCh™√ls
;

199 c⁄° 
PaDevi˚Info
 *
pdi
;

200 
numDevi˚s
 = 
	`Pa_Cou¡Devi˚s
();

202  
id
=0; id<
numDevi˚s
; id++ )

204 
pdi
 = 
	`Pa_GëDevi˚Info
–
id
 );

206 
maxCh™√ls
 = ( 
mode
 =
MODE_INPUT
 ) ? 
pdi
->
maxI≈utCh™√ls
 :Ödi->
maxOuçutCh™√ls
;

207  
jc
=1; jc<=
maxCh™√ls
; jc++ )

209 
	`¥ötf
("Namê = %s\n", 
pdi
->
«me
 );

211 if–
pdi
->
numSam∂eR©es
 == -1 )

213 
low
, 
high
;

214 
low
 = 
pdi
->
ßm∂eR©es
[0];

215 
high
 = 
pdi
->
ßm∂eR©es
[1];

216 if–
low
 < 8000.0 )Üow = 8000.0;

217 
	`Te°F‹m©s
–
mode
, 
id
, 
low
, 
jc
 );

218 
	#TESTSR
(
§
Ë{if(((§)>=
low
Ë&& ((§)<=
high
)Ë
	`Te°F‹m©s
–
mode
, 
id
, (§), 
jc
 ); }

	)

220 
	`TESTSR
(11025.0);

221 
	`TESTSR
(22050.0);

222 
	`TESTSR
(34567.0);

223 
	`TESTSR
(44100.0);

224 
	`Te°F‹m©s
–
mode
, 
id
, 
high
, 
jc
 );

228  
kr
=0; kr<
pdi
->
numSam∂eR©es
; kr++ )

230 
	`Te°F‹m©s
–
mode
, 
id
, 
pdi
->
ßm∂eR©es
[
kr
], 
jc
 );

235 
	}
}

237 
	$Te°F‹m©s
–
mode
, 
PaDevi˚ID
 
devi˚ID
, 
ßm∂eR©e
,

238 
numCh™√ls
 )

240 
	`Te°Adv™˚
–
mode
, 
devi˚ID
, 
ßm∂eR©e
, 
numCh™√ls
, 
∑Flﬂt32
 );

241 
	`Te°Adv™˚
–
mode
, 
devi˚ID
, 
ßm∂eR©e
, 
numCh™√ls
, 
∑I¡16
 );

242 
	`Te°Adv™˚
–
mode
, 
devi˚ID
, 
ßm∂eR©e
, 
numCh™√ls
, 
∑I¡32
 );

243 
	}
}

245 
	$Te°Adv™˚
–
mode
, 
PaDevi˚ID
 
devi˚ID
, 
ßm∂eR©e
,

246 
numCh™√ls
, 
PaSam∂eF‹m©
 
f‹m©
 )

248 
P‹tAudioSåóm
 *
°ªam
 = 
NULL
;

249 
PaEº‹
 
ªsu…
;

250 
PaQaD©a
 
myD©a
;

251 
	#FRAMES_PER_BUFFER
 (64)

	)

252 
	`¥ötf
("------ TestAdvance: %s, device = %d,Ñate = %g,ÇumChannels = %d, format = %d -------\n",

253 –
mode
 =
MODE_INPUT
 ) ? "INPUT" : "OUTPUT",

254 
devi˚ID
, 
ßm∂eR©e
, 
numCh™√ls
, 
f‹m©
);

255 
	`fÊush
(
°dout
);

257 
myD©a
.
‰amesLe·
 = (Ë(
ßm∂eR©e
 * 100);

258 
myD©a
.
numCh™√ls
 =ÇumChannels;

259 
myD©a
.
mode
 = mode;

260 
myD©a
.
f‹m©
 = format;

261  
f‹m©
 )

263 
∑Flﬂt32
:

264 
∑I¡32
:

265 
∑I¡24
:

266 
myD©a
.
byãsPîSam∂e
 = 4;

268 
∑PackedI¡24
:

269 
myD©a
.
byãsPîSam∂e
 = 3;

272 
myD©a
.
byãsPîSam∂e
 = 2;

275 
	`EXPECT
–((
ªsu…
 = 
	`Pa_O≥nSåóm
(

276 &
°ªam
,

277 –
mode
 =
MODE_INPUT
 ) ? 
devi˚ID
 : 
∑NoDevi˚
,

278 –
mode
 =
MODE_INPUT
 ) ? 
numCh™√ls
 : 0,

279 
f‹m©
,

280 
NULL
,

281 –
mode
 =
MODE_OUTPUT
 ) ? 
devi˚ID
 : 
∑NoDevi˚
,

282 –
mode
 =
MODE_OUTPUT
 ) ? 
numCh™√ls
 : 0,

283 
f‹m©
,

284 
NULL
,

285 
ßm∂eR©e
,

286 
FRAMES_PER_BUFFER
,

288 
∑ClùOff
,

289 
QaCÆlback
,

290 &
myD©a
 )

292 if–
°ªam
 )

294 
PaTime°amp
 
ﬁdSèmp
, 
√wSèmp
;

295 
ﬁdFømes
;

296 
möDñay
 = ( 
mode
 =
MODE_INPUT
 ) ? 1000 : 400;

297 
möNumBuf„rs
 = 
	`Pa_GëMöNumBuf„rs
–
FRAMES_PER_BUFFER
, 
ßm∂eR©e
 );

298 
m£c
 = (Ë((
möNumBuf„rs
 * 3 * 1000.0 * 
FRAMES_PER_BUFFER
Ë/ 
ßm∂eR©e
);

299 if–
m£c
 < 
möDñay
 ) msec = minDelay;

300 
	`¥ötf
("m£¯%d\n", 
m£c
);

301 
	`EXPECT
–((
ªsu…
=
	`Pa_SèπSåóm
–
°ªam
 )) == 0) );

303 
ªsu…
 = 
∑NoEº‹
;

304 
ﬁdSèmp
 = 
	`Pa_SåómTime
(
°ªam
);

305 
	`fÊush
(
°dout
);

306 
	`Pa_SÀï
(
m£c
);

307 
√wSèmp
 = 
	`Pa_SåómTime
(
°ªam
);

308 
	`¥ötf
("ﬁdSèm∞%g,√wSèm∞%g\n", 
ﬁdSèmp
, 
√wSèmp
 );

309 
	`EXPECT
–(
ﬁdSèmp
 < 
√wSèmp
) );

311 
ﬁdFømes
 = 
myD©a
.
‰amesLe·
;

312 
	`Pa_SÀï
(
m£c
);

313 
	`¥ötf
("ﬁdFøme†%d, myD©a.‰amesLe· = %d\n", 
ﬁdFømes
, 
myD©a
.
‰amesLe·
 );

314 
	`EXPECT
–(
ﬁdFømes
 > 
myD©a
.
‰amesLe·
) );

315 
	`EXPECT
–((
ªsu…
=
	`Pa_Clo£Såóm
–
°ªam
 )) == 0) );

316 
°ªam
 = 
NULL
;

318 
îr‹
:

319 if–
°ªam
 !
NULL
 ) 
	`Pa_Clo£Såóm
( stream );

320 
	`fÊush
(
°dout
);

321  
ªsu…
;

322 
	}
}

	@pa_tests/paqa_errs.c

37 
	~<°dio.h
>

38 
	~<m©h.h
>

39 
	~"p‹èudio.h
"

41 
	#MODE_INPUT
 (0)

	)

42 
	#MODE_OUTPUT
 (1)

	)

43 
	#FRAMES_PER_BUFFER
 (64)

	)

44 
	#SAMPLE_RATE
 (44100.0)

	)

45 
	#NUM_BUFFERS
 (0)

	)

46 
	sPaQaD©a


48 
	m‰amesLe·
;

49 
	mnumCh™√ls
;

50 
	mbyãsPîSam∂e
;

51 
	mmode
;

53 
	tPaQaD©a
;

55 
Te°Devi˚s
–
mode
 );

56 
Te°F‹m©s
–
mode
, 
PaDevi˚ID
 
devi˚ID
, 
ßm∂eR©e
,

57 
numCh™√ls
 );

58 
Te°BadO≥ns
( );

59 
Te°BadA˘i⁄s
( );

60 
QaCÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

61 
‰amesPîBuf„r
,

62 
PaTime°amp
 
outTime
, *
u£rD©a
 );

64 
	ggNumPas£d
 = 0;

65 
	ggNumFaûed
 = 0;

69 
	#EXPECT
–
msg
, 
_exp
) \

72 i‡((
_exp
)) {\

73 
gNumPas£d
++; \

76 
	`¥ötf
("\nERROR %s\¿ - 0x%x - %†f‹ %s\n", (
msg
), 
ªsu…
, 
	`Pa_GëEº‹Text
(result), #_exp ); \

77 
gNumFaûed
++; \

78 
îr‹
; \

80 } 0)

	)

81 
	#HOPEFOR
–
msg
, 
_exp
) \

84 i‡((
_exp
)) {\

85 
gNumPas£d
++; \

88 
	`¥ötf
("\nERROR %s\¿ - 0x%x - %†f‹ %s\n", (
msg
), 
ªsu…
, 
	`Pa_GëEº‹Text
(result), #_exp ); \

89 
gNumFaûed
++; \

91 } 0)

	)

97 
	$QaCÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

98 
‰amesPîBuf„r
,

99 
PaTime°amp
 
outTime
, *
u£rD©a
 )

101 
i
;

102 *
out
 = (*Ë
ouçutBuf„r
;

103 
PaQaD©a
 *
d©a
 = (PaQaD©®*Ë
u£rD©a
;

104 (Ë
öputBuf„r
;

105 (Ë
outTime
;

108 if–
d©a
->
mode
 =
MODE_OUTPUT
 )

110 
numByãs
 = 
‰amesPîBuf„r
 * 
d©a
->
numCh™√ls
 * d©a->
byãsPîSam∂e
;

111  
i
=0; i<
numByãs
; i++ )

113 *
out
++ = 0;

117 if–
d©a
->
‰amesLe·
 > 
‰amesPîBuf„r
 )

119 
d©a
->
‰amesLe·
 -
‰amesPîBuf„r
;

124 
d©a
->
‰amesLe·
 = 0;

127 
	}
}

129 
maö
();

130 
	$maö
()

132 
PaEº‹
 
ªsu…
;

133 
	`EXPECT
–"öô", ((
ªsu…
=
	`Pa_Inôülize
()) == 0) );

134 
	`Te°BadA˘i⁄s
();

135 
	`Te°BadO≥ns
();

136 
îr‹
:

137 
	`Pa_Tîmö©e
();

138 
	`¥ötf
("QA Rï‹t: %dÖas£d, %d faûed.\n", 
gNumPas£d
, 
gNumFaûed
 );

140 
	}
}

142 
	$Te°BadO≥ns
( )

144 
P‹tAudioSåóm
 *
°ªam
 = 
NULL
;

145 
PaEº‹
 
ªsu…
;

146 
PaQaD©a
 
myD©a
;

148 
myD©a
.
‰amesLe·
 = (Ë(
SAMPLE_RATE
 * 100);

149 
myD©a
.
numCh™√ls
 = 1;

150 
myD©a
.
mode
 = 
MODE_OUTPUT
;

151 
	`HOPEFOR
( "No devices specified.",(

152 (
ªsu…
 = 
	`Pa_O≥nSåóm
(

153 &
°ªam
,

154 
∑NoDevi˚
, 0, 
∑Flﬂt32
, 
NULL
,

155 
∑NoDevi˚
, 0, 
∑Flﬂt32
, 
NULL
,

156 
SAMPLE_RATE
, 
FRAMES_PER_BUFFER
, 
NUM_BUFFERS
,

157 
∑ClùOff
,

158 
QaCÆlback
,

159 &
myD©a
 )

160 Ë=
∑InvÆidDevi˚Id
) );

161 
	`HOPEFOR
( "Out ofÑange input device specified.",(

162 (
ªsu…
 = 
	`Pa_O≥nSåóm
(

163 &
°ªam
,

164 
	`Pa_Cou¡Devi˚s
(), 0, 
∑Flﬂt32
, 
NULL
,

165 
∑NoDevi˚
, 0, 
∑Flﬂt32
, 
NULL
,

166 
SAMPLE_RATE
, 
FRAMES_PER_BUFFER
, 
NUM_BUFFERS
,

167 
∑ClùOff
,

168 
QaCÆlback
,

169 &
myD©a
 )

170 Ë=
∑InvÆidDevi˚Id
) );

172 
	`HOPEFOR
( "Out ofÑange output device specified.",(

173 (
ªsu…
 = 
	`Pa_O≥nSåóm
(

174 &
°ªam
,

175 
∑NoDevi˚
, 0, 
∑Flﬂt32
, 
NULL
,

176 
	`Pa_Cou¡Devi˚s
(), 0, 
∑Flﬂt32
, 
NULL
,

177 
SAMPLE_RATE
, 
FRAMES_PER_BUFFER
, 
NUM_BUFFERS
,

178 
∑ClùOff
,

179 
QaCÆlback
,

180 &
myD©a
 )

181 Ë=
∑InvÆidDevi˚Id
) );

182 
	`HOPEFOR
( "Zero input channels.",(

183 (
ªsu…
 = 
	`Pa_O≥nSåóm
(

184 &
°ªam
,

185 
	`Pa_GëDeÁu…I≈utDevi˚ID
(), 0, 
∑Flﬂt32
, 
NULL
,

186 
∑NoDevi˚
, 0, 
∑Flﬂt32
, 
NULL
,

187 
SAMPLE_RATE
, 
FRAMES_PER_BUFFER
, 
NUM_BUFFERS
,

188 
∑ClùOff
,

189 
QaCÆlback
,

190 &
myD©a
 )

191 Ë=
∑InvÆidCh™√lCou¡
) );

192 
	`HOPEFOR
( "Zero output channels.",(

193 (
ªsu…
 = 
	`Pa_O≥nSåóm
(

194 &
°ªam
,

195 
∑NoDevi˚
, 0, 
∑Flﬂt32
, 
NULL
,

196 
	`Pa_GëDeÁu…OuçutDevi˚ID
(), 0, 
∑Flﬂt32
, 
NULL
,

197 
SAMPLE_RATE
, 
FRAMES_PER_BUFFER
, 
NUM_BUFFERS
,

198 
∑ClùOff
,

199 
QaCÆlback
,

200 &
myD©a
 )

201 Ë=
∑InvÆidCh™√lCou¡
) );

202 
	`HOPEFOR
( "Nonzero input channels butÇo device.",(

203 (
ªsu…
 = 
	`Pa_O≥nSåóm
(

204 &
°ªam
,

205 
	`Pa_GëDeÁu…I≈utDevi˚ID
(), 2, 
∑Flﬂt32
, 
NULL
,

206 
∑NoDevi˚
, 2, 
∑Flﬂt32
, 
NULL
,

207 
SAMPLE_RATE
, 
FRAMES_PER_BUFFER
, 
NUM_BUFFERS
,

208 
∑ClùOff
,

209 
QaCÆlback
,

210 &
myD©a
 )

211 Ë=
∑InvÆidCh™√lCou¡
) );

213 
	`HOPEFOR
( "Nonzero output channels butÇo device.",(

214 (
ªsu…
 = 
	`Pa_O≥nSåóm
(

215 &
°ªam
,

216 
∑NoDevi˚
, 2, 
∑Flﬂt32
, 
NULL
,

217 
	`Pa_GëDeÁu…OuçutDevi˚ID
(), 2, 
∑Flﬂt32
, 
NULL
,

218 
SAMPLE_RATE
, 
FRAMES_PER_BUFFER
, 
NUM_BUFFERS
,

219 
∑ClùOff
,

220 
QaCÆlback
,

221 &
myD©a
 )

222 Ë=
∑InvÆidCh™√lCou¡
) );

223 
	`HOPEFOR
( "NULL streamÖointer.",(

224 (
ªsu…
 = 
	`Pa_O≥nSåóm
(

225 
NULL
,

226 
∑NoDevi˚
, 0, 
∑Flﬂt32
, 
NULL
,

227 
	`Pa_GëDeÁu…OuçutDevi˚ID
(), 2, 
∑Flﬂt32
, 
NULL
,

228 
SAMPLE_RATE
, 
FRAMES_PER_BUFFER
, 
NUM_BUFFERS
,

229 
∑ClùOff
,

230 
QaCÆlback
,

231 &
myD©a
 )

232 Ë=
∑BadSåómPå
) );

233 
	`HOPEFOR
( "Low sampleÑate.",(

234 (
ªsu…
 = 
	`Pa_O≥nSåóm
(

235 &
°ªam
,

236 
∑NoDevi˚
, 0, 
∑Flﬂt32
, 
NULL
,

237 
	`Pa_GëDeÁu…OuçutDevi˚ID
(), 2, 
∑Flﬂt32
, 
NULL
,

238 1.0, 
FRAMES_PER_BUFFER
, 
NUM_BUFFERS
,

239 
∑ClùOff
,

240 
QaCÆlback
,

241 &
myD©a
 )

242 Ë=
∑InvÆidSam∂eR©e
) );

243 
	`HOPEFOR
( "High sampleÑate.",(

244 (
ªsu…
 = 
	`Pa_O≥nSåóm
(

245 &
°ªam
,

246 
∑NoDevi˚
, 0, 
∑Flﬂt32
, 
NULL
,

247 
	`Pa_GëDeÁu…OuçutDevi˚ID
(), 2, 
∑Flﬂt32
, 
NULL
,

248 10000000.0, 
FRAMES_PER_BUFFER
, 
NUM_BUFFERS
,

249 
∑ClùOff
,

250 
QaCÆlback
,

251 &
myD©a
 )

252 Ë=
∑InvÆidSam∂eR©e
) );

253 
	`HOPEFOR
( "NULL callback.",(

254 (
ªsu…
 = 
	`Pa_O≥nSåóm
(

255 &
°ªam
,

256 
∑NoDevi˚
, 0, 
∑Flﬂt32
, 
NULL
,

257 
	`Pa_GëDeÁu…OuçutDevi˚ID
(), 2, 
∑Flﬂt32
, 
NULL
,

258 
SAMPLE_RATE
, 
FRAMES_PER_BUFFER
, 
NUM_BUFFERS
,

259 
∑ClùOff
,

260 
NULL
,

261 &
myD©a
 )

262 Ë=
∑NuŒCÆlback
) );

263 
	`HOPEFOR
( "Bad flag.",(

264 (
ªsu…
 = 
	`Pa_O≥nSåóm
(

265 &
°ªam
,

266 
∑NoDevi˚
, 0, 
∑Flﬂt32
, 
NULL
,

267 
	`Pa_GëDeÁu…OuçutDevi˚ID
(), 2, 
∑Flﬂt32
, 
NULL
,

268 
SAMPLE_RATE
, 
FRAMES_PER_BUFFER
, 
NUM_BUFFERS
,

270 
QaCÆlback
,

271 &
myD©a
 )

272 Ë=
∑InvÆidFœg
) );

275 
	`HOPEFOR
( "Use input deviceás output device.",(

276 (
ªsu…
 = 
	`Pa_O≥nSåóm
(

277 &
°ªam
,

278 
∑NoDevi˚
, 0, 
∑Flﬂt32
, 
NULL
,

279 
	`Pa_GëDeÁu…I≈utDevi˚ID
(), 2, 
∑Flﬂt32
, 
NULL
,

280 
SAMPLE_RATE
, 
FRAMES_PER_BUFFER
, 
NUM_BUFFERS
,

281 
∑ClùOff
,

282 
QaCÆlback
,

283 &
myD©a
 )

284 Ë=
∑InvÆidDevi˚Id
) );

286 
	`HOPEFOR
( "Use output deviceás input device.",(

287 (
ªsu…
 = 
	`Pa_O≥nSåóm
(

288 &
°ªam
,

289 
	`Pa_GëDeÁu…OuçutDevi˚ID
(), 2, 
∑Flﬂt32
, 
NULL
,

290 
∑NoDevi˚
, 0, 
∑Flﬂt32
, 
NULL
,

291 
SAMPLE_RATE
, 
FRAMES_PER_BUFFER
, 
NUM_BUFFERS
,

292 
∑ClùOff
,

293 
QaCÆlback
,

294 &
myD©a
 )

295 Ë=
∑InvÆidDevi˚Id
) );

298 if–
°ªam
 !
NULL
 ) 
	`Pa_Clo£Såóm
( stream );

299  
ªsu…
;

300 
	}
}

302 
	$Te°BadA˘i⁄s
( )

304 
P‹tAudioSåóm
 *
°ªam
 = 
NULL
;

305 
PaEº‹
 
ªsu…
;

306 
PaQaD©a
 
myD©a
;

308 
myD©a
.
‰amesLe·
 = (Ë(
SAMPLE_RATE
 * 100);

309 
myD©a
.
numCh™√ls
 = 1;

310 
myD©a
.
mode
 = 
MODE_OUTPUT
;

312 
	`EXPECT
–"Te°BadA˘i⁄s", ((
ªsu…
 = 
	`Pa_O≥nSåóm
(

313 &
°ªam
,

314 
∑NoDevi˚
, 0, 
∑Flﬂt32
, 
NULL
,

315 
	`Pa_GëDeÁu…OuçutDevi˚ID
(), 2, 
∑Flﬂt32
, 
NULL
,

316 
SAMPLE_RATE
, 
FRAMES_PER_BUFFER
, 
NUM_BUFFERS
,

317 
∑ClùOff
,

318 
QaCÆlback
,

319 &
myD©a
 )

321 
	`HOPEFOR
–"°¨t", ((
ªsu…
 = 
	`Pa_SèπSåóm
–
NULL
 )Ë=
∑BadSåómPå
) );

322 
	`HOPEFOR
–"°›", ((
ªsu…
 = 
	`Pa_St›Såóm
–
NULL
 )Ë=
∑BadSåómPå
) );

323 
	`HOPEFOR
–"a˘ive?", ((
ªsu…
 = 
	`Pa_SåómA˘ive
–
NULL
 )Ë=
∑BadSåómPå
) );

324 
	`HOPEFOR
–"˛o£", ((
ªsu…
 = 
	`Pa_Clo£Såóm
–
NULL
 )Ë=
∑BadSåómPå
) );

325 
	`HOPEFOR
–"time?", ((
ªsu…
 = (
PaEº‹
)
	`Pa_SåómTime
–
NULL
 )) != 0) );

326 
	`HOPEFOR
–"CPULﬂd?", ((
ªsu…
 = (
PaEº‹
)
	`Pa_GëCPULﬂd
–
NULL
 )) != 0) );

327 
îr‹
:

328 if–
°ªam
 !
NULL
 ) 
	`Pa_Clo£Såóm
( stream );

329  
ªsu…
;

330 
	}
}

	@pa_tests/patest1.c

10 
	~<°dio.h
>

11 
	~<m©h.h
>

12 
	~"p‹èudio.h
"

13 #i‚de‡
M_PI


14 
	#M_PI
 (3.14159265)

	)

18 
	msöe
[100];

19 
	mpha£
;

20 
	mßmpsToGo
;

22 
	t∑ã°1d©a
;

23 
	$∑ã°1CÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

24 
buf„rFømes
,

25 
PaTime°amp
 
outTime
, *
u£rD©a
 )

27 
∑ã°1d©a
 *
d©a
 = (∑ã°1d©a*)
u£rD©a
;

28 *
ö
 = (*)
öputBuf„r
;

29 *
out
 = (*)
ouçutBuf„r
;

30 
‰amesToCÆc
 = 
buf„rFømes
;

31 
i
;

32 
föished
 = 0;

34 if(
öputBuf„r
 =
NULL
)  0;

35 if–
d©a
->
ßmpsToGo
 < 
buf„rFømes
 )

37 
‰amesToCÆc
 = 
d©a
->
ßmpsToGo
;

38 
föished
 = 1;

40  
i
=0; i<
‰amesToCÆc
; i++ )

42 *
out
++ = *
ö
++ * 
d©a
->
söe
[d©a->
pha£
];

43 *
out
++ = *
ö
++ * 
d©a
->
söe
[d©a->
pha£
++];

44 if–
d©a
->
pha£
 >= 100 )

45 
d©a
->
pha£
 = 0;

47 
d©a
->
ßmpsToGo
 -
‰amesToCÆc
;

49  ; 
i
<
buf„rFømes
; i++ )

51 *
out
++ = 0;

52 *
out
++ = 0;

54  
föished
;

55 
	}
}

56 
maö
(
¨gc
, * 
¨gv
[]);

57 
	$maö
(
¨gc
, * 
¨gv
[])

59 
PaSåóm
 *
°ªam
;

60 
PaEº‹
 
îr
;

61 
∑ã°1d©a
 
d©a
;

62 
i
;

63 
öputDevi˚
 = 
	`Pa_GëDeÁu…I≈utDevi˚ID
();

64 
ouçutDevi˚
 = 
	`Pa_GëDeÁu…OuçutDevi˚ID
();

66  
i
=0; i<100; i++ )

67 
d©a
.
söe
[
i
] = 
	`sö
–(()i/100.Ë* 
M_PI
 * 2. );

68 
d©a
.
pha£
 = 0;

69 
d©a
.
ßmpsToGo
 = 44100 * 20;

71 
	`Pa_Inôülize
();

72 
îr
 = 
	`Pa_O≥nSåóm
(

73 &
°ªam
,

74 
öputDevi˚
,

76 
∑Flﬂt32
,

77 
NULL
,

78 
ouçutDevi˚
,

80 
∑Flﬂt32
,

81 
NULL
,

85 
∑ClùOff
,

86 
∑ã°1CÆlback
,

87 &
d©a
 );

88 if–
îr
 =
∑NoEº‹
 )

90 
îr
 = 
	`Pa_SèπSåóm
–
°ªam
 );

91 
	`¥ötf
( "Pressány keyÅoÉnd.\n" );

92 
	`gëc
–
°dö
 );

93 
	`Pa_Ab‹tSåóm
–
°ªam
 );

95 
	`¥ötf
( "Waiting for streamÅo complete...\n" );

97  
	`Pa_SåómA˘ive
–
°ªam
 ) )

98 
	`Pa_SÀï
(1000);

100 
îr
 = 
	`Pa_Clo£Såóm
–
°ªam
 );

104 
	`Ârötf
–
°dîr
, "AnÉrror occured while openingÅheÖortaudio stream\n" );

105 if–
îr
 =
∑Ho°Eº‹
 )

106 
	`Ârötf
–
°dîr
, "Ho°Éº‹Çumbî: %d\n", 
	`Pa_GëHo°Eº‹
() );

108 
	`Ârötf
–
°dîr
, "Eº‹Çumbî: %d\n", 
îr
 );

110 
	`Pa_Tîmö©e
();

111 
	`¥ötf
( "bye\n" );

114 
	}
}

	@pa_tests/patest_clip.c

37 
	~<°dio.h
>

38 
	~<m©h.h
>

39 
	~"p‹èudio.h
"

40 
	#NUM_SECONDS
 (4)

	)

41 
	#SAMPLE_RATE
 (44100)

	)

42 #i‚de‡
M_PI


43 
	#M_PI
 (3.14159265)

	)

45 
	#TABLE_SIZE
 (200)

	)

46 
	s∑Te°D©a


48 
	msöe
[
TABLE_SIZE
];

49 
	mam∂ôude
;

50 
	mÀ·_pha£
;

51 
	mright_pha£
;

53 
	t∑Te°D©a
;

54 
PaEº‹
 
PœySöe
–
∑Te°D©a
 *
d©a
, 
Êags
, 
am∂ôude
 );

59 
	$söeCÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

60 
‰amesPîBuf„r
,

61 
PaTime°amp
 
outTime
, *
u£rD©a
 )

63 
∑Te°D©a
 *
d©a
 = (∑Te°D©a*)
u£rD©a
;

64 *
out
 = (*)
ouçutBuf„r
;

65 
am∂ôude
 = 
d©a
->amplitude;

66 
i
;

67 (Ë
öputBuf„r
;

68 (Ë
outTime
;

70  
i
=0; i<
‰amesPîBuf„r
; i++ )

72 *
out
++ = 
am∂ôude
 * 
d©a
->
söe
[d©a->
À·_pha£
];

73 *
out
++ = 
am∂ôude
 * 
d©a
->
söe
[d©a->
right_pha£
];

74 
d©a
->
À·_pha£
 += 1;

75 if–
d©a
->
À·_pha£
 >
TABLE_SIZE
 ) data->left_phase -= TABLE_SIZE;

76 
d©a
->
right_pha£
 += 3;

77 if–
d©a
->
right_pha£
 >
TABLE_SIZE
 ) data->right_phase -= TABLE_SIZE;

80 
	}
}

82 
maö
();

83 
	$maö
()

85 
PaEº‹
 
îr
;

86 
∑Te°D©a
 
DATA
;

87 
i
;

88 
	`¥ötf
("PortAudio Test: output sine wave withánd without clipping.\n");

90  
i
=0; i<
TABLE_SIZE
; i++ )

92 
DATA
.
söe
[
i
] = (Ë
	`sö
–(()i/()
TABLE_SIZE
Ë* 
M_PI
 * 2. );

94 
	`¥ötf
("\nHÆ‡am∂ôude. Should soundÜikêsöêwave.\n"); 
	`fÊush
(
°dout
);

95 
îr
 = 
	`PœySöe
–&
DATA
, 
∑ClùOff
 | 
∑DôhîOff
, 0.5f );

96 if–
îr
 < 0 ) 
îr‹
;

97 
	`¥ötf
("\nFuŒám∂ôude. Should soundÜikêsöêwave.\n"); 
	`fÊush
(
°dout
);

98 
îr
 = 
	`PœySöe
–&
DATA
, 
∑ClùOff
 | 
∑DôhîOff
, 0.999f );

99 if–
îr
 < 0 ) 
îr‹
;

100 
	`¥ötf
("\nOverÑange with clippingánd ditheringÅurned OFF. Should sound veryÇasty.\n");

101 
	`fÊush
(
°dout
);

102 
îr
 = 
	`PœySöe
–&
DATA
, 
∑ClùOff
 | 
∑DôhîOff
, 1.1f );

103 if–
îr
 < 0 ) 
îr‹
;

104 
	`¥ötf
("\nOverÑange with clippingánd ditheringÅurned ON. Should sound smootherÅhanÖrevious.\n");

105 
	`fÊush
(
°dout
);

106 
îr
 = 
	`PœySöe
–&
DATA
, 
∑NoFœg
, 1.1f );

107 if–
îr
 < 0 ) 
îr‹
;

108 
	`¥ötf
("\nOverÑange withÖaClipOff but dithering ON.\n"

110 
	`fÊush
(
°dout
);

111 
îr
 = 
	`PœySöe
–&
DATA
, 
∑ClùOff
, 1.1f );

112 if–
îr
 < 0 ) 
îr‹
;

114 
îr‹
:

115 
	`Ârötf
–
°dîr
, "AnÉrror occured while usingÅheÖortaudio stream\n" );

116 
	`Ârötf
–
°dîr
, "Eº‹Çumbî: %d\n", 
îr
 );

117 
	`Ârötf
–
°dîr
, "Eº‹ mesßge: %s\n", 
	`Pa_GëEº‹Text
–
îr
 ) );

119 
	}
}

121 
PaEº‹
 
	$PœySöe
–
∑Te°D©a
 *
d©a
, 
Êags
, 
am∂ôude
 )

123 
P‹tAudioSåóm
 *
°ªam
;

124 
PaEº‹
 
îr
;

125 
d©a
->
À·_pha£
 = d©a->
right_pha£
 = 0;

126 
d©a
->
am∂ôude
 =ámplitude;

127 
îr
 = 
	`Pa_Inôülize
();

128 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

129 
îr
 = 
	`Pa_O≥nSåóm
(

130 &
°ªam
,

131 
∑NoDevi˚
,

133 
∑Flﬂt32
,

134 
NULL
,

135 
	`Pa_GëDeÁu…OuçutDevi˚ID
(),

137 
∑Flﬂt32
,

138 
NULL
,

139 
SAMPLE_RATE
,

142 
Êags
,

143 
söeCÆlback
,

144 
d©a
 );

145 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

146 
îr
 = 
	`Pa_SèπSåóm
–
°ªam
 );

147 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

148 
	`Pa_SÀï
–
NUM_SECONDS
 * 1000 );

149 
	`¥ötf
("CPULﬂd = %8.6f\n", 
	`Pa_GëCPULﬂd
–
°ªam
 ) );

150 
îr
 = 
	`Pa_Clo£Såóm
–
°ªam
 );

151 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

152 
	`Pa_Tîmö©e
();

153  
∑NoEº‹
;

154 
îr‹
:

155  
îr
;

156 
	}
}

	@pa_tests/patest_dither.c

37 
	~<°dio.h
>

38 
	~<m©h.h
>

39 
	~"p‹èudio.h
"

40 
	#NUM_SECONDS
 (4)

	)

41 
	#SAMPLE_RATE
 (44100)

	)

42 #i‚de‡
M_PI


43 
	#M_PI
 (3.14159265)

	)

45 
	#TABLE_SIZE
 (200)

	)

46 
	s∑Te°D©a


48 
	msöe
[
TABLE_SIZE
];

49 
	mam∂ôude
;

50 
	mÀ·_pha£
;

51 
	mright_pha£
;

53 
	t∑Te°D©a
;

54 
PaEº‹
 
PœySöe
–
∑Te°D©a
 *
d©a
, 
PaSåómFœgs
 
Êags
, 
am∂ôude
 );

55 
söeCÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

56 
‰amesPîBuf„r
,

57 
PaTime°amp
 
outTime
, *
u£rD©a
 );

62 
	$söeCÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

63 
‰amesPîBuf„r
,

64 
PaTime°amp
 
outTime
, *
u£rD©a
 )

66 
∑Te°D©a
 *
d©a
 = (∑Te°D©a*)
u£rD©a
;

67 *
out
 = (*)
ouçutBuf„r
;

68 
am∂ôude
 = 
d©a
->amplitude;

69 
i
;

70 (Ë
outTime
;

71 (Ë
öputBuf„r
;

72  
i
=0; i<
‰amesPîBuf„r
; i++ )

74 *
out
++ = 
am∂ôude
 * 
d©a
->
söe
[d©a->
À·_pha£
];

75 *
out
++ = 
am∂ôude
 * 
d©a
->
söe
[d©a->
right_pha£
];

76 
d©a
->
À·_pha£
 += 1;

77 if–
d©a
->
À·_pha£
 >
TABLE_SIZE
 ) data->left_phase -= TABLE_SIZE;

78 
d©a
->
right_pha£
 += 3;

79 if–
d©a
->
right_pha£
 >
TABLE_SIZE
 ) data->right_phase -= TABLE_SIZE;

82 
	}
}

84 
maö
();

85 
	$maö
()

87 
PaEº‹
 
îr
;

88 
∑Te°D©a
 
DATA
;

89 
i
;

90 
am∂ôude
 = 32.0 / (1<<15);

91 
	`¥ötf
("PortAudio Test: output EXTREMELY QUIET sine wave withánd without dithering.\n");

93  
i
=0; i<
TABLE_SIZE
; i++ )

95 
DATA
.
söe
[
i
] = (Ë
	`sö
–(()i/()
TABLE_SIZE
Ë* 
M_PI
 * 2. );

97 
	`¥ötf
("\nNÿåótmít..\n"); 
	`fÊush
(
°dout
);

98 
îr
 = 
	`PœySöe
–&
DATA
, 
∑ClùOff
 | 
∑DôhîOff
, 
am∂ôude
 );

99 if–
îr
 < 0 ) 
îr‹
;

100 
	`¥ötf
("\nClip.\n");

101 
	`fÊush
(
°dout
);

102 
îr
 = 
	`PœySöe
–&
DATA
, 
∑DôhîOff
, 
am∂ôude
 );

103 if–
îr
 < 0 ) 
îr‹
;

104 
	`¥ötf
("\nClipánd Dither.\n");

105 
	`fÊush
(
°dout
);

106 
îr
 = 
	`PœySöe
–&
DATA
, 
∑NoFœg
, 
am∂ôude
 );

107 if–
îr
 < 0 ) 
îr‹
;

109 
îr‹
:

110 
	`Ârötf
–
°dîr
, "AnÉrror occured while usingÅheÖortaudio stream\n" );

111 
	`Ârötf
–
°dîr
, "Eº‹Çumbî: %d\n", 
îr
 );

112 
	`Ârötf
–
°dîr
, "Eº‹ mesßge: %s\n", 
	`Pa_GëEº‹Text
–
îr
 ) );

114 
	}
}

116 
PaEº‹
 
	$PœySöe
–
∑Te°D©a
 *
d©a
, 
PaSåómFœgs
 
Êags
, 
am∂ôude
 )

118 
P‹tAudioSåóm
 *
°ªam
;

119 
PaEº‹
 
îr
;

120 
d©a
->
À·_pha£
 = d©a->
right_pha£
 = 0;

121 
d©a
->
am∂ôude
 =ámplitude;

122 
îr
 = 
	`Pa_Inôülize
();

123 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

124 
îr
 = 
	`Pa_O≥nSåóm
(

125 &
°ªam
,

126 
∑NoDevi˚
,

128 
∑Flﬂt32
,

129 
NULL
,

130 
	`Pa_GëDeÁu…OuçutDevi˚ID
(),

132 
∑Flﬂt32
,

133 
NULL
,

134 
SAMPLE_RATE
,

137 
Êags
,

138 
söeCÆlback
,

139 (*)
d©a
 );

140 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

142 
îr
 = 
	`Pa_SèπSåóm
–
°ªam
 );

143 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

144 
	`Pa_SÀï
–
NUM_SECONDS
 * 1000 );

145 
	`¥ötf
("CPULﬂd = %8.6f\n", 
	`Pa_GëCPULﬂd
–
°ªam
 ) );

146 
îr
 = 
	`Pa_Clo£Såóm
–
°ªam
 );

147 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

148 
	`Pa_Tîmö©e
();

149  
∑NoEº‹
;

150 
îr‹
:

151  
îr
;

152 
	}
}

	@pa_tests/patest_latency.c

36 
	~<°dio.h
>

37 
	~<m©h.h
>

38 
	~"p‹èudio.h
"

40 
	#OUTPUT_DEVICE
 (
	`Pa_GëDeÁu…OuçutDevi˚ID
())

	)

41 
	#SAMPLE_RATE
 (44100)

	)

42 
	#FRAMES_PER_BUFFER
 (64)

	)

45 
	#MIN_LATENCY_MSEC
 (2000)

	)

46 
	#NUM_BUFFERS
 ((
MIN_LATENCY_MSEC
 * 
SAMPLE_RATE
Ë/ (
FRAMES_PER_BUFFER
 * 1000))

	)

48 
	#NUM_BUFFERS
 (0)

	)

51 
	#MIN_FREQ
 (100.0f)

	)

52 
	#CÆcPha£In¸emít
(
‰eq
Ë((‰eq)/
SAMPLE_RATE
)

	)

53 #i‚de‡
M_PI


54 
	#M_PI
 (3.14159265)

	)

56 
	#TABLE_SIZE
 (400)

	)

59 
	msöe
[
TABLE_SIZE
 + 1];

60 
	mpha£_ö¸emít
;

61 
	mÀ·_pha£
;

62 
	mright_pha£
;

64 
	t∑Te°D©a
;

65 
LookupSöe
–
∑Te°D©a
 *
d©a
, 
pha£
 );

69 
	$LookupSöe
–
∑Te°D©a
 *
d©a
, 
pha£
 )

71 
fIndex
 = 
pha£
*
TABLE_SIZE
;

72 
ödex
 = (Ë
fIndex
;

73 
‰a˘
 = 
fIndex
 - 
ödex
;

74 
lo
 = 
d©a
->
söe
[
ödex
];

75 
hi
 = 
d©a
->
söe
[
ödex
+1];

76 
vÆ
 = 
lo
 + 
‰a˘
*(
hi
-lo);

77  
vÆ
;

78 
	}
}

83 
	$∑ã°CÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

84 
‰amesPîBuf„r
,

85 
PaTime°amp
 
outTime
, *
u£rD©a
 )

87 
∑Te°D©a
 *
d©a
 = (∑Te°D©a*)
u£rD©a
;

88 *
out
 = (*)
ouçutBuf„r
;

89 
i
;

90 
föished
 = 0;

91 (Ë
outTime
;

92 (Ë
öputBuf„r
;

94  
i
=0; i<
‰amesPîBuf„r
; i++ )

96 *
out
++ = 
	`LookupSöe
(
d©a
, d©a->
À·_pha£
);

97 *
out
++ = 
	`LookupSöe
(
d©a
, d©a->
right_pha£
);

98 
d©a
->
À·_pha£
 +d©a->
pha£_ö¸emít
;

99 if–
d©a
->
À·_pha£
 >= 1.0f ) data->left_phase -= 1.0f;

100 
d©a
->
right_pha£
 +(d©a->
pha£_ö¸emít
 * 1.5f);

101 if–
d©a
->
right_pha£
 >= 1.0f ) data->right_phase -= 1.0f;

104 
	}
}

106 
maö
();

107 
	$maö
()

109 
P‹tAudioSåóm
 *
°ªam
;

110 
PaEº‹
 
îr
;

111 
∑Te°D©a
 
d©a
;

112 
i
;

113 
d⁄e
 = 0;

114 
	`¥ötf
("P‹tAudiÿTe°:É¡îÜëã∏thí hô ENTER.ÇumBuf„r†%d\n", 
NUM_BUFFERS
 );

116  
i
=0; i<
TABLE_SIZE
; i++ )

118 
d©a
.
söe
[
i
] = 0.90‡* (Ë
	`sö
–(()i/()
TABLE_SIZE
Ë* 
M_PI
 * 2. );

120 
d©a
.
söe
[
TABLE_SIZE
] = data.sine[0];

121 
d©a
.
À·_pha£
 = d©a.
right_pha£
 = 0.0;

122 
d©a
.
pha£_ö¸emít
 = 
	`CÆcPha£In¸emít
(
MIN_FREQ
);

124 
îr
 = 
	`Pa_Inôülize
();

125 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

126 
	`¥ötf
("P‹tAudiÿTe°: ouçuàdevi˚ = %d\n", 
OUTPUT_DEVICE
 );

127 
îr
 = 
	`Pa_O≥nSåóm
(

128 &
°ªam
,

129 
∑NoDevi˚
,

131 
∑Flﬂt32
,

132 
NULL
,

133 
OUTPUT_DEVICE
,

135 
∑Flﬂt32
,

136 
NULL
,

137 
SAMPLE_RATE
,

138 
FRAMES_PER_BUFFER
,

139 
NUM_BUFFERS
,

140 
∑ClùOff
|
∑DôhîOff
,

141 
∑ã°CÆlback
,

142 &
d©a
 );

143 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

144 
îr
 = 
	`Pa_SèπSåóm
–
°ªam
 );

145 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

146 
	`¥ötf
("Play ASCII keyboard. Hit 'q'Åo stop. (Use RETURN key on Mac)\n");

147 
	`fÊush
(
°dout
);

148  !
d⁄e
 )

150 
‰eq
;

151 
ödex
;

152 
c
;

155 
c
 = 
	`gëch¨
();

157  
c
 < ' ');

159 if–
c
 ='q' ) 
d⁄e
 = 1;

160 
ödex
 = 
c
 % 26;

161 
‰eq
 = 
MIN_FREQ
 + (
ödex
 * 40.0);

162 
d©a
.
pha£_ö¸emít
 = 
	`CÆcPha£In¸emít
(
‰eq
);

164 
	`¥ötf
("Call Pa_StopStream()\n");

165 
îr
 = 
	`Pa_St›Såóm
–
°ªam
 );

166 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

167 
	`Pa_Tîmö©e
();

168 
	`¥ötf
("Test finished.\n");

169  
îr
;

170 
îr‹
:

171 
	`Pa_Tîmö©e
();

172 
	`Ârötf
–
°dîr
, "AnÉrror occured while usingÅheÖortaudio stream\n" );

173 
	`Ârötf
–
°dîr
, "Eº‹Çumbî: %d\n", 
îr
 );

174 
	`Ârötf
–
°dîr
, "Eº‹ mesßge: %s\n", 
	`Pa_GëEº‹Text
–
îr
 ) );

175  
îr
;

176 
	}
}

	@pa_tests/patest_leftright.c

39 
	~<°dio.h
>

40 
	~<m©h.h
>

41 
	~"p‹èudio.h
"

42 
	#NUM_SECONDS
 (8)

	)

43 
	#SAMPLE_RATE
 (44100)

	)

44 
	#FRAMES_PER_BUFFER
 (512)

	)

45 #i‚de‡
M_PI


46 
	#M_PI
 (3.14159265)

	)

48 
	#TABLE_SIZE
 (200)

	)

51 
	msöe
[
TABLE_SIZE
];

52 
	mÀ·_pha£
;

53 
	mright_pha£
;

54 
	mtoggÀ
;

55 
	mcou¡Down
;

57 
	t∑Te°D©a
;

62 
	$∑ã°CÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

63 
‰amesPîBuf„r
,

64 
PaTime°amp
 
outTime
, *
u£rD©a
 )

66 
∑Te°D©a
 *
d©a
 = (∑Te°D©a*)
u£rD©a
;

67 *
out
 = (*)
ouçutBuf„r
;

68 
i
;

69 
föished
 = 0;

70 (Ë
outTime
;

71 (Ë
öputBuf„r
;

73  
i
=0; i<
‰amesPîBuf„r
; i++ )

75 if–
d©a
->
toggÀ
 )

77 *
out
++ = 
d©a
->
söe
[d©a->
À·_pha£
];

78 *
out
++ = 0;

82 *
out
++ = 0;

83 *
out
++ = 
d©a
->
söe
[d©a->
right_pha£
];

86 
d©a
->
À·_pha£
 += 1;

87 if–
d©a
->
À·_pha£
 >
TABLE_SIZE
 ) data->left_phase -= TABLE_SIZE;

88 
d©a
->
right_pha£
 += 3;

89 if–
d©a
->
right_pha£
 >
TABLE_SIZE
 ) data->right_phase -= TABLE_SIZE;

92 if–
d©a
->
cou¡Down
 < 0 )

94 
d©a
->
cou¡Down
 = 
SAMPLE_RATE
;

95 
d©a
->
toggÀ
 = !data->toggle;

97 
d©a
->
cou¡Down
 -
‰amesPîBuf„r
;

99  
föished
;

100 
	}
}

103 
maö
();

104 
	$maö
()

106 
P‹tAudioSåóm
 *
°ªam
;

107 
PaEº‹
 
îr
;

108 
∑Te°D©a
 
d©a
;

109 
i
;

110 
timeout
;

112 
	`¥ötf
("Play differentÅone sine wavesÅhatálternate betweenÜeftándÑight channel.\n");

113 
	`¥ötf
("TheÜowÅone should be onÅheÜeft channel.\n");

116  
i
=0; i<
TABLE_SIZE
; i++ )

118 
d©a
.
söe
[
i
] = (Ë
	`sö
–(()i/()
TABLE_SIZE
Ë* 
M_PI
 * 2. );

120 
d©a
.
À·_pha£
 = d©a.
right_pha£
 = d©a.
toggÀ
 = 0;

121 
d©a
.
cou¡Down
 = 
SAMPLE_RATE
;

123 
îr
 = 
	`Pa_Inôülize
();

124 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

126 
îr
 = 
	`Pa_O≥nSåóm
(

127 &
°ªam
,

128 
∑NoDevi˚
,

130 
∑Flﬂt32
,

131 
NULL
,

132 
	`Pa_GëDeÁu…OuçutDevi˚ID
(),

134 
∑Flﬂt32
,

135 
NULL
,

136 
SAMPLE_RATE
,

137 
FRAMES_PER_BUFFER
,

139 
∑ClùOff
,

140 
∑ã°CÆlback
,

141 &
d©a
 );

142 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

144 
îr
 = 
	`Pa_SèπSåóm
–
°ªam
 );

145 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

147 
	`¥ötf
("Play for several seconds.\n");

148 
timeout
 = 
NUM_SECONDS
 * 4;

149  
timeout
 > 0 )

151 
	`Pa_SÀï
( 300 );

152 
timeout
 -= 1;

155 
îr
 = 
	`Pa_St›Såóm
–
°ªam
 );

156 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

157 
îr
 = 
	`Pa_Clo£Såóm
–
°ªam
 );

158 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

159 
	`Pa_Tîmö©e
();

160 
	`¥ötf
("Test finished.\n");

161  
îr
;

162 
îr‹
:

163 
	`Pa_Tîmö©e
();

164 
	`Ârötf
–
°dîr
, "AnÉrror occured while usingÅheÖortaudio stream\n" );

165 
	`Ârötf
–
°dîr
, "Eº‹Çumbî: %d\n", 
îr
 );

166 
	`Ârötf
–
°dîr
, "Eº‹ mesßge: %s\n", 
	`Pa_GëEº‹Text
–
îr
 ) );

167  
îr
;

168 
	}
}

	@pa_tests/patest_longsine.c

36 
	~<°dio.h
>

37 
	~<m©h.h
>

38 
	~"p‹èudio.h
"

40 
	#SAMPLE_RATE
 (44100)

	)

42 #i‚de‡
M_PI


43 
	#M_PI
 (3.14159265)

	)

46 
	#TABLE_SIZE
 (200)

	)

49 
	msöe
[
TABLE_SIZE
];

50 
	mÀ·_pha£
;

51 
	mright_pha£
;

53 
	t∑Te°D©a
;

59 
	$∑ã°CÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

60 
‰amesPîBuf„r
,

61 
PaTime°amp
 
outTime
, *
u£rD©a
 )

63 
∑Te°D©a
 *
d©a
 = (∑Te°D©a*)
u£rD©a
;

64 *
out
 = (*)
ouçutBuf„r
;

65 
i
;

66 (Ë
outTime
;

67 (Ë
öputBuf„r
;

68  
i
=0; i<
‰amesPîBuf„r
; i++ )

70 *
out
++ = 
d©a
->
söe
[d©a->
À·_pha£
];

71 *
out
++ = 
d©a
->
söe
[d©a->
right_pha£
];

72 
d©a
->
À·_pha£
 += 1;

73 if–
d©a
->
À·_pha£
 >
TABLE_SIZE
 ) data->left_phase -= TABLE_SIZE;

74 
d©a
->
right_pha£
 += 3;

75 if–
d©a
->
right_pha£
 >
TABLE_SIZE
 ) data->right_phase -= TABLE_SIZE;

78 
	}
}

81 
maö
();

82 
	$maö
()

84 
P‹tAudioSåóm
 *
°ªam
;

85 
PaEº‹
 
îr
;

86 
∑Te°D©a
 
d©a
;

87 
i
;

88 
	`¥ötf
("PortAudio Test: output sine wave.\n");

91  
i
=0; i<
TABLE_SIZE
; i++ )

93 
d©a
.
söe
[
i
] = (Ë
	`sö
–(()i/()
TABLE_SIZE
Ë* 
M_PI
 * 2. );

95 
d©a
.
À·_pha£
 = d©a.
right_pha£
 = 0;

97 
îr
 = 
	`Pa_Inôülize
();

98 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

100 
îr
 = 
	`Pa_O≥nSåóm
(

101 &
°ªam
,

102 
∑NoDevi˚
,

104 
∑Flﬂt32
,

105 
NULL
,

106 
	`Pa_GëDeÁu…OuçutDevi˚ID
(),

108 
∑Flﬂt32
,

109 
NULL
,

110 
SAMPLE_RATE
,

113 
∑ClùOff
,

114 
∑ã°CÆlback
,

115 &
d©a
 );

116 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

118 
îr
 = 
	`Pa_SèπSåóm
–
°ªam
 );

119 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

121 
	`¥ötf
("Hit ENTERÅo stopÖrogram.\n");

122 
	`gëch¨
();

124 
îr
 = 
	`Pa_Clo£Såóm
–
°ªam
 );

125 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

126 
	`Pa_Tîmö©e
();

128 
	`¥ötf
("Test finished.\n");

129  
îr
;

131 
îr‹
:

132 
	`Pa_Tîmö©e
();

133 
	`Ârötf
–
°dîr
, "AnÉrror occured while usingÅheÖortaudio stream\n" );

134 
	`Ârötf
–
°dîr
, "Eº‹Çumbî: %d\n", 
îr
 );

135 
	`Ârötf
–
°dîr
, "Eº‹ mesßge: %s\n", 
	`Pa_GëEº‹Text
–
îr
 ) );

136  
îr
;

137 
	}
}

	@pa_tests/patest_many.c

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<m©h.h
>

39 
	~"p‹èudio.h
"

40 
	#NUM_SECONDS
 (1)

	)

41 
	#SAMPLE_RATE
 (44100)

	)

42 #i‚de‡
M_PI


43 
	#M_PI
 (3.14159265)

	)

45 
	#TABLE_SIZE
 (200)

	)

48 
	msöe
[
TABLE_SIZE
];

49 
	mÀ·_pha£
;

50 
	mright_pha£
;

51 
	mßmpsToGo
;

53 
	t∑Te°D©a
;

54 
PaEº‹
 
Te°On˚
( );

55 
∑ã°1CÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

56 
‰amesPîBuf„r
,

57 
PaTime°amp
 
outTime
, *
u£rD©a
 );

62 
	$∑ã°1CÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

63 
‰amesPîBuf„r
,

64 
PaTime°amp
 
outTime
, *
u£rD©a
 )

66 
∑Te°D©a
 *
d©a
 = (∑Te°D©a*)
u£rD©a
;

67 *
out
 = (*)
ouçutBuf„r
;

68 
i
;

69 
föished
 = 0;

70 (Ë
öputBuf„r
;

71 (Ë
outTime
;

73 if–
d©a
->
ßmpsToGo
 < 
‰amesPîBuf„r
 )

77  
i
=0; i<
d©a
->
ßmpsToGo
; i++ )

79 *
out
++ = 
d©a
->
söe
[d©a->
À·_pha£
];

80 *
out
++ = 
d©a
->
söe
[d©a->
right_pha£
];

81 
d©a
->
À·_pha£
 += 1;

82 if–
d©a
->
À·_pha£
 >
TABLE_SIZE
 ) data->left_phase -= TABLE_SIZE;

83 
d©a
->
right_pha£
 += 3;

84 if–
d©a
->
right_pha£
 >
TABLE_SIZE
 ) data->right_phase -= TABLE_SIZE;

87  ; 
i
<
‰amesPîBuf„r
; i++ )

89 *
out
++ = 0;

90 *
out
++ = 0;

93 
föished
 = 1;

97  
i
=0; i<
‰amesPîBuf„r
; i++ )

99 *
out
++ = 
d©a
->
söe
[d©a->
À·_pha£
];

100 *
out
++ = 
d©a
->
söe
[d©a->
right_pha£
];

101 
d©a
->
À·_pha£
 += 1;

102 if–
d©a
->
À·_pha£
 >
TABLE_SIZE
 ) data->left_phase -= TABLE_SIZE;

103 
d©a
->
right_pha£
 += 3;

104 if–
d©a
->
right_pha£
 >
TABLE_SIZE
 ) data->right_phase -= TABLE_SIZE;

106 
d©a
->
ßmpsToGo
 -
‰amesPîBuf„r
;

108  
föished
;

109 
	}
}

111 #ifde‡
MACINTOSH


112 
maö
();

113 
	$maö
()

115 
i
;

116 
PaEº‹
 
îr
;

117 
numLo›s
 = 10;

118 
	`¥ötf
("Lo› %dÅimes.\n", 
numLo›s
 );

119  
i
=0; i<
numLo›s
; i++ )

121 
	`¥ötf
("Lo› %d ouào‡%d.\n", 
i
+1, 
numLo›s
 );

122 
îr
 = 
	`Te°On˚
();

123 if–
îr
 < 0 )  0;

125 
	}
}

127 
maö
(
¨gc
, **
¨gv
);

128 
	$maö
(
¨gc
, **
¨gv
)

130 
PaEº‹
 
îr
;

131 
i
, 
numLo›s
 = 10;

132 if–
¨gc
 > 1 )

134 
numLo›s
 = 
	`©oi
(
¨gv
[1]);

136  
i
=0; i<
numLo›s
; i++ )

138 
	`¥ötf
("Lo› %d ouào‡%d.\n", 
i
+1, 
numLo›s
 );

139 
îr
 = 
	`Te°On˚
();

140 if–
îr
 < 0 )  1;

142 
	`¥ötf
("Test complete.\n");

144 
	}
}

146 
PaEº‹
 
	$Te°On˚
( )

148 
P‹tAudioSåóm
 *
°ªam
;

149 
PaEº‹
 
îr
;

150 
∑Te°D©a
 
d©a
;

151 
i
;

152 
tŸÆSamps
;

154  
i
=0; i<
TABLE_SIZE
; i++ )

156 
d©a
.
söe
[
i
] = (Ë(32767.0 * 
	`sö
–(()i/()
TABLE_SIZE
Ë* 
M_PI
 * 2. ));

158 
d©a
.
À·_pha£
 = d©a.
right_pha£
 = 0;

159 
d©a
.
ßmpsToGo
 = 
tŸÆSamps
 = 
NUM_SECONDS
 * 
SAMPLE_RATE
;

160 
îr
 = 
	`Pa_Inôülize
();

161 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

162 
îr
 = 
	`Pa_O≥nSåóm
(

163 &
°ªam
,

164 
∑NoDevi˚
,

166 
∑I¡16
,

167 
NULL
,

168 
	`Pa_GëDeÁu…OuçutDevi˚ID
(),

170 
∑I¡16
,

171 
NULL
,

172 
SAMPLE_RATE
,

175 
∑ClùOff
,

176 
∑ã°1CÆlback
,

177 &
d©a
 );

178 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

180 
îr
 = 
	`Pa_SèπSåóm
–
°ªam
 );

181 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

182 
	`¥ötf
("Waiting for soundÅo finish.\n");

183 
	`fÊush
(
°dout
);

184 
	`Pa_SÀï
(1000);

185 
îr
 = 
	`Pa_Clo£Såóm
–
°ªam
 );

186 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

187 
	`Pa_Tîmö©e
();

188  
∑NoEº‹
;

189 
îr‹
:

190 
	`Pa_Tîmö©e
();

191 
	`Ârötf
–
°dîr
, "AnÉrror occured while usingÅheÖortaudio stream\n" );

192 
	`Ârötf
–
°dîr
, "Eº‹Çumbî: %d\n", 
îr
 );

193 
	`Ârötf
–
°dîr
, "Eº‹ mesßge: %s\n", 
	`Pa_GëEº‹Text
–
îr
 ) );

194  
îr
;

195 
	}
}

	@pa_tests/patest_maxsines.c

38 
	~<°dio.h
>

39 
	~<m©h.h
>

40 
	~"p‹èudio.h
"

42 
	#MAX_SINES
 (500)

	)

43 
	#MAX_USAGE
 (0.8)

	)

44 
	#SAMPLE_RATE
 (44100)

	)

45 
	#FREQ_TO_PHASE_INC
(
‰eq
Ë(‰eq/()
SAMPLE_RATE
)

	)

47 
	#MIN_PHASE_INC
 
	`FREQ_TO_PHASE_INC
(200.0f)

	)

48 
	#MAX_PHASE_INC
 (
MIN_PHASE_INC
 * (1 << 5))

	)

50 
	#FRAMES_PER_BUFFER
 (512)

	)

51 #i‚de‡
M_PI


52 
	#M_PI
 (3.14159265)

	)

54 
	#TWOPI
 (
M_PI
 * 2.0)

	)

56 
	#TABLE_SIZE
 (512)

	)

58 
	s∑Te°D©a


60 
	mnumSöes
;

61 
	msöe
[
TABLE_SIZE
 + 1];

62 
	mpha£s
[
MAX_SINES
];

64 
	t∑Te°D©a
;

69 
LookupSöe
–
∑Te°D©a
 *
d©a
, 
pha£
 );

70 
	$LookupSöe
–
∑Te°D©a
 *
d©a
, 
pha£
 )

72 
fIndex
 = 
pha£
*
TABLE_SIZE
;

73 
ödex
 = (Ë
fIndex
;

74 
‰a˘
 = 
fIndex
 - 
ödex
;

75 
lo
 = 
d©a
->
söe
[
ödex
];

76 
hi
 = 
d©a
->
söe
[
ödex
+1];

77 
vÆ
 = 
lo
 + 
‰a˘
*(
hi
-lo);

78  
vÆ
;

79 
	}
}

85 
	$∑ã°CÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

86 
‰amesPîBuf„r
,

87 
PaTime°amp
 
outTime
, *
u£rD©a
 )

89 
∑Te°D©a
 *
d©a
 = (∑Te°D©a*)
u£rD©a
;

90 *
out
 = (*)
ouçutBuf„r
;

91 
outSam∂e
;

92 
sˇÀr
;

93 
numF‹SˇÀ
;

94 
i
;

95 
j
;

96 
föished
 = 0;

97 (Ë
outTime
;

98 (Ë
öputBuf„r
;

101 
numF‹SˇÀ
 = 
d©a
->
numSöes
;

102 if–
numF‹SˇÀ
 < 8 )ÇumForScale = 8;

103 
sˇÀr
 = 1.0‡/ 
numF‹SˇÀ
;

105  
i
=0; i<
‰amesPîBuf„r
; i++ )

107 
ouçut
 = 0.0;

108 
pha£Inc
 = 
MIN_PHASE_INC
;

109 
pha£
;

110  
j
=0; j<
d©a
->
numSöes
; j++ )

113 
pha£
 = 
d©a
->
pha£s
[
j
];

114 
pha£
 +
pha£Inc
;

115 if–
pha£
 >= 1.0 )Öhase -= 1.0;

117 
ouçut
 +
	`LookupSöe
(
d©a
, 
pha£
);

118 
d©a
->
pha£s
[
j
] = 
pha£
;

120 
pha£Inc
 *= 1.02f;

121 if–
pha£Inc
 > 
MAX_PHASE_INC
 )Öha£In¯
MIN_PHASE_INC
;

124 
outSam∂e
 = (Ë(
ouçut
 * 
sˇÀr
);

125 *
out
++ = 
outSam∂e
;

126 *
out
++ = 
outSam∂e
;

128  
föished
;

129 
	}
}

132 
maö
();

133 
	$maö
()

135 
i
;

136 
P‹tAudioSåóm
 *
°ªam
;

137 
PaEº‹
 
îr
;

138 
∑Te°D©a
 
d©a
 = {0};

139 
lﬂd
;

140 
	`¥ötf
("P‹tAudiÿTe°: ouçuàsöêwave. SR = %d, BufSizê%d\n", 
SAMPLE_RATE
, 
FRAMES_PER_BUFFER
);

143  
i
=0; i<
TABLE_SIZE
; i++ )

145 
d©a
.
söe
[
i
] = (Ë
	`sö
–(()i/()
TABLE_SIZE
Ë* 
M_PI
 * 2. );

147 
d©a
.
söe
[
TABLE_SIZE
] = data.sine[0];

149 
îr
 = 
	`Pa_Inôülize
();

150 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

151 
îr
 = 
	`Pa_O≥nSåóm
(

152 &
°ªam
,

153 
∑NoDevi˚
,

155 
∑Flﬂt32
,

156 
NULL
,

157 
	`Pa_GëDeÁu…OuçutDevi˚ID
(),

159 
∑Flﬂt32
,

160 
NULL
,

161 
SAMPLE_RATE
,

162 
FRAMES_PER_BUFFER
,

164 
∑ClùOff
,

165 
∑ã°CÆlback
,

166 &
d©a
 );

167 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

168 
îr
 = 
	`Pa_SèπSåóm
–
°ªam
 );

169 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

174 
d©a
.
numSöes
++;

175 
	`Pa_SÀï
( 200 );

177 
lﬂd
 = 
	`Pa_GëCPULﬂd
–
°ªam
 );

178 
	`¥ötf
("numSöe†%d, CPUÜﬂd = %f\n", 
d©a
.
numSöes
, 
lﬂd
 );

179 
	`fÊush
–
°dout
 );

181  (
lﬂd
 < 
MAX_USAGE
Ë&& (
d©a
.
numSöes
 < 
MAX_SINES
) );

183 
îr
 = 
	`Pa_St›Såóm
–
°ªam
 );

184 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

185 
îr
 = 
	`Pa_Clo£Såóm
–
°ªam
 );

186 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

187 
	`Pa_Tîmö©e
();

188 
	`¥ötf
("Test finished.\n");

189  
îr
;

190 
îr‹
:

191 
	`Pa_Tîmö©e
();

192 
	`Ârötf
–
°dîr
, "AnÉrror occured while usingÅheÖortaudio stream\n" );

193 
	`Ârötf
–
°dîr
, "Eº‹Çumbî: %d\n", 
îr
 );

194 
	`Ârötf
–
°dîr
, "Eº‹ mesßge: %s\n", 
	`Pa_GëEº‹Text
–
îr
 ) );

195  
îr
;

196 
	}
}

	@pa_tests/patest_pink.c

45 
	~<°dio.h
>

46 
	~<m©h.h
>

47 
	~"p‹èudio.h
"

48 
	#PINK_MAX_RANDOM_ROWS
 (30)

	)

49 
	#PINK_RANDOM_BITS
 (24)

	)

50 
	#PINK_RANDOM_SHIFT
 ((()*8)-
PINK_RANDOM_BITS
)

	)

53 
	mpök_Rows
[
PINK_MAX_RANDOM_ROWS
];

54 
	mpök_Ru¬ögSum
;

55 
	mpök_Index
;

56 
	mpök_IndexMask
;

57 
	mpök_Sˇœr
;

59 
	tPökNoi£
;

61 
Gíî©eR™domNumbî
( );

62 
InôülizePökNoi£
–
PökNoi£
 *
pök
, 
numRows
 );

63 
Gíî©ePökNoi£
–
PökNoi£
 *
pök
 );

66 
	$Gíî©eR™domNumbî
( )

69 
øndSìd
 = 22222;

70 
øndSìd
 = (randSeed * 196314165) + 907633515;

71  
øndSìd
;

72 
	}
}

75 
	$InôülizePökNoi£
–
PökNoi£
 *
pök
, 
numRows
 )

77 
i
;

78 
pmax
;

79 
pök
->
pök_Index
 = 0;

80 
pök
->
pök_IndexMask
 = (1<<
numRows
) - 1;

82 
pmax
 = (
numRows
 + 1Ë* (1<<(
PINK_RANDOM_BITS
-1));

83 
pök
->
pök_Sˇœr
 = 1.0‡/ 
pmax
;

85  
i
=0; i<
numRows
; i++ ) 
pök
->
pök_Rows
[i] = 0;

86 
pök
->
pök_Ru¬ögSum
 = 0;

87 
	}
}

88 
	#PINK_MEASURE


	)

89 #ifde‡
PINK_MEASURE


90 
	gpökMax
 = -999.0;

91 
	gpökMö
 = 999.0;

94 
	$Gíî©ePökNoi£
–
PökNoi£
 *
pök
 )

96 
√wR™dom
;

97 
sum
;

98 
ouçut
;

100 
pök
->
pök_Index
 = (pök->pök_Index + 1Ë&Öök->
pök_IndexMask
;

102 if–
pök
->
pök_Index
 != 0 )

106 
numZîos
 = 0;

107 
n
 = 
pök
->
pök_Index
;

108  (
n
 & 1) == 0 )

110 
n
 =Ç >> 1;

111 
numZîos
++;

117 
pök
->
pök_Ru¬ögSum
 -pök->
pök_Rows
[
numZîos
];

118 
√wR™dom
 = (()
	`Gíî©eR™domNumbî
()Ë>> 
PINK_RANDOM_SHIFT
;

119 
pök
->
pök_Ru¬ögSum
 +
√wR™dom
;

120 
pök
->
pök_Rows
[
numZîos
] = 
√wR™dom
;

124 
√wR™dom
 = (()
	`Gíî©eR™domNumbî
()Ë>> 
PINK_RANDOM_SHIFT
;

125 
sum
 = 
pök
->
pök_Ru¬ögSum
 + 
√wR™dom
;

127 
ouçut
 = 
pök
->
pök_Sˇœr
 * 
sum
;

128 #ifde‡
PINK_MEASURE


130 if–
ouçut
 > 
pökMax
 )ÖinkMax = output;

131 if–
ouçut
 < 
pökMö
 )ÖinkMin = output;

133  
ouçut
;

134 
	}
}

136 
	#PINK_TEST


	)

137 #ifde‡
PINK_TEST


141 
PökNoi£
 
	mÀ·Pök
;

142 
PökNoi£
 
	mrightPök
;

143 
	mßmpsToGo
;

145 
	t∑Te°D©a
;

150 
	$∑ã°CÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

151 
‰amesPîBuf„r
,

152 
PaTime°amp
 
outTime
, *
u£rD©a
 )

154 
föished
;

155 
i
;

156 
numFømes
;

157 
∑Te°D©a
 *
d©a
 = (∑Te°D©a*)
u£rD©a
;

158 *
out
 = (*)
ouçutBuf„r
;

159 (Ë
öputBuf„r
;

160 (Ë
outTime
;

163 if–
d©a
->
ßmpsToGo
 < 
‰amesPîBuf„r
 )

165 
numFømes
 = 
d©a
->
ßmpsToGo
;

166 
föished
 = 1;

170 
numFømes
 = 
‰amesPîBuf„r
;

171 
föished
 = 0;

173  
i
=0; i<
numFømes
; i++ )

175 *
out
++ = 
	`Gíî©ePökNoi£
–&
d©a
->
À·Pök
 );

176 *
out
++ = 
	`Gíî©ePökNoi£
–&
d©a
->
rightPök
 );

178 
d©a
->
ßmpsToGo
 -
numFømes
;

179  
föished
;

180 
	}
}

182 
maö
();

183 
	$maö
()

185 
P‹tAudioSåóm
 *
°ªam
;

186 
PaEº‹
 
îr
;

187 
∑Te°D©a
 
d©a
;

188 
tŸÆSamps
;

190 
	`InôülizePökNoi£
–&
d©a
.
À·Pök
, 12 );

191 
	`InôülizePökNoi£
–&
d©a
.
rightPök
, 16 );

194 
i
;

195 
pök
;

196  
i
=0; i<20; i++ )

198 
pök
 = 
	`Gíî©ePökNoi£
–&
d©a
.
À·Pök
 );

199 
	`¥ötf
("Pök = %f\n", 
pök
 );

202 
d©a
.
ßmpsToGo
 = 
tŸÆSamps
 = 8*44100;

203 
îr
 = 
	`Pa_Inôülize
();

204 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

206 
îr
 = 
	`Pa_O≥nSåóm
(

207 &
°ªam
,

208 
∑NoDevi˚
,

210 
∑Flﬂt32
,

211 
NULL
,

212 
	`Pa_GëDeÁu…OuçutDevi˚ID
(),

214 
∑Flﬂt32
,

215 
NULL
,

219 
∑ClùOff
,

220 
∑ã°CÆlback
,

221 &
d©a
 );

222 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

224 
îr
 = 
	`Pa_SèπSåóm
–
°ªam
 );

225 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

226 
	`¥ötf
("Waiting for soundÅo finish.\n");

227  
	`Pa_SåómA˘ive
–
°ªam
 ) )

229 
	`Pa_SÀï
(100);

231 
îr
 = 
	`Pa_Clo£Såóm
–
°ªam
 );

232 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

233 #ifde‡
PINK_MEASURE


234 
	`¥ötf
("Pök mö = %f, max = %f\n", 
pökMö
, 
pökMax
 );

236 
	`Pa_Tîmö©e
();

238 
îr‹
:

239 
	`Pa_Tîmö©e
();

240 
	`Ârötf
–
°dîr
, "AnÉrror occured while usingÅheÖortaudio stream\n" );

241 
	`Ârötf
–
°dîr
, "Eº‹Çumbî: %d\n", 
îr
 );

242 
	`Ârötf
–
°dîr
, "Eº‹ mesßge: %s\n", 
	`Pa_GëEº‹Text
–
îr
 ) );

244 
	}
}

	@pa_tests/patest_record.c

38 
	~<°dio.h
>

39 
	~<°dlib.h
>

40 
	~"p‹èudio.h
"

43 
	#SAMPLE_RATE
 (22050)

	)

44 
	#NUM_SECONDS
 (5)

	)

45 
	#NUM_CHANNELS
 (2)

	)

47 
	#DITHER_FLAG
 (0Ë

	)

48 
	#FRAMES_PER_BUFFER
 (1024)

	)

52 
	#PA_SAMPLE_TYPE
 
∑Flﬂt32


	)

53 
	tSAMPLE
;

54 
	#SAMPLE_SILENCE
 (0.0f)

	)

56 
	#PA_SAMPLE_TYPE
 
∑I¡16


	)

57 
	tSAMPLE
;

58 
	#SAMPLE_SILENCE
 (0)

	)

60 
	#PA_SAMPLE_TYPE
 
∑I¡8


	)

61 
	tSAMPLE
;

62 
	#SAMPLE_SILENCE
 (0)

	)

64 
	#PA_SAMPLE_TYPE
 
∑UI¡8


	)

65 
	tSAMPLE
;

66 
	#SAMPLE_SILENCE
 (128)

	)

72 
	m‰ameIndex
;

73 
	mmaxFømeIndex
;

74 
SAMPLE
 *
	mªc‹dedSam∂es
;

76 
	t∑Te°D©a
;

81 
	$ªc‹dCÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

82 
‰amesPîBuf„r
,

83 
PaTime°amp
 
outTime
, *
u£rD©a
 )

85 
∑Te°D©a
 *
d©a
 = (∑Te°D©a*)
u£rD©a
;

86 
SAMPLE
 *
Ωå
 = (SAMPLE*)
öputBuf„r
;

87 
SAMPLE
 *
w±r
 = &
d©a
->
ªc‹dedSam∂es
[d©a->
‰ameIndex
 * 
NUM_CHANNELS
];

88 
‰amesToCÆc
;

89 
i
;

90 
föished
;

91 
‰amesLe·
 = 
d©a
->
maxFømeIndex
 - d©a->
‰ameIndex
;

93 (Ë
ouçutBuf„r
;

94 (Ë
outTime
;

96 if–
‰amesLe·
 < 
‰amesPîBuf„r
 )

98 
‰amesToCÆc
 = 
‰amesLe·
;

99 
föished
 = 1;

103 
‰amesToCÆc
 = 
‰amesPîBuf„r
;

104 
föished
 = 0;

106 if–
öputBuf„r
 =
NULL
 )

108  
i
=0; i<
‰amesToCÆc
; i++ )

110 *
w±r
++ = 
SAMPLE_SILENCE
;

111 if–
NUM_CHANNELS
 =2 ) *
w±r
++ = 
SAMPLE_SILENCE
;

116  
i
=0; i<
‰amesToCÆc
; i++ )

118 *
w±r
++ = *
Ωå
++;

119 if–
NUM_CHANNELS
 =2 ) *
w±r
++ = *
Ωå
++;

122 
d©a
->
‰ameIndex
 +
‰amesToCÆc
;

123  
föished
;

124 
	}
}

130 
	$∂ayCÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

131 
‰amesPîBuf„r
,

132 
PaTime°amp
 
outTime
, *
u£rD©a
 )

134 
∑Te°D©a
 *
d©a
 = (∑Te°D©a*)
u£rD©a
;

135 
SAMPLE
 *
Ωå
 = &
d©a
->
ªc‹dedSam∂es
[d©a->
‰ameIndex
 * 
NUM_CHANNELS
];

136 
SAMPLE
 *
w±r
 = (SAMPLE*)
ouçutBuf„r
;

137 
i
;

138 
föished
;

139 
‰amesLe·
 = 
d©a
->
maxFømeIndex
 - d©a->
‰ameIndex
;

140 (Ë
öputBuf„r
;

141 (Ë
outTime
;

143 if–
‰amesLe·
 < 
‰amesPîBuf„r
 )

146  
i
=0; i<
‰amesLe·
; i++ )

148 *
w±r
++ = *
Ωå
++;

149 if–
NUM_CHANNELS
 =2 ) *
w±r
++ = *
Ωå
++;

151  ; 
i
<
‰amesPîBuf„r
; i++ )

153 *
w±r
++ = 0;

154 if–
NUM_CHANNELS
 =2 ) *
w±r
++ = 0;

156 
d©a
->
‰ameIndex
 +
‰amesLe·
;

157 
föished
 = 1;

161  
i
=0; i<
‰amesPîBuf„r
; i++ )

163 *
w±r
++ = *
Ωå
++;

164 if–
NUM_CHANNELS
 =2 ) *
w±r
++ = *
Ωå
++;

166 
d©a
->
‰ameIndex
 +
‰amesPîBuf„r
;

167 
föished
 = 0;

169  
föished
;

170 
	}
}

173 
maö
();

174 
	$maö
()

176 
P‹tAudioSåóm
 *
°ªam
;

177 
PaEº‹
 
îr
;

178 
∑Te°D©a
 
d©a
;

179 
i
;

180 
tŸÆFømes
;

181 
numSam∂es
;

182 
numByãs
;

183 
SAMPLE
 
max
, 
avîage
, 
vÆ
;

184 
	`¥ötf
("∑ã°_ªc‹d.c\n"); 
	`fÊush
(
°dout
);

186 
d©a
.
maxFømeIndex
 = 
tŸÆFømes
 = 
NUM_SECONDS
 * 
SAMPLE_RATE
;

187 
d©a
.
‰ameIndex
 = 0;

188 
numSam∂es
 = 
tŸÆFømes
 * 
NUM_CHANNELS
;

190 
numByãs
 = 
numSam∂es
 * (
SAMPLE
);

191 
d©a
.
ªc‹dedSam∂es
 = (
SAMPLE
 *Ë
	`mÆloc
–
numByãs
 );

192 if–
d©a
.
ªc‹dedSam∂es
 =
NULL
 )

194 
	`¥ötf
("CouldÇotállocateÑecordárray.\n");

195 
	`exô
(1);

197  
i
=0; i<
numSam∂es
; i++ ) 
d©a
.
ªc‹dedSam∂es
[i] = 0;

199 
îr
 = 
	`Pa_Inôülize
();

200 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

203 
îr
 = 
	`Pa_O≥nSåóm
(

204 &
°ªam
,

205 
	`Pa_GëDeÁu…I≈utDevi˚ID
(),

206 
NUM_CHANNELS
,

207 
PA_SAMPLE_TYPE
,

208 
NULL
,

209 
∑NoDevi˚
,

211 
PA_SAMPLE_TYPE
,

212 
NULL
,

213 
SAMPLE_RATE
,

214 
FRAMES_PER_BUFFER
,

217 
ªc‹dCÆlback
,

218 &
d©a
 );

219 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

221 
îr
 = 
	`Pa_SèπSåóm
–
°ªam
 );

222 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

223 
	`¥ötf
("NowÑec‹dög!!\n"); 
	`fÊush
(
°dout
);

225  
	`Pa_SåómA˘ive
–
°ªam
 ) )

227 
	`Pa_SÀï
(1000);

228 
	`¥ötf
("ödex = %d\n", 
d©a
.
‰ameIndex
 ); 
	`fÊush
(
°dout
);

231 
îr
 = 
	`Pa_Clo£Såóm
–
°ªam
 );

232 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

235 
max
 = 0;

236 
avîage
 = 0;

237  
i
=0; i<
numSam∂es
; i++ )

239 
vÆ
 = 
d©a
.
ªc‹dedSam∂es
[
i
];

240 if–
vÆ
 < 0 ) val = -val;

241 if–
vÆ
 > 
max
 )

243 
max
 = 
vÆ
;

245 
avîage
 +
vÆ
;

248 
avîage
 =ávîagê/ 
numSam∂es
;

250 if–
PA_SAMPLE_TYPE
 =
∑Flﬂt32
 )

252 
	`¥ötf
("ßm∂êmaxám∂ôudê%f\n", 
max
 );

253 
	`¥ötf
("ßm∂êavîagê%f\n", 
avîage
 );

257 
	`¥ötf
("ßm∂êmaxám∂ôudê%d\n", 
max
 );

258 
	`¥ötf
("ßm∂êavîagê%d\n", 
avîage
 );

264 
FILE
 *
fid
;

265 
fid
 = 
	`f›í
("recorded.raw", "wb");

266 if–
fid
 =
NULL
 )

268 
	`¥ötf
("CouldÇot open file.");

272 
	`fwrôe
–
d©a
.
ªc‹dedSam∂es
, 
NUM_CHANNELS
 * (
SAMPLE
), 
tŸÆFømes
, 
fid
 );

273 
	`f˛o£
–
fid
 );

274 
	`¥ötf
("Wrote dataÅo 'recorded.raw'\n");

280 
d©a
.
‰ameIndex
 = 0;

281 
	`¥ötf
("BegöÖœyback.\n"); 
	`fÊush
(
°dout
);

282 
îr
 = 
	`Pa_O≥nSåóm
(

283 &
°ªam
,

284 
∑NoDevi˚
,

286 
PA_SAMPLE_TYPE
,

287 
NULL
,

288 
	`Pa_GëDeÁu…OuçutDevi˚ID
(),

289 
NUM_CHANNELS
,

290 
PA_SAMPLE_TYPE
,

291 
NULL
,

292 
SAMPLE_RATE
,

293 
FRAMES_PER_BUFFER
,

295 
∑ClùOff
,

296 
∂ayCÆlback
,

297 &
d©a
 );

298 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

300 if–
°ªam
 )

302 
îr
 = 
	`Pa_SèπSåóm
–
°ªam
 );

303 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

304 
	`¥ötf
("Waôög f‹ÖœybackÅÿföish.\n"); 
	`fÊush
(
°dout
);

306  
	`Pa_SåómA˘ive
–
°ªam
 ) ) 
	`Pa_SÀï
(100);

308 
îr
 = 
	`Pa_Clo£Såóm
–
°ªam
 );

309 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

310 
	`¥ötf
("D⁄e.\n"); 
	`fÊush
(
°dout
);

312 
	`‰ì
–
d©a
.
ªc‹dedSam∂es
 );

314 
	`Pa_Tîmö©e
();

317 
îr‹
:

318 
	`Pa_Tîmö©e
();

319 
	`Ârötf
–
°dîr
, "AnÉrror occured while usingÅheÖortaudio stream\n" );

320 
	`Ârötf
–
°dîr
, "Eº‹Çumbî: %d\n", 
îr
 );

321 
	`Ârötf
–
°dîr
, "Eº‹ mesßge: %s\n", 
	`Pa_GëEº‹Text
–
îr
 ) );

323 
	}
}

	@pa_tests/patest_ringmix.c

3 
	~"°dio.h
"

4 
	~"p‹èudio.h
"

6 
	$myCÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

7 
‰amesPîBuf„r
, 
PaTime°amp
 
outTime
, *
u£rD©a
 )

9 *
out
 = (*Ë
ouçutBuf„r
;

10 *
ö
 = (*Ë
öputBuf„r
;

11 
À·I≈ut
, 
rightI≈ut
;

12 
i
;

13 if–
öputBuf„r
 =
NULL
 )  0;

15  
i
=0; i<
‰amesPîBuf„r
; i++ )

17 
À·I≈ut
 = *
ö
++;

18 
rightI≈ut
 = *
ö
++;

19 *
out
++ = 
À·I≈ut
 * 
rightI≈ut
;

20 *
out
++ = 0.5‡* (
À·I≈ut
 + 
rightI≈ut
);

23 
	}
}

25 
	$maö
()

27 
P‹tAudioSåóm
 *
°ªam
;

28 
	`Pa_Inôülize
();

29 
	`Pa_O≥nDeÁu…Såóm
(

30 &
°ªam
,

32 
∑Flﬂt32
, 44100.0,

34 
myCÆlback
, 
NULL
 );

35 
	`Pa_SèπSåóm
–
°ªam
 );

36 
	`Pa_SÀï
( 10000 );

37 
	`Pa_St›Såóm
–
°ªam
 );

38 
	`Pa_Clo£Såóm
–
°ªam
 );

39 
	`Pa_Tîmö©e
();

41 
	}
}

	@pa_tests/patest_saw.c

36 
	~<°dio.h
>

37 
	~<m©h.h
>

38 
	~"p‹èudio.h
"

39 
	#NUM_SECONDS
 (4)

	)

40 
	#SAMPLE_RATE
 (44100)

	)

43 
	mÀ·_pha£
;

44 
	mright_pha£
;

46 
	t∑Te°D©a
;

51 
	$∑ã°CÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

52 
‰amesPîBuf„r
,

53 
PaTime°amp
 
outTime
, *
u£rD©a
 )

56 
∑Te°D©a
 *
d©a
 = (∑Te°D©a*)
u£rD©a
;

57 *
out
 = (*)
ouçutBuf„r
;

58 
i
;

59 (Ë
outTime
;

60 (Ë
öputBuf„r
;

62  
i
=0; i<
‰amesPîBuf„r
; i++ )

64 *
out
++ = 
d©a
->
À·_pha£
;

65 *
out
++ = 
d©a
->
right_pha£
;

67 
d©a
->
À·_pha£
 += 0.01f;

69 if–
d©a
->
À·_pha£
 >= 1.0f ) data->left_phase -= 2.0f;

71 
d©a
->
right_pha£
 += 0.03f;

72 if–
d©a
->
right_pha£
 >= 1.0f ) data->right_phase -= 2.0f;

75 
	}
}

77 
∑Te°D©a
 
	gd©a
;

78 
maö
();

79 
	$maö
()

81 
P‹tAudioSåóm
 *
°ªam
;

82 
PaEº‹
 
îr
;

83 
	`¥ötf
("PortAudio Test: output sawtooth wave.\n");

85 
d©a
.
À·_pha£
 = d©a.
right_pha£
 = 0.0;

87 
îr
 = 
	`Pa_Inôülize
();

88 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

90 
îr
 = 
	`Pa_O≥nDeÁu…Såóm
(

91 &
°ªam
,

94 
∑Flﬂt32
,

95 
SAMPLE_RATE
,

98 
∑ã°CÆlback
,

99 &
d©a
 );

100 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

101 
îr
 = 
	`Pa_SèπSåóm
–
°ªam
 );

102 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

104 
	`Pa_SÀï
(
NUM_SECONDS
*1000);

105 
îr
 = 
	`Pa_St›Såóm
–
°ªam
 );

106 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

107 
îr
 = 
	`Pa_Clo£Såóm
–
°ªam
 );

108 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

109 
	`Pa_Tîmö©e
();

110 
	`¥ötf
("Test finished.\n");

111  
îr
;

112 
îr‹
:

113 
	`Pa_Tîmö©e
();

114 
	`Ârötf
–
°dîr
, "AnÉrror occured while usingÅheÖortaudio stream\n" );

115 
	`Ârötf
–
°dîr
, "Eº‹Çumbî: %d\n", 
îr
 );

116 
	`Ârötf
–
°dîr
, "Eº‹ mesßge: %s\n", 
	`Pa_GëEº‹Text
–
îr
 ) );

117  
îr
;

118 
	}
}

	@pa_tests/patest_sine.c

38 
	~<°dio.h
>

39 
	~<m©h.h
>

40 
	~"p‹èudio.h
"

42 
	#NUM_SECONDS
 (10)

	)

43 
	#SAMPLE_RATE
 (44100)

	)

44 
	#AMPLITUDE
 (0.9)

	)

45 
	#FRAMES_PER_BUFFER
 (64)

	)

46 
	#OUTPUT_DEVICE
 
	`Pa_GëDeÁu…OuçutDevi˚ID
()

	)

49 #i‚de‡
M_PI


50 
	#M_PI
 (3.14159265)

	)

53 
	#TABLE_SIZE
 (200)

	)

56 
	msöe
[
TABLE_SIZE
];

57 
	mÀ·_pha£
;

58 
	mright_pha£
;

60 
	t∑Te°D©a
;

66 
	$∑ã°CÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

67 
‰amesPîBuf„r
,

68 
PaTime°amp
 
outTime
, *
u£rD©a
 )

70 
∑Te°D©a
 *
d©a
 = (∑Te°D©a*)
u£rD©a
;

71 *
out
 = (*)
ouçutBuf„r
;

72 
i
;

73 
föished
 = 0;

74 (Ë
outTime
;

75 (Ë
öputBuf„r
;

76  
i
=0; i<
‰amesPîBuf„r
; i++ )

78 *
out
++ = 
d©a
->
söe
[d©a->
À·_pha£
];

79 *
out
++ = 
d©a
->
söe
[d©a->
right_pha£
];

80 
d©a
->
À·_pha£
 += 1;

81 if–
d©a
->
À·_pha£
 >
TABLE_SIZE
 ) data->left_phase -= TABLE_SIZE;

82 
d©a
->
right_pha£
 += 3;

83 if–
d©a
->
right_pha£
 >
TABLE_SIZE
 ) data->right_phase -= TABLE_SIZE;

85  
föished
;

86 
	}
}

89 
maö
();

90 
	$maö
()

92 
P‹tAudioSåóm
 *
°ªam
;

93 
PaEº‹
 
îr
;

94 
∑Te°D©a
 
d©a
;

95 
i
;

96 
	`¥ötf
("PortAudio Test: output sine wave. SR = %d, BufSize = %d, devID = %d\n",

97 
SAMPLE_RATE
, 
FRAMES_PER_BUFFER
, 
OUTPUT_DEVICE
);

99  
i
=0; i<
TABLE_SIZE
; i++ )

101 
d©a
.
söe
[
i
] = (Ë(
AMPLITUDE
 * 
	`sö
–(()i/()
TABLE_SIZE
Ë* 
M_PI
 * 2. ));

103 
d©a
.
À·_pha£
 = d©a.
right_pha£
 = 0;

104 
îr
 = 
	`Pa_Inôülize
();

105 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

106 
îr
 = 
	`Pa_O≥nSåóm
(

107 &
°ªam
,

108 
∑NoDevi˚
,

110 
∑Flﬂt32
,

111 
NULL
,

112 
OUTPUT_DEVICE
,

114 
∑Flﬂt32
,

115 
NULL
,

116 
SAMPLE_RATE
,

117 
FRAMES_PER_BUFFER
,

119 
∑ClùOff
,

120 
∑ã°CÆlback
,

121 &
d©a
 );

122 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

123 
îr
 = 
	`Pa_SèπSåóm
–
°ªam
 );

124 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

125 
	`¥ötf
("Pœy f‹ %d sec⁄ds.\n", 
NUM_SECONDS
 ); 
	`fÊush
(
°dout
);

126 
	`Pa_SÀï
–
NUM_SECONDS
 * 1000 );

128 
îr
 = 
	`Pa_St›Såóm
–
°ªam
 );

129 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

130 
îr
 = 
	`Pa_Clo£Såóm
–
°ªam
 );

131 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

132 
	`Pa_Tîmö©e
();

133 
	`¥ötf
("Test finished.\n");

134  
îr
;

135 
îr‹
:

136 
	`Pa_Tîmö©e
();

137 
	`Ârötf
–
°dîr
, "AnÉrror occured while usingÅheÖortaudio stream\n" );

138 
	`Ârötf
–
°dîr
, "Eº‹Çumbî: %d\n", 
îr
 );

139 
	`Ârötf
–
°dîr
, "Eº‹ mesßge: %s\n", 
	`Pa_GëEº‹Text
–
îr
 ) );

140  
îr
;

141 
	}
}

	@pa_tests/patest_sine8.c

37 
	~<°dio.h
>

38 
	~<m©h.h
>

39 
	~"p‹èudio.h
"

40 
	#NUM_SECONDS
 (8)

	)

41 
	#SAMPLE_RATE
 (44100)

	)

42 
	#TEST_UNSIGNED
 (1)

	)

43 #i‡
TEST_UNSIGNED


44 
	#TEST_FORMAT
 
∑UI¡8


	)

46 
	#TEST_FORMAT
 
∑I¡8


	)

48 #i‚de‡
M_PI


49 
	#M_PI
 (3.14159265)

	)

51 
	#TABLE_SIZE
 (200)

	)

54 #i‡
TEST_UNSIGNED


55 
	msöe
[
TABLE_SIZE
];

57 
	msöe
[
TABLE_SIZE
];

59 
	mÀ·_pha£
;

60 
	mright_pha£
;

61 
	m‰amesToGo
;

63 
	t∑Te°D©a
;

68 
	$∑ã°CÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

69 
‰amesPîBuf„r
,

70 
PaTime°amp
 
outTime
, *
u£rD©a
 )

72 
∑Te°D©a
 *
d©a
 = (∑Te°D©a*)
u£rD©a
;

73 *
out
 = (*)
ouçutBuf„r
;

74 
i
;

75 
‰amesToCÆc
;

76 
föished
 = 0;

77 (Ë
outTime
;

78 (Ë
öputBuf„r
;

80 if–
d©a
->
‰amesToGo
 < 
‰amesPîBuf„r
 )

82 
‰amesToCÆc
 = 
d©a
->
‰amesToGo
;

83 
d©a
->
‰amesToGo
 = 0;

84 
föished
 = 1;

88 
‰amesToCÆc
 = 
‰amesPîBuf„r
;

89 
d©a
->
‰amesToGo
 -
‰amesPîBuf„r
;

92  
i
=0; i<
‰amesToCÆc
; i++ )

94 *
out
++ = 
d©a
->
söe
[d©a->
À·_pha£
];

95 *
out
++ = 
d©a
->
söe
[d©a->
right_pha£
];

96 
d©a
->
À·_pha£
 += 1;

97 if–
d©a
->
À·_pha£
 >
TABLE_SIZE
 ) data->left_phase -= TABLE_SIZE;

98 
d©a
->
right_pha£
 += 3;

99 if–
d©a
->
right_pha£
 >
TABLE_SIZE
 ) data->right_phase -= TABLE_SIZE;

102  ; 
i
<()
‰amesPîBuf„r
; i++ )

104 #i‡
TEST_UNSIGNED


105 *
out
++ = () 0x80;

106 *
out
++ = () 0x80;

108 *
out
++ = 0;

109 *
out
++ = 0;

113  
föished
;

114 
	}
}

116 
maö
();

117 
	$maö
()

119 
P‹tAudioSåóm
 *
°ªam
;

120 
PaEº‹
 
îr
;

121 
∑Te°D©a
 
d©a
;

122 
i
;

123 
tŸÆSamps
;

124 #i‡
TEST_UNSIGNED


125 
	`¥ötf
("PortAudio Test: output UNsigned 8 bit sine wave.\n");

127 
	`¥ötf
("PortAudio Test: output signed 8 bit sine wave.\n");

130  
i
=0; i<
TABLE_SIZE
; i++ )

132 
d©a
.
söe
[
i
] = (Ë(127.0 * 
	`sö
–(()i/()
TABLE_SIZE
Ë* 
M_PI
 * 2. ));

133 #i‡
TEST_UNSIGNED


134 
d©a
.
söe
[
i
] += () 0x80;

138 
d©a
.
À·_pha£
 = d©a.
right_pha£
 = 0;

139 
d©a
.
‰amesToGo
 = 
tŸÆSamps
 = 
NUM_SECONDS
 * 
SAMPLE_RATE
;

140 
îr
 = 
	`Pa_Inôülize
();

141 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

142 
îr
 = 
	`Pa_O≥nSåóm
(

143 &
°ªam
,

144 
∑NoDevi˚
,

146 
TEST_FORMAT
,

147 
NULL
,

148 
	`Pa_GëDeÁu…OuçutDevi˚ID
(),

150 
TEST_FORMAT
,

151 
NULL
,

152 
SAMPLE_RATE
,

155 
∑ClùOff
,

156 
∑ã°CÆlback
,

157 &
d©a
 );

158 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

159 
îr
 = 
	`Pa_SèπSåóm
–
°ªam
 );

160 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

162  
	`Pa_SåómTime
–
°ªam
 ) < (
tŸÆSamps
/2ËË
	`Pa_SÀï
(10);

164 
îr
 = 
	`Pa_St›Såóm
–
°ªam
 );

165 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

166 
	`¥ötf
("Pause for 2 seconds.\n");

167 
	`Pa_SÀï
( 2000 );

169 
îr
 = 
	`Pa_SèπSåóm
–
°ªam
 );

170 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

171 
	`¥ötf
("Waiting for soundÅo finish.\n");

172  
	`Pa_SåómA˘ive
–
°ªam
 ) ) 
	`Pa_SÀï
(10);

173 
îr
 = 
	`Pa_Clo£Såóm
–
°ªam
 );

174 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

175 
	`Pa_Tîmö©e
();

176 
	`¥ötf
("Test finished.\n");

177  
îr
;

178 
îr‹
:

179 
	`Pa_Tîmö©e
();

180 
	`Ârötf
–
°dîr
, "AnÉrror occured while usingÅheÖortaudio stream\n" );

181 
	`Ârötf
–
°dîr
, "Eº‹Çumbî: %d\n", 
îr
 );

182 
	`Ârötf
–
°dîr
, "Eº‹ mesßge: %s\n", 
	`Pa_GëEº‹Text
–
îr
 ) );

183  
îr
;

184 
	}
}

	@pa_tests/patest_sine_time.c

40 
	~<°dio.h
>

41 
	~<m©h.h
>

42 
	~"p‹èudio.h
"

43 
	#NUM_SECONDS
 (8)

	)

44 
	#SAMPLE_RATE
 (44100)

	)

45 
	#FRAMES_PER_BUFFER
 (64)

	)

46 
	#NUM_BUFFERS
 (0)

	)

47 #i‚de‡
M_PI


48 
	#M_PI
 (3.14159265)

	)

50 
	#TABLE_SIZE
 (200)

	)

53 
	msöe
[
TABLE_SIZE
];

54 
	mÀ·_pha£
;

55 
	mright_pha£
;

56 
	m‰amesToGo
;

57 vﬁ©ûê
PaTime°amp
 
	moutTime
;

59 
	t∑Te°D©a
;

64 
	$∑ã°CÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

65 
‰amesPîBuf„r
,

66 
PaTime°amp
 
outTime
, *
u£rD©a
 )

68 
∑Te°D©a
 *
d©a
 = (∑Te°D©a*)
u£rD©a
;

69 *
out
 = (*)
ouçutBuf„r
;

70 
i
;

71 
‰amesToCÆc
;

72 
föished
 = 0;

73 (Ë
outTime
;

74 (Ë
öputBuf„r
;

76 
d©a
->
outTime
 = outTime;

78 if–
d©a
->
‰amesToGo
 < 
‰amesPîBuf„r
 )

80 
‰amesToCÆc
 = 
d©a
->
‰amesToGo
;

81 
d©a
->
‰amesToGo
 = 0;

82 
föished
 = 1;

86 
‰amesToCÆc
 = 
‰amesPîBuf„r
;

87 
d©a
->
‰amesToGo
 -
‰amesPîBuf„r
;

90  
i
=0; i<
‰amesToCÆc
; i++ )

92 *
out
++ = 
d©a
->
söe
[d©a->
À·_pha£
];

93 *
out
++ = 
d©a
->
söe
[d©a->
right_pha£
];

94 
d©a
->
À·_pha£
 += 1;

95 if–
d©a
->
À·_pha£
 >
TABLE_SIZE
 ) data->left_phase -= TABLE_SIZE;

96 
d©a
->
right_pha£
 += 3;

97 if–
d©a
->
right_pha£
 >
TABLE_SIZE
 ) data->right_phase -= TABLE_SIZE;

100  ; 
i
<()
‰amesPîBuf„r
; i++ )

102 *
out
++ = 0;

103 *
out
++ = 0;

105  
föished
;

106 
	}
}

108 
Rï‹tSåómTime
–
P‹tAudioSåóm
 *
°ªam
, 
∑Te°D©a
 *
d©a
 );

109 
	$Rï‹tSåómTime
–
P‹tAudioSåóm
 *
°ªam
, 
∑Te°D©a
 *
d©a
 )

111 
PaTime°amp
 
°ªamTime
, 
œãncy
, 
outTime
;

113 
°ªamTime
 = 
	`Pa_SåómTime
–
°ªam
 );

114 
outTime
 = 
d©a
->outTime;

115 if–
outTime
 < 0.0 )

117 
	`¥ötf
("SåómÅimê%8.1f\n", 
°ªamTime
 );

121 
œãncy
 = 
outTime
 - 
°ªamTime
;

122 
	`¥ötf
("StreamÅime = %8.1f, outTime = %8.1f,Üatency = %8.1f\n",

123 
°ªamTime
, 
outTime
, 
œãncy
 );

125 
	`fÊush
(
°dout
);

126 
	}
}

129 
maö
();

130 
	$maö
()

132 
P‹tAudioSåóm
 *
°ªam
;

133 
PaEº‹
 
îr
;

134 
∑Te°D©a
 
DATA
;

135 
i
;

136 
tŸÆSamps
;

137 
	`¥ötf
("P‹tAudiÿTe°: ouçuàsöêwave. SR = %d, BufSizê%d\n", 
SAMPLE_RATE
, 
FRAMES_PER_BUFFER
);

139  
i
=0; i<
TABLE_SIZE
; i++ )

141 
DATA
.
söe
[
i
] = (Ë
	`sö
–(()i/()
TABLE_SIZE
Ë* 
M_PI
 * 2. );

143 
DATA
.
À·_pha£
 = DATA.
right_pha£
 = 0;

144 
DATA
.
‰amesToGo
 = 
tŸÆSamps
 = 
NUM_SECONDS
 * 
SAMPLE_RATE
;

145 
îr
 = 
	`Pa_Inôülize
();

146 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

147 
îr
 = 
	`Pa_O≥nSåóm
(

148 &
°ªam
,

149 
∑NoDevi˚
,

151 
∑Flﬂt32
,

152 
NULL
,

153 
	`Pa_GëDeÁu…OuçutDevi˚ID
(),

155 
∑Flﬂt32
,

156 
NULL
,

157 
SAMPLE_RATE
,

158 
FRAMES_PER_BUFFER
,

159 
NUM_BUFFERS
,

160 
∑ClùOff
,

161 
∑ã°CÆlback
,

162 &
DATA
 );

163 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

165 
DATA
.
outTime
 = -1.0;

166 
îr
 = 
	`Pa_SèπSåóm
–
°ªam
 );

167 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

170 
	`¥ötf
("Pœy f‹ %d sec⁄ds.\n", 
NUM_SECONDS
/2 ); 
	`fÊush
(
°dout
);

173 
	`Rï‹tSåómTime
–
°ªam
, &
DATA
 );

174 
	`Pa_SÀï
(100);

175 }  
	`Pa_SåómTime
–
°ªam
 ) < (
tŸÆSamps
/2) );

178 
îr
 = 
	`Pa_St›Såóm
–
°ªam
 );

179 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

180 
	`¥ötf
("Pau£ f‹ 2 sec⁄ds.\n"); 
	`fÊush
(
°dout
);

181 
	`Pa_SÀï
( 2000 );

183 
DATA
.
outTime
 = -1.0;

184 
îr
 = 
	`Pa_SèπSåóm
–
°ªam
 );

185 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

187 
	`¥ötf
("Pœy u¡û sound i†föished.\n"); 
	`fÊush
(
°dout
);

190 
	`Rï‹tSåómTime
–
°ªam
, &
DATA
 );

191 
	`Pa_SÀï
(100);

192 }  
	`Pa_SåómA˘ive
–
°ªam
 ) );

194 
îr
 = 
	`Pa_Clo£Såóm
–
°ªam
 );

195 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

196 
	`Pa_Tîmö©e
();

197 
	`¥ötf
("Test finished.\n");

198  
îr
;

199 
îr‹
:

200 
	`Pa_Tîmö©e
();

201 
	`Ârötf
–
°dîr
, "AnÉrror occured while usingÅheÖortaudio stream\n" );

202 
	`Ârötf
–
°dîr
, "Eº‹Çumbî: %d\n", 
îr
 );

203 
	`Ârötf
–
°dîr
, "Eº‹ mesßge: %s\n", 
	`Pa_GëEº‹Text
–
îr
 ) );

204  
îr
;

205 
	}
}

	@pa_tests/patest_stop.c

44 
	~<°dio.h
>

45 
	~<m©h.h
>

46 
	~"p‹èudio.h
"

47 
	#OUTPUT_DEVICE
 (
	`Pa_GëDeÁu…OuçutDevi˚ID
())

	)

48 
	#SLEEP_DUR
 (200)

	)

49 
	#SAMPLE_RATE
 (44100)

	)

50 
	#FRAMES_PER_BUFFER
 (256)

	)

51 
	#LATENCY_MSEC
 (3000)

	)

52 
	#NUM_BUFFERS
 ((
LATENCY_MSEC
 * 
SAMPLE_RATE
Ë/ (
FRAMES_PER_BUFFER
 * 1000))

	)

53 
	#FRAMES_PER_NOTE
 (
SAMPLE_RATE
/2)

	)

54 
	#MAX_REPEATS
 (2)

	)

55 
	#FUNDAMENTAL
 (400.0‡/ 
SAMPLE_RATE
)

	)

56 
	#NOTE_0
 (
FUNDAMENTAL
 * 1.0‡/ 1.0f)

	)

57 
	#NOTE_1
 (
FUNDAMENTAL
 * 5.0‡/ 4.0f)

	)

58 
	#NOTE_2
 (
FUNDAMENTAL
 * 4.0‡/ 3.0f)

	)

59 
	#NOTE_3
 (
FUNDAMENTAL
 * 3.0‡/ 2.0f)

	)

60 
	#NOTE_4
 (
FUNDAMENTAL
 * 2.0‡/ 1.0f)

	)

61 
	#MODE_FINISH
 (0)

	)

62 
	#MODE_STOP
 (1)

	)

63 
	#MODE_ABORT
 (2)

	)

64 #i‚de‡
M_PI


65 
	#M_PI
 (3.14159265)

	)

67 
	#TABLE_SIZE
 (400)

	)

70 
	mwavef‹m
[
TABLE_SIZE
 + 1];

71 
	mpha£_ö¸emít
;

72 
	mpha£
;

73 *
	mtu√
;

74 
	mnŸesPîTu√
;

75 
	m‰ameCou¡î
;

76 
	mnŸeCou¡î
;

77 
	mª≥©Cou¡î
;

78 
PaTime°amp
 
	moutTime
;

79 
	m°›Mode
;

80 
	md⁄e
;

82 
	t∑Te°D©a
;

84 
Te°St›Mode
–
∑Te°D©a
 *
d©a
 );

85 
LookupWavef‹m
–
∑Te°D©a
 *
d©a
, 
pha£
 );

90 
	$LookupWavef‹m
–
∑Te°D©a
 *
d©a
, 
pha£
 )

92 
fIndex
 = 
pha£
*
TABLE_SIZE
;

93 
ödex
 = (Ë
fIndex
;

94 
‰a˘
 = 
fIndex
 - 
ödex
;

95 
lo
 = 
d©a
->
wavef‹m
[
ödex
];

96 
hi
 = 
d©a
->
wavef‹m
[
ödex
+1];

97 
vÆ
 = 
lo
 + 
‰a˘
*(
hi
-lo);

98  
vÆ
;

99 
	}
}

104 
	$∑ã°CÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

105 
‰amesPîBuf„r
,

106 
PaTime°amp
 
outTime
, *
u£rD©a
 )

108 
∑Te°D©a
 *
d©a
 = (∑Te°D©a*)
u£rD©a
;

109 *
out
 = (*)
ouçutBuf„r
;

110 
vÆue
;

111 
i
 = 0;

112 
föished
 = 0;

113 (Ë
outTime
;

114 (Ë
öputBuf„r
;

116 
d©a
->
outTime
 = outTime;

117 if–!
d©a
->
d⁄e
 )

119  
i
=0; i<
‰amesPîBuf„r
; i++ )

122 if–
d©a
->
‰ameCou¡î
 >
FRAMES_PER_NOTE
 )

124 
d©a
->
nŸeCou¡î
 += 1;

125 
d©a
->
‰ameCou¡î
 = 0;

127 if–
d©a
->
nŸeCou¡î
 >d©a->
nŸesPîTu√
 )

129 
d©a
->
nŸeCou¡î
 = 0;

130 
d©a
->
ª≥©Cou¡î
 += 1;

132 if–
d©a
->
ª≥©Cou¡î
 >
MAX_REPEATS
 )

134 
d©a
->
d⁄e
 = 1;

135 if–
d©a
->
°›Mode
 =
MODE_FINISH
 )

137 
föished
 = 1;

142 
d©a
->
pha£_ö¸emít
 = d©a->
tu√
[d©a->
nŸeCou¡î
];

144 
vÆue
 = 
	`LookupWavef‹m
(
d©a
, d©a->
pha£
);

145 *
out
++ = 
vÆue
;

146 *
out
++ = 
vÆue
;

147 
d©a
->
pha£
 +d©a->
pha£_ö¸emít
;

148 if–
d©a
->
pha£
 >= 1.0f ) data->phase -= 1.0f;

150 
d©a
->
‰ameCou¡î
 += 1;

154  ; 
i
<
‰amesPîBuf„r
; i++ )

156 *
out
++ = 0;

157 *
out
++ = 0;

159  
föished
;

160 
	}
}

162 
maö
();

163 
	$maö
()

165 
∑Te°D©a
 
DATA
;

166 
i
;

167 
sim∂eTu√
[] = { 
NOTE_0
, 
NOTE_1
, 
NOTE_2
, 
NOTE_3
, 
NOTE_4
, NOTE_3, NOTE_2, NOTE_1 };

168 
	`¥ötf
("P‹tAudiÿTe°:Öœy s⁄gándÅe° st›pög.ásk f‹ %d buf„rs\n", 
NUM_BUFFERS
 );

170  
i
=0; i<
TABLE_SIZE
; i++ )

172 
DATA
.
wavef‹m
[
i
] = () (

173 (0.2 * 
	`sö
–(()
i
/()
TABLE_SIZE
Ë* 
M_PI
 * 2. )) +

174 (0.2 * 
	`sö
–(()(3*
i
)/()
TABLE_SIZE
Ë* 
M_PI
 * 2. )) +

175 (0.1 * 
	`sö
–(()(5*
i
)/()
TABLE_SIZE
Ë* 
M_PI
 * 2. ))

178 
DATA
.
wavef‹m
[
TABLE_SIZE
] = DATA.waveform[0];

179 
DATA
.
tu√
 = &
sim∂eTu√
[0];

180 
DATA
.
nŸesPîTu√
 = (
sim∂eTu√
) / ();

181 
	`¥ötf
("Test MODE_FINISH - callbackÑeturns 1.\n");

182 
	`¥ötf
("Should hó∏ítúê%dÇŸêtu√ÑïóãdÅwi˚.\n", 
DATA
.
nŸesPîTu√
);

183 
DATA
.
°›Mode
 = 
MODE_FINISH
;

184 if–
	`Te°St›Mode
–&
DATA
 ) !
∑NoEº‹
 )

186 
	`¥ötf
("Test of MODE_FINISH failed!\n");

187 
îr‹
;

189 
	`¥ötf
("Test MODE_STOP - stop when song is done.\n");

190 
	`¥ötf
("Should hó∏ítúê%dÇŸêtu√ÑïóãdÅwi˚.\n", 
DATA
.
nŸesPîTu√
);

191 
DATA
.
°›Mode
 = 
MODE_STOP
;

192 if–
	`Te°St›Mode
–&
DATA
 ) !
∑NoEº‹
 )

194 
	`¥ötf
("Test of MODE_STOP failed!\n");

195 
îr‹
;

198 
	`¥ötf
("Test MODE_ABORT -ábort immediately.\n");

199 
	`¥ötf
("Should hó∏œ°Ñïëôi⁄ cuàsh‹àby %d m£c.\n", 
LATENCY_MSEC
);

200 
DATA
.
°›Mode
 = 
MODE_ABORT
;

201 if–
	`Te°St›Mode
–&
DATA
 ) !
∑NoEº‹
 )

203 
	`¥ötf
("Test of MODE_ABORT failed!\n");

204 
îr‹
;

207 
îr‹
:

209 
	}
}

211 
	$Te°St›Mode
–
∑Te°D©a
 *
d©a
 )

213 
P‹tAudioSåóm
 *
°ªam
;

214 
PaEº‹
 
îr
;

215 
d©a
->
d⁄e
 = 0;

216 
d©a
->
pha£
 = 0.0;

217 
d©a
->
‰ameCou¡î
 = 0;

218 
d©a
->
nŸeCou¡î
 = 0;

219 
d©a
->
ª≥©Cou¡î
 = 0;

220 
d©a
->
pha£_ö¸emít
 = d©a->
tu√
[d©a->
nŸeCou¡î
];

221 
îr
 = 
	`Pa_Inôülize
();

222 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

223 
îr
 = 
	`Pa_O≥nSåóm
(

224 &
°ªam
,

225 
∑NoDevi˚
,

227 
∑Flﬂt32
,

228 
NULL
,

229 
OUTPUT_DEVICE
,

231 
∑Flﬂt32
,

232 
NULL
,

233 
SAMPLE_RATE
,

234 
FRAMES_PER_BUFFER
,

235 
NUM_BUFFERS
,

236 
∑ClùOff
,

237 
∑ã°CÆlback
,

238 
d©a
 );

239 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

240 
îr
 = 
	`Pa_SèπSåóm
–
°ªam
 );

241 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

242 if–
d©a
->
°›Mode
 =
MODE_FINISH
 )

244  
	`Pa_SåómA˘ive
–
°ªam
 ) )

249 
	`Pa_SÀï
–
SLEEP_DUR
 );

254  
d©a
->
ª≥©Cou¡î
 < 
MAX_REPEATS
 )

259 
	`Pa_SÀï
–
SLEEP_DUR
 );

262 if–
d©a
->
°›Mode
 =
MODE_ABORT
 )

264 
	`¥ötf
("Call Pa_AbortStream()\n");

265 
îr
 = 
	`Pa_Ab‹tSåóm
–
°ªam
 );

269 
	`¥ötf
("Call Pa_StopStream()\n");

270 
îr
 = 
	`Pa_St›Såóm
–
°ªam
 );

272 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

273 
	`¥ötf
("CÆ»Pa_Clo£Såóm()\n"); 
	`fÊush
(
°dout
);

274 
îr
 = 
	`Pa_Clo£Såóm
–
°ªam
 );

275 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

276 
	`Pa_Tîmö©e
();

277 
	`¥ötf
("Test finished.\n");

278  
îr
;

279 
îr‹
:

280 
	`Pa_Tîmö©e
();

281 
	`Ârötf
–
°dîr
, "AnÉrror occured while usingÅheÖortaudio stream\n" );

282 
	`Ârötf
–
°dîr
, "Eº‹Çumbî: %d\n", 
îr
 );

283 
	`Ârötf
–
°dîr
, "Eº‹ mesßge: %s\n", 
	`Pa_GëEº‹Text
–
îr
 ) );

284  
îr
;

285 
	}
}

	@pa_tests/patest_sync.c

46 
	~<°dio.h
>

47 
	~<m©h.h
>

48 
	~"p‹èudio.h
"

49 
	#NUM_BEEPS
 (6)

	)

50 
	#SAMPLE_RATE
 (44100)

	)

51 
	#FRAMES_PER_BUFFER
 (256)

	)

52 
	#BEEP_DURATION
 (1000)

	)

53 
	#LATENCY_MSEC
 (2000)

	)

54 
	#SLEEP_MSEC
 (10)

	)

55 
	#TIMEOUT_MSEC
 ((3 * 
LATENCY_MSEC
Ë/ (2 * 
SLEEP_MSEC
))

	)

56 
	#NUM_BUFFERS
 ((
LATENCY_MSEC
 * 
SAMPLE_RATE
Ë/ (
FRAMES_PER_BUFFER
 * 1000))

	)

57 
	#STATE_BKG_IDLE
 (0)

	)

58 
	#STATE_BKG_PENDING
 (1)

	)

59 
	#STATE_BKG_BEEPING
 (2)

	)

62 
	mÀ·_pha£
;

63 
	mright_pha£
;

64 
	m°©e
;

65 
	mªque°Bìp
;

66 
PaTime°amp
 
	mbìpTime
;

67 
	mbìpCou¡
;

69 
	t∑Te°D©a
;

70 
Gíî©eR™domNumbî
( );

73 
	$Gíî©eR™domNumbî
( )

75 
øndSìd
 = 22222;

76 
øndSìd
 = (randSeed * 196314165) + 907633515;

77  
øndSìd
;

78 
	}
}

83 
	$∑ã°CÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

84 
‰amesPîBuf„r
,

85 
PaTime°amp
 
outTime
, *
u£rD©a
 )

88 
∑Te°D©a
 *
d©a
 = (∑Te°D©a*)
u£rD©a
;

89 *
out
 = (*)
ouçutBuf„r
;

90 
i
;

91 (Ë
öputBuf„r
;

93  
i
=0; i<
‰amesPîBuf„r
; i++ )

95  
d©a
->
°©e
 )

97 
STATE_BKG_IDLE
:

99 if–
d©a
->
ªque°Bìp
 )

101 
øndom
 = 
	`Gíî©eR™domNumbî
() >> 14;

102 
d©a
->
bìpTime
 = 
outTime
 + (
i
 + 
øndom
 + (
SAMPLE_RATE
/4));

103 
d©a
->
°©e
 = 
STATE_BKG_PENDING
;

104 
d©a
->
ªque°Bìp
 = 0;

105 
d©a
->
À·_pha£
 = d©a->
right_pha£
 = 0.0;

107 *
out
++ = 0.0;

108 *
out
++ = 0.0;

110 
STATE_BKG_PENDING
:

111 if–(
outTime
 + 
i
Ë>
d©a
->
bìpTime
 )

113 
d©a
->
°©e
 = 
STATE_BKG_BEEPING
;

114 
d©a
->
bìpCou¡
 = 
BEEP_DURATION
;

116 *
out
++ = 0.0;

117 *
out
++ = 0.0;

119 
STATE_BKG_BEEPING
:

120 if–
d©a
->
bìpCou¡
 <= 0 )

122 
d©a
->
°©e
 = 
STATE_BKG_IDLE
;

123 *
out
++ = 0.0;

124 *
out
++ = 0.0;

129 *
out
++ = 
d©a
->
À·_pha£
;

130 *
out
++ = 
d©a
->
right_pha£
;

132 
d©a
->
À·_pha£
 += 0.01f;

134 if–
d©a
->
À·_pha£
 >= 1.0f ) data->left_phase -= 2.0f;

136 
d©a
->
right_pha£
 += 0.03f;

137 if–
d©a
->
right_pha£
 >= 1.0f ) data->right_phase -= 2.0f;

139 
d©a
->
bìpCou¡
 -= 1;

142 
d©a
->
°©e
 = 
STATE_BKG_IDLE
;

147 
	}
}

149 
maö
();

150 
	$maö
()

152 
P‹tAudioSåóm
 *
°ªam
;

153 
PaEº‹
 
îr
;

154 
∑Te°D©a
 
DATA
;

155 
i
, 
timeout
;

156 
PaTime°amp
 
¥eviousTime
;

157 
	`¥ötf
("PortAudio Test: you should see BEEPátÅhe sameÅime you hear it.\n");

158 
	`¥ötf
("Wait forá few secondsÑandom delay between BEEPs.\n");

159 
	`¥ötf
("BEEP %dÅimes.\n", 
NUM_BEEPS
 );

161 
DATA
.
À·_pha£
 = DATA.
right_pha£
 = 0.0;

162 
DATA
.
°©e
 = 
STATE_BKG_IDLE
;

163 
DATA
.
ªque°Bìp
 = 0;

165 
îr
 = 
	`Pa_Inôülize
();

166 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

168 
îr
 = 
	`Pa_O≥nDeÁu…Såóm
(

169 &
°ªam
,

172 
∑Flﬂt32
,

173 
SAMPLE_RATE
,

174 
FRAMES_PER_BUFFER
,

175 
NUM_BUFFERS
,

176 
∑ã°CÆlback
,

177 &
DATA
 );

178 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

179 
îr
 = 
	`Pa_SèπSåóm
–
°ªam
 );

180 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

181 
¥eviousTime
 = 
	`Pa_SåómTime
–
°ªam
 );

182  
i
=0; i<
NUM_BEEPS
; i++ )

185 
DATA
.
ªque°Bìp
 = 1;

187 
timeout
 = 
TIMEOUT_MSEC
;

188  (
DATA
.
ªque°Bìp
 =1Ë&& (
timeout
-- > 0 ) ) 
	`Pa_SÀï
(
SLEEP_MSEC
);

189 if–
timeout
 <= 0 )

191 
	`Ârötf
–
°dîr
, "Timed out waiting for backgroundÅoácknowledgeÑequest.\n" );

192 
îr‹
;

195 
timeout
 = 
TIMEOUT_MSEC
 + (10000/
SLEEP_MSEC
);

196  (
	`Pa_SåómTime
–
°ªam
 ) < 
DATA
.
bìpTime
Ë&& (
timeout
-- > 0 ) )

198 
	`Pa_SÀï
(
SLEEP_MSEC
);

200 if–
timeout
 <= 0 )

202 
	`Ârötf
–
°dîr
, "Timed out waiting forÅime. Now = %g, Beep for %g.\n",

203 
	`Pa_SåómTime
–
°ªam
 ), 
DATA
.
bìpTime
 );

204 
îr‹
;

207 
	`¥ötf
("BEEP");

208 
	`fÊush
(
°dout
);

209 
	`¥ötf
("át %d, delta = %d\n",

210 (Ë
DATA
.
bìpTime
, (Ë(DATA.bìpTimê- 
¥eviousTime
) );

211 
	`fÊush
(
°dout
);

212 
¥eviousTime
 = 
DATA
.
bìpTime
;

214 
îr
 = 
	`Pa_St›Såóm
–
°ªam
 );

215 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

216 
îr
 = 
	`Pa_Clo£Såóm
–
°ªam
 );

217 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

218 
	`Pa_Tîmö©e
();

219 
	`¥ötf
("Test finished.\n");

220  
îr
;

221 
îr‹
:

222 
	`Pa_Tîmö©e
();

223 
	`Ârötf
–
°dîr
, "AnÉrror occured while usingÅheÖortaudio stream\n" );

224 
	`Ârötf
–
°dîr
, "Eº‹Çumbî: %d\n", 
îr
 );

225 
	`Ârötf
–
°dîr
, "Eº‹ mesßge: %s\n", 
	`Pa_GëEº‹Text
–
îr
 ) );

226  
îr
;

227 
	}
}

	@pa_tests/patest_wire.c

40 
	~<°dio.h
>

41 
	~<m©h.h
>

42 
	~"p‹èudio.h
"

44 
	#INPUT_DEVICE
 
	`Pa_GëDeÁu…I≈utDevi˚ID
()

	)

45 
	#OUTPUT_DEVICE
 
	`Pa_GëDeÁu…OuçutDevi˚ID
()

	)

52 
	#SAMPLE_RATE
 (22050)

	)

53 
	#FRAMES_PER_BUFFER
 (64)

	)

56 
	#PA_SAMPLE_TYPE
 
∑Flﬂt32


	)

57 
	tSAMPLE
;

59 
	#PA_SAMPLE_TYPE
 
∑I¡16


	)

60 
	tSAMPLE
;

62 
wúeCÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

63 
‰amesPîBuf„r
,

64 
PaTime°amp
 
outTime
, *
u£rD©a
 );

70 
	$wúeCÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

71 
‰amesPîBuf„r
,

72 
PaTime°amp
 
outTime
, *
u£rD©a
 )

74 
SAMPLE
 *
out
 = (SAMPLE*)
ouçutBuf„r
;

75 
SAMPLE
 *
ö
 = (SAMPLE*)
öputBuf„r
;

76 
i
;

77 (Ë
outTime
;

80 if–
öputBuf„r
 =
NULL
 )

82  
i
=0; i<
‰amesPîBuf„r
; i++ )

84 *
out
++ = 0;

85 *
out
++ = 0;

90  
i
=0; i<
‰amesPîBuf„r
; i++ )

92 *
out
++ = *
ö
++;

93 *
out
++ = *
ö
++;

98 
	}
}

102 
maö
();

103 
	$maö
()

105 
P‹tAudioSåóm
 *
°ªam
;

106 
PaEº‹
 
îr
;

108 
îr
 = 
	`Pa_Inôülize
();

109 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

111 
	`¥ötf
("P‹tAudiÿTe°: i≈uàdevi˚ ID = %d\n", 
INPUT_DEVICE
 );

112 
	`¥ötf
("P‹tAudiÿTe°: ouçuàdevi˚ ID = %d\n", 
OUTPUT_DEVICE
 );

113 
îr
 = 
	`Pa_O≥nSåóm
(

114 &
°ªam
,

115 
INPUT_DEVICE
,

117 
PA_SAMPLE_TYPE
,

118 
NULL
,

119 
OUTPUT_DEVICE
,

121 
PA_SAMPLE_TYPE
,

122 
NULL
,

123 
SAMPLE_RATE
,

124 
FRAMES_PER_BUFFER
,

126 
∑ClùOff
,

127 
wúeCÆlback
,

128 
NULL
 );

129 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

131 
îr
 = 
	`Pa_SèπSåóm
–
°ªam
 );

132 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

134 
	`¥ötf
("Full duplex soundÅest inÖrogress.\n");

135 
	`¥ötf
("Hô ENTERÅÿexôÅe°.\n"); 
	`fÊush
(
°dout
);

136 
	`gëch¨
();

138 
	`¥ötf
("Closing stream.\n");

139 
îr
 = 
	`Pa_Clo£Såóm
–
°ªam
 );

140 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

141 
	`Pa_Tîmö©e
();

143 
	`¥ötf
("FuŒ du∂ex soundÅe° com∂ëe.\n"); 
	`fÊush
(
°dout
);

145 
îr‹
:

146 
	`Pa_Tîmö©e
();

147 
	`Ârötf
–
°dîr
, "AnÉrror occured while usingÅheÖortaudio stream\n" );

148 
	`Ârötf
–
°dîr
, "Eº‹Çumbî: %d\n", 
îr
 );

149 
	`Ârötf
–
°dîr
, "Eº‹ mesßge: %s\n", 
	`Pa_GëEº‹Text
–
îr
 ) );

151 
	}
}

	@portaudio/pa_common/pa_convert.c

8 
	~<°dio.h
>

10 
	~"p‹èudio.h
"

11 
	~"∑_ho°.h
"

13 
	#CLIP
–
vÆ
, 
mö
, 
max
 ) { vÆ = ((vÆË< (mö)Ë? mö : (((vÆË< (max)Ë? (maxË: (vÆ)); }

	)

16 
	$PaC⁄vît_Flﬂt32_I¡16
(

17 *
sour˚Buf„r
, 
sour˚Såide
,

18 *
èrgëBuf„r
, 
èrgëSåide
,

19 
numSam∂es
 )

21 
i
;

22  
i
=0; i<
numSam∂es
; i++ )

24 
ßmp
 = (Ë(*
sour˚Buf„r
 * (32767.0f));

25 *
èrgëBuf„r
 = 
ßmp
;

26 
sour˚Buf„r
 +
sour˚Såide
;

27 
èrgëBuf„r
 +
èrgëSåide
;

29 
	}
}

32 
	$PaC⁄vît_Flﬂt32_I¡16_Clù
(

33 *
sour˚Buf„r
, 
sour˚Såide
,

34 *
èrgëBuf„r
, 
èrgëSåide
,

35 
numSam∂es
 )

37 
i
;

38  
i
=0; i<
numSam∂es
; i++ )

40 
ßmp
 = (Ë(*
sour˚Buf„r
 * (32767.0f));

41 
	`CLIP
–
ßmp
, -0x8000, 0x7FFF );

42 *
èrgëBuf„r
 = (Ë
ßmp
;

43 
sour˚Buf„r
 +
sour˚Såide
;

44 
èrgëBuf„r
 +
èrgëSåide
;

46 
	}
}

49 
	$PaC⁄vît_Flﬂt32_I¡16_ClùDôhî
(

50 *
sour˚Buf„r
, 
sour˚Såide
,

51 *
èrgëBuf„r
, 
èrgëSåide
,

52 
numSam∂es
 )

54 
i
;

55  
i
=0; i<
numSam∂es
; i++ )

58 
dôhî
 = 
	`PaC⁄vît_TrünguœrDôhî
(Ë* 
PA_DITHER_SCALE
;

59 
dôhîed
 = (*
sour˚Buf„r
 * (32766.0f)Ë+ 
dôhî
;

60 
ßmp
 = (Ë
dôhîed
;

61 
	`CLIP
–
ßmp
, -0x8000, 0x7FFF );

62 *
èrgëBuf„r
 = (Ë
ßmp
;

63 
sour˚Buf„r
 +
sour˚Såide
;

64 
èrgëBuf„r
 +
èrgëSåide
;

66 
	}
}

69 
	$PaC⁄vît_Flﬂt32_I¡16_Dôhî
(

70 *
sour˚Buf„r
, 
sour˚Såide
,

71 *
èrgëBuf„r
, 
èrgëSåide
,

72 
numSam∂es
 )

74 
i
;

75  
i
=0; i<
numSam∂es
; i++ )

78 
dôhî
 = 
	`PaC⁄vît_TrünguœrDôhî
(Ë* 
PA_DITHER_SCALE
;

79 
dôhîed
 = (*
sour˚Buf„r
 * (32766.0f)Ë+ 
dôhî
;

80 *
èrgëBuf„r
 = (Ë
dôhîed
;

81 
sour˚Buf„r
 +
sour˚Såide
;

82 
èrgëBuf„r
 +
èrgëSåide
;

84 
	}
}

88 
	$PaC⁄vît_I¡16_Flﬂt32
(

89 *
sour˚Buf„r
, 
sour˚Såide
,

90 *
èrgëBuf„r
, 
èrgëSåide
,

91 
numSam∂es
 )

93 
i
;

94  
i
=0; i<
numSam∂es
; i++ )

96 
ßmp
 = *
sour˚Buf„r
 * (1.0f / 32768.0f);

97 *
èrgëBuf„r
 = 
ßmp
;

98 
sour˚Buf„r
 +
sour˚Såide
;

99 
èrgëBuf„r
 +
èrgëSåide
;

101 
	}
}

104 
	$PaC⁄vît_Flﬂt32_I¡8
(

105 *
sour˚Buf„r
, 
sour˚Såide
,

106 *
èrgëBuf„r
, 
èrgëSåide
,

107 
numSam∂es
 )

109 
i
;

110  
i
=0; i<
numSam∂es
; i++ )

112 
ßmp
 = (Ë(*
sour˚Buf„r
 * (127.0));

113 *
èrgëBuf„r
 = 
ßmp
;

114 
sour˚Buf„r
 +
sour˚Såide
;

115 
èrgëBuf„r
 +
èrgëSåide
;

117 
	}
}

121 
	$PaC⁄vît_Flﬂt32_I¡8_Clù
(

122 *
sour˚Buf„r
, 
sour˚Såide
,

123 *
èrgëBuf„r
, 
èrgëSåide
,

124 
numSam∂es
 )

126 
i
;

127  
i
=0; i<
numSam∂es
; i++ )

129 
ßmp
 = (Ë(*
sour˚Buf„r
 * 127.0f);

130 
	`CLIP
–
ßmp
, -0x80, 0x7F );

131 *
èrgëBuf„r
 = (Ë
ßmp
;

132 
sour˚Buf„r
 +
sour˚Såide
;

133 
èrgëBuf„r
 +
èrgëSåide
;

135 
	}
}

138 
	$PaC⁄vît_Flﬂt32_I¡8_ClùDôhî
(

139 *
sour˚Buf„r
, 
sour˚Såide
,

140 *
èrgëBuf„r
, 
èrgëSåide
,

141 
numSam∂es
 )

143 
i
;

144  
i
=0; i<
numSam∂es
; i++ )

147 
dôhî
 = 
	`PaC⁄vît_TrünguœrDôhî
(Ë* 
PA_DITHER_SCALE
;

148 
dôhîed
 = (*
sour˚Buf„r
 * (126.0f)Ë+ 
dôhî
;

149 
ßmp
 = (Ë
dôhîed
;

150 
	`CLIP
–
ßmp
, -0x80, 0x7F );

151 *
èrgëBuf„r
 = (Ë
ßmp
;

152 
sour˚Buf„r
 +
sour˚Såide
;

153 
èrgëBuf„r
 +
èrgëSåide
;

155 
	}
}

158 
	$PaC⁄vît_Flﬂt32_I¡8_Dôhî
(

159 *
sour˚Buf„r
, 
sour˚Såide
,

160 *
èrgëBuf„r
, 
èrgëSåide
,

161 
numSam∂es
 )

163 
i
;

164  
i
=0; i<
numSam∂es
; i++ )

167 
dôhî
 = 
	`PaC⁄vît_TrünguœrDôhî
(Ë* 
PA_DITHER_SCALE
;

168 
dôhîed
 = (*
sour˚Buf„r
 * (126.0f)Ë+ 
dôhî
;

169 
ßmp
 = (Ë
dôhîed
;

170 *
èrgëBuf„r
 = (Ë
ßmp
;

171 
sour˚Buf„r
 +
sour˚Såide
;

172 
èrgëBuf„r
 +
èrgëSåide
;

174 
	}
}

177 
	$PaC⁄vît_I¡8_Flﬂt32
(

178 *
sour˚Buf„r
, 
sour˚Såide
,

179 *
èrgëBuf„r
, 
èrgëSåide
,

180 
numSam∂es
 )

182 
i
;

183  
i
=0; i<
numSam∂es
; i++ )

185 
ßmp
 = *
sour˚Buf„r
 * (1.0f / 128.0f);

186 *
èrgëBuf„r
 = 
ßmp
;

187 
sour˚Buf„r
 +
sour˚Såide
;

188 
èrgëBuf„r
 +
èrgëSåide
;

190 
	}
}

193 
	$PaC⁄vît_Flﬂt32_UI¡8
(

194 *
sour˚Buf„r
, 
sour˚Såide
,

195 *
èrgëBuf„r
, 
èrgëSåide
,

196 
numSam∂es
 )

198 
i
;

199  
i
=0; i<
numSam∂es
; i++ )

201 
ßmp
 = ()(128 + (*
sour˚Buf„r
 * (127.0)));

202 *
èrgëBuf„r
 = 
ßmp
;

203 
sour˚Buf„r
 +
sour˚Såide
;

204 
èrgëBuf„r
 +
èrgëSåide
;

206 
	}
}

209 
	$PaC⁄vît_UI¡8_Flﬂt32
(

210 *
sour˚Buf„r
, 
sour˚Såide
,

211 *
èrgëBuf„r
, 
èrgëSåide
,

212 
numSam∂es
 )

214 
i
;

215  
i
=0; i<
numSam∂es
; i++ )

217 
ßmp
 = (*
sour˚Buf„r
 - 128) * (1.0f / 128.0f);

218 *
èrgëBuf„r
 = 
ßmp
;

219 
sour˚Buf„r
 +
sour˚Såide
;

220 
èrgëBuf„r
 +
èrgëSåide
;

222 
	}
}

225 
	$PaC⁄vît_Flﬂt32_I¡32
(

226 *
sour˚Buf„r
, 
sour˚Såide
,

227 *
èrgëBuf„r
, 
èrgëSåide
,

228 
numSam∂es
 )

230 
i
;

231  
i
=0; i<
numSam∂es
; i++ )

233 
ßmp
 = (Ë(*
sour˚Buf„r
 * 0x7FFFFFFF);

234 *
èrgëBuf„r
 = 
ßmp
;

235 
sour˚Buf„r
 +
sour˚Såide
;

236 
èrgëBuf„r
 +
èrgëSåide
;

238 
	}
}

241 
	$PaC⁄vît_Flﬂt32_I¡32_Clù
(

242 *
sour˚Buf„r
, 
sour˚Såide
,

243 *
èrgëBuf„r
, 
èrgëSåide
,

244 
numSam∂es
 )

246 
i
;

247  
i
=0; i<
numSam∂es
; i++ )

249 
ßmp
;

250 
fs
 = *
sour˚Buf„r
;

251 
	`CLIP
–
fs
, -1.0, 0.999999 );

252 
ßmp
 = (Ë(*
sour˚Buf„r
 * 0x7FFFFFFF);

253 *
èrgëBuf„r
 = 
ßmp
;

254 
sour˚Buf„r
 +
sour˚Såide
;

255 
èrgëBuf„r
 +
èrgëSåide
;

257 
	}
}

260 
	$PaC⁄vît_I¡32_Flﬂt32
(

261 *
sour˚Buf„r
, 
sour˚Såide
,

262 *
èrgëBuf„r
, 
èrgëSåide
,

263 
numSam∂es
 )

265 
i
;

266  
i
=0; i<
numSam∂es
; i++ )

268 
ßmp
 = *
sour˚Buf„r
 * (1.0f / 0x7FFFFFFF);

269 *
èrgëBuf„r
 = 
ßmp
;

270 
sour˚Buf„r
 +
sour˚Såide
;

271 
èrgëBuf„r
 +
èrgëSåide
;

273 
	}
}

276 
P‹tAudioC⁄vîãr
 *
	$PaC⁄vît_Sñe˘Proc
–
PaSam∂eF‹m©
 
sour˚F‹m©
,

277 
PaSam∂eF‹m©
 
èrgëF‹m©
, 
ifClù
, 
ifDôhî
 )

279 
P‹tAudioC⁄vîãr
 *
¥oc
 = 
NULL
;

280  
sour˚F‹m©
 )

282 
∑UI¡8
:

283  
èrgëF‹m©
 )

285 
∑Flﬂt32
:

286 
¥oc
 = (
P‹tAudioC⁄vîãr
 *Ë
PaC⁄vît_UI¡8_Flﬂt32
;

292 
∑I¡8
:

293  
èrgëF‹m©
 )

295 
∑Flﬂt32
:

296 
¥oc
 = (
P‹tAudioC⁄vîãr
 *Ë
PaC⁄vît_I¡8_Flﬂt32
;

302 
∑I¡16
:

303  
èrgëF‹m©
 )

305 
∑Flﬂt32
:

306 
¥oc
 = (
P‹tAudioC⁄vîãr
 *Ë
PaC⁄vît_I¡16_Flﬂt32
;

313 
∑I¡32
:

314  
èrgëF‹m©
 )

316 
∑Flﬂt32
:

317 
¥oc
 = (
P‹tAudioC⁄vîãr
 *Ë
PaC⁄vît_I¡32_Flﬂt32
;

324 
∑Flﬂt32
:

325  
èrgëF‹m©
 )

327 
∑UI¡8
:

328 
¥oc
 = (
P‹tAudioC⁄vîãr
 *Ë
PaC⁄vît_Flﬂt32_UI¡8
;

330 
∑I¡8
:

331 if–
ifClù
 && 
ifDôhî
 ) 
¥oc
 = (
P‹tAudioC⁄vîãr
 *Ë
PaC⁄vît_Flﬂt32_I¡8_ClùDôhî
;

332 if–
ifClù
 ) 
¥oc
 = (
P‹tAudioC⁄vîãr
 *Ë
PaC⁄vît_Flﬂt32_I¡8_Clù
;

333 if–
ifDôhî
 ) 
¥oc
 = (
P‹tAudioC⁄vîãr
 *Ë
PaC⁄vît_Flﬂt32_I¡8_Dôhî
;

334 
¥oc
 = (
P‹tAudioC⁄vîãr
 *Ë
PaC⁄vît_Flﬂt32_I¡8
;

336 
∑I¡16
:

337 if–
ifClù
 && 
ifDôhî
 ) 
¥oc
 = (
P‹tAudioC⁄vîãr
 *Ë
PaC⁄vît_Flﬂt32_I¡16_ClùDôhî
;

338 if–
ifClù
 ) 
¥oc
 = (
P‹tAudioC⁄vîãr
 *Ë
PaC⁄vît_Flﬂt32_I¡16_Clù
;

339 if–
ifDôhî
 ) 
¥oc
 = (
P‹tAudioC⁄vîãr
 *Ë
PaC⁄vît_Flﬂt32_I¡16_Dôhî
;

340 
¥oc
 = (
P‹tAudioC⁄vîãr
 *Ë
PaC⁄vît_Flﬂt32_I¡16
;

342 
∑I¡32
:

344 if–
ifClù
 ) 
¥oc
 = (
P‹tAudioC⁄vîãr
 *Ë
PaC⁄vît_Flﬂt32_I¡32_Clù
;

345 
¥oc
 = (
P‹tAudioC⁄vîãr
 *Ë
PaC⁄vît_Flﬂt32_I¡32
;

354  
¥oc
;

356 
	}
}

359 
PaEº‹
 
	$PaC⁄vît_SëupI≈ut
–
öã∫ÆP‹tAudioSåóm
 *
∑°
,

360 
PaSam∂eF‹m©
 
«tiveI≈utSam∂eF‹m©
 )

362 
∑°
->
∑°_N©iveI≈utSam∂eF‹m©
 = 
«tiveI≈utSam∂eF‹m©
;

363 
∑°
->
∑°_I≈utC⁄vîsi⁄Sour˚Såide
 = 1;

364 
∑°
->
∑°_I≈utC⁄vîsi⁄T¨gëSåide
 = 1;

366 if–
«tiveI≈utSam∂eF‹m©
 !
∑°
->
∑°_I≈utSam∂eF‹m©
 )

368 
ifDôhî
 = (
∑°
->
∑°_Fœgs
 & 
∑DôhîOff
) == 0;

369 
∑°
->
∑°_I≈utC⁄vîsi⁄Proc
 = 
	`PaC⁄vît_Sñe˘Proc
–
«tiveI≈utSam∂eF‹m©
,

370 
∑°
->
∑°_I≈utSam∂eF‹m©
, 0, 
ifDôhî
 );

371 if–
∑°
->
∑°_I≈utC⁄vîsi⁄Proc
 =
NULL
 )  
∑Sam∂eF‹m©NŸSuµ‹ãd
;

375 
∑°
->
∑°_I≈utC⁄vîsi⁄Proc
 = 
NULL
;

378  
∑NoEº‹
;

379 
	}
}

382 
PaEº‹
 
	$PaC⁄vît_SëupOuçut
–
öã∫ÆP‹tAudioSåóm
 *
∑°
,

383 
PaSam∂eF‹m©
 
«tiveOuçutSam∂eF‹m©
 )

386 
∑°
->
∑°_N©iveOuçutSam∂eF‹m©
 = 
«tiveOuçutSam∂eF‹m©
;

387 
∑°
->
∑°_OuçutC⁄vîsi⁄Sour˚Såide
 = 1;

388 
∑°
->
∑°_OuçutC⁄vîsi⁄T¨gëSåide
 = 1;

390 if–
«tiveOuçutSam∂eF‹m©
 !
∑°
->
∑°_OuçutSam∂eF‹m©
 )

392 
ifDôhî
 = (
∑°
->
∑°_Fœgs
 & 
∑DôhîOff
) == 0;

393 
ifClù
 = (
∑°
->
∑°_Fœgs
 & 
∑ClùOff
) == 0;

395 
∑°
->
∑°_OuçutC⁄vîsi⁄Proc
 = 
	`PaC⁄vît_Sñe˘Proc
–∑°->
∑°_OuçutSam∂eF‹m©
,

396 
«tiveOuçutSam∂eF‹m©
, 
ifClù
, 
ifDôhî
 );

397 if–
∑°
->
∑°_OuçutC⁄vîsi⁄Proc
 =
NULL
 )  
∑Sam∂eF‹m©NŸSuµ‹ãd
;

401 
∑°
->
∑°_OuçutC⁄vîsi⁄Proc
 = 
NULL
;

404  
∑NoEº‹
;

405 
	}
}

414 
	$PaC⁄vît_Pro˚ss
–
öã∫ÆP‹tAudioSåóm
 *
∑°
,

415 *
«tiveI≈utBuf„r
,

416 *
«tiveOuçutBuf„r
 )

418 
u£rResu…
;

419 *
öputBuf„r
 = 
NULL
;

420 *
ouçutBuf„r
 = 
NULL
;

423 if–(
∑°
->
∑°_NumI≈utCh™√ls
 > 0Ë&& (
«tiveI≈utBuf„r
 !
NULL
) )

425 if–
∑°
->
∑°_I≈utSam∂eF‹m©
 =∑°->
∑°_N©iveI≈utSam∂eF‹m©
 )

428 
öputBuf„r
 = 
«tiveI≈utBuf„r
;

432 
öputBuf„r
 = 
∑°
->
∑°_I≈utBuf„r
;

434 (*
∑°
->
∑°_I≈utC⁄vîsi⁄Proc
)(
«tiveI≈utBuf„r
,Öa°->
∑°_I≈utC⁄vîsi⁄Sour˚Såide
,

435 
öputBuf„r
, 
∑°
->
∑°_I≈utC⁄vîsi⁄T¨gëSåide
,

436 
∑°
->
∑°_FømesPîU£rBuf„r
 *Öa°->
∑°_NumI≈utCh™√ls
 );

441 if–(
∑°
->
∑°_NumOuçutCh™√ls
 > 0Ë&& (
«tiveOuçutBuf„r
 !
NULL
) )

443 
ouçutBuf„r
 = (
∑°
->
∑°_OuçutC⁄vîsi⁄Proc
 =
NULL
) ?

444 
«tiveOuçutBuf„r
 : 
∑°
->
∑°_OuçutBuf„r
;

451 
u£rResu…
 = 
∑°
->
	`∑°_CÆlback
(

452 
öputBuf„r
,

453 
ouçutBuf„r
,

454 
∑°
->
∑°_FømesPîU£rBuf„r
,

455 
∑°
->
∑°_FømeCou¡
,

456 
∑°
->
∑°_U£rD©a
 );

459 
∑°
->
∑°_FømeCou¡
 +∑°->
∑°_FømesPîU£rBuf„r
;

462 if–(
∑°
->
∑°_OuçutC⁄vîsi⁄Proc
 !
NULL
 ) && (
ouçutBuf„r
 != NULL) )

464 (*
∑°
->
∑°_OuçutC⁄vîsi⁄Proc
)–
ouçutBuf„r
,Öa°->
∑°_OuçutC⁄vîsi⁄Sour˚Såide
,

465 
«tiveOuçutBuf„r
, 
∑°
->
∑°_OuçutC⁄vîsi⁄T¨gëSåide
,

466 
∑°
->
∑°_FømesPîU£rBuf„r
 *Öa°->
∑°_NumOuçutCh™√ls
 );

469  
u£rResu…
;

470 
	}
}

	@portaudio/pa_common/pa_host.h

1 #i‚de‡
PA_HOST_H


2 
	#PA_HOST_H


	)

40 
	~"p‹èudio.h
"

42 #ifde‡
__˝lu•lus


47 #i‚de‡
SUPPORT_AUDIO_CAPTURE


48 
	#SUPPORT_AUDIO_CAPTURE
 (1)

	)

51 #i‚de‡
öt32


52 
	töt32
;

54 #i‚de‡
uöt32


55 
	tuöt32
;

57 #i‚de‡
öt16


58 
	töt16
;

60 #i‚de‡
uöt16


61 
	tuöt16
;

65 (
	gP‹tAudioC⁄vîãr
)(

66 *
	töputBuf„r
, 
	töputSåide
,

67 *
	touçutBuf„r
, 
	touçutSåide
,

68 
	tnumSam∂es
 );

70 
	#PA_MAGIC
 (0x18273645)

	)

76 
	söã∫ÆP‹tAudioSåóm


78 
uöt32
 
	g∑°_Magic
;

81 
uöt32
 
	g∑°_FømesPîU£rBuf„r
;

82 
uöt32
 
	g∑°_NumU£rBuf„rs
;

83 
	g∑°_Sam∂eR©e
;

84 
	g∑°_NumI≈utCh™√ls
;

85 
	g∑°_NumOuçutCh™√ls
;

86 
PaDevi˚ID
 
	g∑°_I≈utDevi˚ID
;

87 
PaDevi˚ID
 
	g∑°_OuçutDevi˚ID
;

88 
PaSam∂eF‹m©
 
	g∑°_I≈utSam∂eF‹m©
;

89 
PaSam∂eF‹m©
 
	g∑°_OuçutSam∂eF‹m©
;

90 
P‹tAudioCÆlback
 *
	g∑°_CÆlback
;

91 *
	g∑°_U£rD©a
;

92 
uöt32
 
	g∑°_Fœgs
;

95 *
	g∑°_Devi˚D©a
;

96 
PaSam∂eF‹m©
 
	g∑°_N©iveOuçutSam∂eF‹m©
;

97 
PaSam∂eF‹m©
 
	g∑°_N©iveI≈utSam∂eF‹m©
;

100 vﬁ©ûê
	g∑°_IsA˘ive
;

101 vﬁ©ûê
	g∑°_St›So⁄
;

102 vﬁ©ûê
	g∑°_St›Now
;

104 *
	g∑°_I≈utBuf„r
;

105 
uöt32
 
	g∑°_I≈utBuf„rSize
;

106 *
	g∑°_OuçutBuf„r
;

107 
uöt32
 
	g∑°_OuçutBuf„rSize
;

109 
uöt32
 
	g∑°_NumCÆlbacks
;

110 
PaTime°amp
 
	g∑°_FømeCou¡
;

112 
	g∑°_AvîageInsideCou¡
;

113 
	g∑°_AvîageTŸÆCou¡
;

114 
	g∑°_Ußge
;

115 
	g∑°_IfLa°ExôVÆid
;

118 
P‹tAudioC⁄vîãr
 *
	g∑°_I≈utC⁄vîsi⁄Proc
;

119 
	g∑°_I≈utC⁄vîsi⁄Sour˚Såide
;

120 
	g∑°_I≈utC⁄vîsi⁄T¨gëSåide
;

121 
P‹tAudioC⁄vîãr
 *
	g∑°_OuçutC⁄vîsi⁄Proc
;

122 
	g∑°_OuçutC⁄vîsi⁄Sour˚Såide
;

123 
	g∑°_OuçutC⁄vîsi⁄T¨gëSåide
;

125 
	töã∫ÆP‹tAudioSåóm
;

131 
PaEº‹
 
PaHo°_Inô
( );

132 
PaEº‹
 
PaHo°_Tîm
( );

134 
PaEº‹
 
PaHo°_O≥nSåóm
–
öã∫ÆP‹tAudioSåóm
 *
∑°
 );

135 
PaEº‹
 
PaHo°_Clo£Såóm
–
öã∫ÆP‹tAudioSåóm
 *
∑°
 );

137 
PaEº‹
 
PaHo°_SèπOuçut
–
öã∫ÆP‹tAudioSåóm
 *
∑°
 );

138 
PaEº‹
 
PaHo°_St›Ouçut
–
öã∫ÆP‹tAudioSåóm
 *
∑°
, 
ab‹t
 );

139 
PaEº‹
 
PaHo°_SèπI≈ut
–
öã∫ÆP‹tAudioSåóm
 *
∑°
 );

140 
PaEº‹
 
PaHo°_St›I≈ut
–
öã∫ÆP‹tAudioSåóm
 *
∑°
, 
ab‹t
 );

141 
PaEº‹
 
PaHo°_SèπEngöe
–
öã∫ÆP‹tAudioSåóm
 *
∑°
 );

142 
PaEº‹
 
PaHo°_St›Engöe
–
öã∫ÆP‹tAudioSåóm
 *
∑°
, 
ab‹t
 );

143 
PaEº‹
 
PaHo°_SåómA˘ive
–
öã∫ÆP‹tAudioSåóm
 *
∑°
 );

145 *
PaHo°_AŒoˇãFa°Mem‹y
–
numByãs
 );

146 
PaHo°_FªeFa°Mem‹y
–*
addr
, 
numByãs
 );

149 
PaEº‹
 
PaHo°_VÆid©eSam∂eR©e
–
PaDevi˚ID
 
id
, 
ªque°edFømeR©e
,

150 *
˛o£°FømeR©ePå
 );

157 
PaHo°_IsInôülized
( );

159 
öã∫ÆP‹tAudioSåóm
* 
PaHo°_GëSåómRïª£¡©i⁄
–
P‹tAudioSåóm
 *
°ªam
 );

161 
PaHo°_FödClo£°TabÀE¡ry
–
ÆlowabÀEº‹
, c⁄° *
øãTabÀ
,

162 
numR©es
, 
‰ameR©e
 );

164 
Pa_CÆlC⁄vîtI¡16
–
öã∫ÆP‹tAudioSåóm
 *
∑°
,

165 *
«tiveI≈utBuf„r
,

166 *
«tiveOuçutBuf„r
 );

172 
	#PA_DITHER_BITS
 (15)

	)

173 
	#PA_DITHER_SCALE
 (1.0‡/ ((1<<
PA_DITHER_BITS
)-1))

	)

174 
PaC⁄vît_TrünguœrDôhî
( );

176 
PaEº‹
 
PaC⁄vît_SëupI≈ut
–
öã∫ÆP‹tAudioSåóm
 *
∑°
,

177 
PaSam∂eF‹m©
 
«tiveI≈utSam∂eF‹m©
 );

179 
PaEº‹
 
PaC⁄vît_SëupOuçut
–
öã∫ÆP‹tAudioSåóm
 *
∑°
,

180 
PaSam∂eF‹m©
 
«tiveOuçutSam∂eF‹m©
 );

182 
PaC⁄vît_Pro˚ss
–
öã∫ÆP‹tAudioSåóm
 *
∑°
,

183 *
«tiveI≈utBuf„r
,

184 *
«tiveOuçutBuf„r
 );

186 #ifde‡
__˝lu•lus


	@portaudio/pa_common/pa_lib.c

39 
	~<°dio.h
>

40 
	~<°dlib.h
>

41 
	~<°rög.h
>

42 
	~<m©h.h
>

45 #ifde‡
_WIN32


46 #i‚de‡
__MWERKS__


47 
	~<mem‹y.h
>

50 
	~<mem‹y.h
>

53 
	~"p‹èudio.h
"

54 
	~"∑_ho°.h
"

55 
	~"∑_åa˚.h
"

60 
	#PA_VALIDATE_RATE
 (0Ë

	)

66 #i‚de‡
FALSE


67 
	#FALSE
 (0)

	)

68 
	#TRUE
 (!
FALSE
)

	)

71 
	#PRINT
(
x
Ë{ 
¥ötf
 x; 
	`fÊush
(
°dout
); }

	)

72 
	#ERR_RPT
(
x
Ë
	`PRINT
(x)

	)

73 
	#DBUG
(
x
Ë

	)

74 
	#DBUGX
(
x
Ë

	)

76 
	ggInôCou¡
 = 0;

78 
PaEº‹
 
Pa_KûlSåóm
–
P‹tAudioSåóm
 *
°ªam
, 
ab‹t
 );

81 
	$PaHo°_FödClo£°TabÀE¡ry
–
ÆlowabÀEº‹
, c⁄° *
øãTabÀ
, 
numR©es
, 
‰ameR©e
 )

83 
îr
, 
möEº
 = 
ÆlowabÀEº‹
;

84 
i
, 
be°Fô
 = -1;

86  
i
=0; i<
numR©es
; i++ )

88 
îr
 = 
	`Ábs
–
‰ameR©e
 - 
øãTabÀ
[
i
] );

89 if–
îr
 < 
möEº
 )

91 
möEº
 = 
îr
;

92 
be°Fô
 = 
i
;

95  
be°Fô
;

96 
	}
}

101 
PaEº‹
 
	$PaHo°_VÆid©eSam∂eR©e
–
PaDevi˚ID
 
id
, 
ªque°edFømeR©e
,

102 *
˛o£°FømeR©ePå
 )

104 
be°R©eIndex
;

105 c⁄° 
PaDevi˚Info
 *
pdi
;

106 
pdi
 = 
	`Pa_GëDevi˚Info
–
id
 );

107 if–
pdi
 =
NULL
 )

109  
∑InvÆidDevi˚Id
;

112 if–
pdi
->
numSam∂eR©es
 == -1 )

115 if–(
ªque°edFømeR©e
 < 
pdi
->
ßm∂eR©es
[0]) ||

116 (
ªque°edFømeR©e
 > 
pdi
->
ßm∂eR©es
[1]) )

118  
∑InvÆidSam∂eR©e
;

121 *
˛o£°FømeR©ePå
 = 
ªque°edFømeR©e
;

125 
be°R©eIndex
 = 
	`PaHo°_FödClo£°TabÀE¡ry
–1.0, 
pdi
->
ßm∂eR©es
,Ödi->
numSam∂eR©es
, 
ªque°edFømeR©e
 );

126 if–
be°R©eIndex
 < 0 )  
∑InvÆidSam∂eR©e
;

127 *
˛o£°FømeR©ePå
 = 
pdi
->
ßm∂eR©es
[
be°R©eIndex
];

129  
∑NoEº‹
;

130 
	}
}

133 
PaEº‹
 
	$Pa_O≥nSåóm
(

134 
P‹tAudioSåóm
** 
°ªamPåPå
,

135 
PaDevi˚ID
 
öputDevi˚ID
,

136 
numI≈utCh™√ls
,

137 
PaSam∂eF‹m©
 
öputSam∂eF‹m©
,

138 *
öputDrivîInfo
,

139 
PaDevi˚ID
 
ouçutDevi˚ID
,

140 
numOuçutCh™√ls
,

141 
PaSam∂eF‹m©
 
ouçutSam∂eF‹m©
,

142 *
ouçutDrivîInfo
,

143 
ßm∂eR©e
,

144 
‰amesPîBuf„r
,

145 
numbîOfBuf„rs
,

146 
°ªamFœgs
,

147 
P‹tAudioCÆlback
 *
ˇŒback
,

148 *
u£rD©a
 )

150 
öã∫ÆP‹tAudioSåóm
 *
∑°
 = 
NULL
;

151 
PaEº‹
 
ªsu…
 = 
∑NoEº‹
;

152 
bôsPîI≈utSam∂e
;

153 
bôsPîOuçutSam∂e
;

155 
	`DBUG
(("Pa_OpenStream( %p, %d, %d, %d, %p, /* input */ \n",

156 
°ªamPåPå
, 
öputDevi˚ID
, 
numI≈utCh™√ls
,

157 
öputSam∂eF‹m©
, 
öputDrivîInfo
 ));

158 
	`DBUG
((" %d, %d, %d, %p, /* output */\n",

159 
ouçutDevi˚ID
, 
numOuçutCh™√ls
,

160 
ouçutSam∂eF‹m©
, 
ouçutDrivîInfo
 ));

161 
	`DBUG
((" %g, %d, %d, 0x%x, , %p )\n",

162 
ßm∂eR©e
, 
‰amesPîBuf„r
, 
numbîOfBuf„rs
,

163 
°ªamFœgs
, 
u£rD©a
 ));

166 if–(
°ªamFœgs
 & ~(
∑ClùOff
 | 
∑DôhîOff
)Ë!0 )  
∑InvÆidFœg
;

167 if–
°ªamPåPå
 =
NULL
 )  
∑BadSåómPå
;

168 if–
öputDrivîInfo
 !
NULL
 )  
∑Ho°Eº‹
;

169 if–
ouçutDrivîInfo
 !
NULL
 )  
∑Ho°Eº‹
;

170 if–(
öputDevi˚ID
 < 0Ë&& ( 
ouçutDevi˚ID
 < 0ËË 
∑InvÆidDevi˚Id
;

171 if–(
ouçutDevi˚ID
 >
	`Pa_Cou¡Devi˚s
()Ë|| (
öputDevi˚ID
 >= Pa_CountDevices()) )

173  
∑InvÆidDevi˚Id
;

175 if–(
numI≈utCh™√ls
 <0Ë&& ( 
numOuçutCh™√ls
 <0ËË 
∑InvÆidCh™√lCou¡
;

177 #i‡
SUPPORT_AUDIO_CAPTURE


178 if–
öputDevi˚ID
 >= 0 )

180 
PaEº‹
 
size
 = 
	`Pa_GëSam∂eSize
–
öputSam∂eF‹m©
 );

181 if–
size
 < 0 )  size;

182 
bôsPîI≈utSam∂e
 = 8 * 
size
;

183 if–(
numI≈utCh™√ls
 <0ËË 
∑InvÆidCh™√lCou¡
;

186 if–
öputDevi˚ID
 >= 0 )

188  
∑InvÆidCh™√lCou¡
;

193 if–
numI≈utCh™√ls
 > 0 )  
∑InvÆidCh™√lCou¡
;

194 
bôsPîI≈utSam∂e
 = 0;

197 if–
ouçutDevi˚ID
 >= 0 )

199 
PaEº‹
 
size
 = 
	`Pa_GëSam∂eSize
–
ouçutSam∂eF‹m©
 );

200 if–
size
 < 0 )  size;

201 
bôsPîOuçutSam∂e
 = 8 * 
size
;

202 if–(
numOuçutCh™√ls
 <0ËË 
∑InvÆidCh™√lCou¡
;

206 if–
numOuçutCh™√ls
 > 0 )  
∑InvÆidCh™√lCou¡
;

207 
bôsPîOuçutSam∂e
 = 0;

210 if–
ˇŒback
 =
NULL
 )  
∑NuŒCÆlback
;

213 
∑°
 = (
öã∫ÆP‹tAudioSåóm
 *Ë
	`PaHo°_AŒoˇãFa°Mem‹y
( (internalPortAudioStream) );

214 if–
∑°
 =
NULL
 )  
∑Insufficõ¡Mem‹y
;

215 
	`mem£t
–
∑°
, 0, (
öã∫ÆP‹tAudioSåóm
) );

216 
	`AddTø˚Mesßge
("Pa_O≥nSåóm:Öa°", (Ë
∑°
 );

218 
∑°
->
∑°_Magic
 = 
PA_MAGIC
;

219 
∑°
->
∑°_FømesPîU£rBuf„r
 = 
‰amesPîBuf„r
;

220 
∑°
->
∑°_NumU£rBuf„rs
 = 
numbîOfBuf„rs
;

221 
∑°
->
∑°_CÆlback
 = 
ˇŒback
;

222 
∑°
->
∑°_U£rD©a
 = 
u£rD©a
;

223 
∑°
->
∑°_OuçutSam∂eF‹m©
 = 
ouçutSam∂eF‹m©
;

224 
∑°
->
∑°_I≈utSam∂eF‹m©
 = 
öputSam∂eF‹m©
;

225 
∑°
->
∑°_OuçutDevi˚ID
 = 
ouçutDevi˚ID
;

226 
∑°
->
∑°_I≈utDevi˚ID
 = 
öputDevi˚ID
;

227 
∑°
->
∑°_NumI≈utCh™√ls
 = 
numI≈utCh™√ls
;

228 
∑°
->
∑°_NumOuçutCh™√ls
 = 
numOuçutCh™√ls
;

229 
∑°
->
∑°_Fœgs
 = 
°ªamFœgs
;

232 if–(
ßm∂eR©e
 < 1000.0) || (sampleRate > 200000.0) )

234 
ªsu…
 = 
∑InvÆidSam∂eR©e
;

235 
˛ónup
;

239 if–
numI≈utCh™√ls
 > 0 )

242 #i‡
PA_VALIDATE_RATE


243 
ªsu…
 = 
	`PaHo°_VÆid©eSam∂eR©e
–
öputDevi˚ID
, 
ßm∂eR©e
, &
∑°
->
∑°_Sam∂eR©e
 );

244 if–
ªsu…
 < 0 )

246 
˛ónup
;

249 
∑°
->
∑°_Sam∂eR©e
 = 
ßm∂eR©e
;

252 
∑°
->
∑°_I≈utBuf„rSize
 = 
‰amesPîBuf„r
 * 
numI≈utCh™√ls
 * ((
bôsPîI≈utSam∂e
+7) / 8);

253 
∑°
->
∑°_I≈utBuf„r
 = 
	`PaHo°_AŒoˇãFa°Mem‹y
’a°->
∑°_I≈utBuf„rSize
);

254 if–
∑°
->
∑°_I≈utBuf„r
 =
NULL
 )

256 
ªsu…
 = 
∑Insufficõ¡Mem‹y
;

257 
˛ónup
;

262 
∑°
->
∑°_I≈utBuf„r
 = 
NULL
;

266 if–
numOuçutCh™√ls
 > 0 )

268 #i‡
PA_VALIDATE_RATE


269 
ªsu…
 = 
	`PaHo°_VÆid©eSam∂eR©e
–
ouçutDevi˚ID
, 
ßm∂eR©e
, &
∑°
->
∑°_Sam∂eR©e
 );

270 if–
ªsu…
 < 0 )

272 
˛ónup
;

275 
∑°
->
∑°_Sam∂eR©e
 = 
ßm∂eR©e
;

277 
∑°
->
∑°_OuçutBuf„rSize
 = 
‰amesPîBuf„r
 * 
numOuçutCh™√ls
 * ((
bôsPîOuçutSam∂e
+7) / 8);

278 
∑°
->
∑°_OuçutBuf„r
 = 
	`PaHo°_AŒoˇãFa°Mem‹y
’a°->
∑°_OuçutBuf„rSize
);

279 if–
∑°
->
∑°_OuçutBuf„r
 =
NULL
 )

281 
ªsu…
 = 
∑Insufficõ¡Mem‹y
;

282 
˛ónup
;

287 
∑°
->
∑°_OuçutBuf„r
 = 
NULL
;

290 
ªsu…
 = 
	`PaHo°_O≥nSåóm
–
∑°
 );

291 if–
ªsu…
 < 0 ) 
˛ónup
;

293 *
°ªamPåPå
 = (*Ë
∑°
;

295  
ªsu…
;

297 
˛ónup
:

298 if–
∑°
 !
NULL
 ) 
	`Pa_Clo£Såóm
(Öast );

299 *
°ªamPåPå
 = 
NULL
;

300  
ªsu…
;

301 
	}
}

305 
PaEº‹
 
	$Pa_O≥nDeÁu…Såóm
–
P‹tAudioSåóm
** 
°ªam
,

306 
numI≈utCh™√ls
,

307 
numOuçutCh™√ls
,

308 
PaSam∂eF‹m©
 
ßm∂eF‹m©
,

309 
ßm∂eR©e
,

310 
‰amesPîBuf„r
,

311 
numbîOfBuf„rs
,

312 
P‹tAudioCÆlback
 *
ˇŒback
,

313 *
u£rD©a
 )

315  
	`Pa_O≥nSåóm
(

316 
°ªam
,

317 ((
numI≈utCh™√ls
 > 0Ë? 
	`Pa_GëDeÁu…I≈utDevi˚ID
(Ë: 
∑NoDevi˚
),

318 
numI≈utCh™√ls
, 
ßm∂eF‹m©
, 
NULL
,

319 ((
numOuçutCh™√ls
 > 0Ë? 
	`Pa_GëDeÁu…OuçutDevi˚ID
(Ë: 
∑NoDevi˚
),

320 
numOuçutCh™√ls
, 
ßm∂eF‹m©
, 
NULL
,

321 
ßm∂eR©e
, 
‰amesPîBuf„r
, 
numbîOfBuf„rs
, 
∑NoFœg
, 
ˇŒback
, 
u£rD©a
 );

322 
	}
}

325 
PaEº‹
 
	$Pa_Clo£Såóm
–
P‹tAudioSåóm
* 
°ªam
)

327 
PaEº‹
 
ªsu…
;

328 
öã∫ÆP‹tAudioSåóm
 *
∑°
;

330 
	`DBUG
(("Pa_CloseStream()\n"));

331 if–
°ªam
 =
NULL
 )  
∑BadSåómPå
;

332 
∑°
 = (
öã∫ÆP‹tAudioSåóm
 *Ë
°ªam
;

334 
	`Pa_Ab‹tSåóm
–
∑°
 );

335 
ªsu…
 = 
	`PaHo°_Clo£Såóm
–
∑°
 );

337 if–
∑°
->
∑°_I≈utBuf„r
 ) 
	`PaHo°_FªeFa°Mem‹y
–∑°->∑°_I≈utBuf„r,Öa°->
∑°_I≈utBuf„rSize
 );

338 if–
∑°
->
∑°_OuçutBuf„r
 ) 
	`PaHo°_FªeFa°Mem‹y
–∑°->∑°_OuçutBuf„r,Öa°->
∑°_OuçutBuf„rSize
 );

339 
	`PaHo°_FªeFa°Mem‹y
–
∑°
, (
öã∫ÆP‹tAudioSåóm
) );

341  
ªsu…
;

342 
	}
}

345 
PaEº‹
 
	$Pa_SèπSåóm
–
P‹tAudioSåóm
 *
°ªam
 )

347 
PaEº‹
 
ªsu…
 = 
∑Ho°Eº‹
;

348 
öã∫ÆP‹tAudioSåóm
 *
∑°
;

350 if–
°ªam
 =
NULL
 )  
∑BadSåómPå
;

351 
∑°
 = (
öã∫ÆP‹tAudioSåóm
 *Ë
°ªam
;

353 
∑°
->
∑°_FømeCou¡
 = 0.0;

355 if–
∑°
->
∑°_NumI≈utCh™√ls
 > 0 )

357 
ªsu…
 = 
	`PaHo°_SèπI≈ut
–
∑°
 );

358 
	`DBUG
(("Pa_SèπSåóm: PaHo°_SèπI≈uàªtu∫ed = 0x%X.\n", 
ªsu…
));

359 if–
ªsu…
 < 0 ) 
îr‹
;

362 if–
∑°
->
∑°_NumOuçutCh™√ls
 > 0 )

364 
ªsu…
 = 
	`PaHo°_SèπOuçut
–
∑°
 );

365 
	`DBUG
(("Pa_SèπSåóm: PaHo°_SèπOuçuàªtu∫ed = 0x%X.\n", 
ªsu…
));

366 if–
ªsu…
 < 0 ) 
îr‹
;

369 
ªsu…
 = 
	`PaHo°_SèπEngöe
–
∑°
 );

370 
	`DBUG
(("Pa_SèπSåóm: PaHo°_SèπEngöêªtu∫ed = 0x%X.\n", 
ªsu…
));

371 if–
ªsu…
 < 0 ) 
îr‹
;

373  
∑NoEº‹
;

375 
îr‹
:

376  
ªsu…
;

377 
	}
}

380 
PaEº‹
 
	$Pa_St›Såóm
–
P‹tAudioSåóm
 *
°ªam
 )

382  
	`Pa_KûlSåóm
–
°ªam
, 0 );

383 
	}
}

386 
PaEº‹
 
	$Pa_Ab‹tSåóm
–
P‹tAudioSåóm
 *
°ªam
 )

388  
	`Pa_KûlSåóm
–
°ªam
, 1 );

389 
	}
}

392 
PaEº‹
 
	$Pa_KûlSåóm
–
P‹tAudioSåóm
 *
°ªam
, 
ab‹t
 )

394 
PaEº‹
 
ªsu…
 = 
∑NoEº‹
;

395 
öã∫ÆP‹tAudioSåóm
 *
∑°
;

397 
	`DBUG
(("Pa_StopStream().\n"));

398 if–
°ªam
 =
NULL
 )  
∑BadSåómPå
;

399 
∑°
 = (
öã∫ÆP‹tAudioSåóm
 *Ë
°ªam
;

401 if–(
∑°
->
∑°_NumI≈utCh™√ls
 > 0Ë|| (∑°->
∑°_NumOuçutCh™√ls
 > 0) )

403 
ªsu…
 = 
	`PaHo°_St›Engöe
–
∑°
, 
ab‹t
 );

404 
	`DBUG
(("Pa_St›Såóm: PaHo°_St›Engöêªtu∫ed = 0x%X.\n", 
ªsu…
));

405 if–
ªsu…
 < 0 ) 
îr‹
;

408 if–
∑°
->
∑°_NumI≈utCh™√ls
 > 0 )

410 
ªsu…
 = 
	`PaHo°_St›I≈ut
–
∑°
, 
ab‹t
 );

411 
	`DBUG
(("Pa_St›Såóm: PaHo°_St›I≈uàªtu∫ed = 0x%X.\n", 
ªsu…
));

412 if–
ªsu…
 !
∑NoEº‹
 ) 
îr‹
;

415 if–
∑°
->
∑°_NumOuçutCh™√ls
 > 0 )

417 
ªsu…
 = 
	`PaHo°_St›Ouçut
–
∑°
, 
ab‹t
 );

418 
	`DBUG
(("Pa_St›Såóm: PaHo°_St›Ouçuàªtu∫ed = 0x%X.\n", 
ªsu…
));

419 if–
ªsu…
 !
∑NoEº‹
 ) 
îr‹
;

422 
îr‹
:

423 
∑°
->
∑°_Ußge
 = 0;

424 
∑°
->
∑°_IfLa°ExôVÆid
 = 0;

426  
ªsu…
;

427 
	}
}

430 
PaEº‹
 
	$Pa_SåómA˘ive
–
P‹tAudioSåóm
 *
°ªam
 )

432 
öã∫ÆP‹tAudioSåóm
 *
∑°
;

433 if–
°ªam
 =
NULL
 )  
∑BadSåómPå
;

434 
∑°
 = (
öã∫ÆP‹tAudioSåóm
 *Ë
°ªam
;

435  
	`PaHo°_SåómA˘ive
–
∑°
 );

436 
	}
}

439 c⁄° *
	$Pa_GëEº‹Text
–
PaEº‹
 
î∫um
 )

441 c⁄° *
msg
;

443 
î∫um
)

445 
∑NoEº‹
: 
msg
 = "Success"; ;

446 
∑Ho°Eº‹
: 
msg
 = "HostÉrror."; ;

447 
∑InvÆidCh™√lCou¡
: 
msg
 = "InvalidÇumber of channels."; ;

448 
∑InvÆidSam∂eR©e
: 
msg
 = "Invalid sampleÑate."; ;

449 
∑InvÆidDevi˚Id
: 
msg
 = "Invalid device ID."; ;

450 
∑InvÆidFœg
: 
msg
 = "Invalid flag."; ;

451 
∑Sam∂eF‹m©NŸSuµ‹ãd
: 
msg
 = "Sample formatÇot supported"; ;

452 
∑BadIODevi˚Combö©i⁄
: 
msg
 = "Illegal combination of I/O devices."; ;

453 
∑Insufficõ¡Mem‹y
: 
msg
 = "Insufficient memory."; ;

454 
∑Buf„rTooBig
: 
msg
 = "BufferÅoo big."; ;

455 
∑Buf„rTooSmÆl
: 
msg
 = "BufferÅoo small."; ;

456 
∑NuŒCÆlback
: 
msg
 = "No callbackÑoutine specified."; ;

457 
∑BadSåómPå
: 
msg
 = "Invalid streamÖointer."; ;

458 
∑TimedOut
 : 
msg
 = "Wait Timed Out."; ;

459 
∑I¡î«lEº‹
: 
msg
 = "Internal PortAudio Error."; ;

460 
∑Devi˚U«vaûabÀ
: 
msg
 = "Device Unavailable."; ;

461 : 
msg
 = "IllegalÉrrorÇumber."; ;

463  
msg
;

464 
	}
}

473 
	$Pa_GëCPULﬂd
–
P‹tAudioSåóm
* 
°ªam
)

475 
öã∫ÆP‹tAudioSåóm
 *
∑°
;

476 if–
°ªam
 =
NULL
 )  (Ë
∑BadSåómPå
;

477 
∑°
 = (
öã∫ÆP‹tAudioSåóm
 *Ë
°ªam
;

478  
∑°
->
∑°_Ußge
;

479 
	}
}

482 
öã∫ÆP‹tAudioSåóm
* 
	$PaHo°_GëSåómRïª£¡©i⁄
–
P‹tAudioSåóm
 *
°ªam
 )

484 
öã∫ÆP‹tAudioSåóm
* 
ªsu…
 = (öã∫ÆP‹tAudioSåóm*Ë
°ªam
;

486 if–
ªsu…
 =
NULL
 ||Ñesu…->
∑°_Magic
 !
PA_MAGIC
 )

487  
NULL
;

489  
ªsu…
;

490 
	}
}

497 
	#PA_DITHER_BITS
 (15)

	)

498 
	#PA_DITHER_SCALE
 (1.0‡/ ((1<<
PA_DITHER_BITS
)-1))

	)

499 
	$PaC⁄vît_TrünguœrDôhî
( )

501 
¥evious
 = 0;

502 
øndSìd1
 = 22222;

503 
øndSìd2
 = 5555555;

504 
cuºít
, 
highPass
;

506 
øndSìd1
 = (randSeed1 * 196314165) + 907633515;

507 
øndSìd2
 = (randSeed2 * 196314165) + 907633515;

512 
	#DITHER_SHIFT
 ((32 - 
PA_DITHER_BITS
Ë+ 1)

	)

513 
cuºít
 = ((()
øndSìd1
)>>
DITHER_SHIFT
Ë+ ((()
øndSìd2
)>>DITHER_SHIFT);

515 
highPass
 = 
cuºít
 - 
¥evious
;

516 
¥evious
 = 
cuºít
;

517  
highPass
;

518 
	}
}

527 
	$Pa_CÆlC⁄vîtI¡16
–
öã∫ÆP‹tAudioSåóm
 *
∑°
,

528 *
«tiveI≈utBuf„r
,

529 *
«tiveOuçutBuf„r
 )

531 
ãmp
;

532 
u£rResu…
;

533 
i
;

534 *
öputBuf„r
 = 
NULL
;

535 *
ouçutBuf„r
 = 
NULL
;

537 #i‡
SUPPORT_AUDIO_CAPTURE


539 if–(
∑°
->
∑°_NumI≈utCh™√ls
 > 0Ë&& (
«tiveI≈utBuf„r
 !
NULL
) )

542 
ßm∂esPîBuf„r
 = 
∑°
->
∑°_FømesPîU£rBuf„r
 *Öa°->
∑°_NumI≈utCh™√ls
;

543 
∑°
->
∑°_I≈utSam∂eF‹m©
)

546 
∑Flﬂt32
:

548 *
öBufPå
 = (*Ë
∑°
->
∑°_I≈utBuf„r
;

549 
öputBuf„r
 = 
∑°
->
∑°_I≈utBuf„r
;

550  
i
=0; i<
ßm∂esPîBuf„r
; i++ )

552 
öBufPå
[
i
] = 
«tiveI≈utBuf„r
[i] * (1.0f / 32767.0f);

557 
∑I¡32
:

560 *
öBufPå
 = (*Ë
∑°
->
∑°_I≈utBuf„r
;

561 
öputBuf„r
 = 
∑°
->
∑°_I≈utBuf„r
;

562  
i
=0; i<
ßm∂esPîBuf„r
; i++ )

564 
öBufPå
[
i
] = 
«tiveI≈utBuf„r
[i] << 16;

569 
∑I¡24
:

572 *
öBufPå
 = (*Ë
∑°
->
∑°_I≈utBuf„r
;

573 
öputBuf„r
 = 
∑°
->
∑°_I≈utBuf„r
;

574  
i
=0; i<
ßm∂esPîBuf„r
; i++ )

576 
öBufPå
[
i
] = 
«tiveI≈utBuf„r
[i] << 8;

581 
∑I¡16
:

584 
öputBuf„r
 = 
«tiveI≈utBuf„r
;

588 
∑I¡8
:

591 *
öBufPå
 = (*Ë
∑°
->
∑°_I≈utBuf„r
;

592 
öputBuf„r
 = 
∑°
->
∑°_I≈utBuf„r
;

593 if–
∑°
->
∑°_Fœgs
 & 
∑DôhîOff
 )

595  
i
=0; i<
ßm∂esPîBuf„r
; i++ )

597 
öBufPå
[
i
] = ()(
«tiveI≈utBuf„r
[i] >> 8);

602  
i
=0; i<
ßm∂esPîBuf„r
; i++ )

604 
ãmp
 = 
«tiveI≈utBuf„r
[
i
];

605 
ãmp
 +
	`PaC⁄vît_TrünguœrDôhî
() >> 8;

606 
ãmp
 = ((temp < -0x8000) ? -0x8000 : ((temp > 0x7FFF) ? 0x7FFF :Åemp));

607 
öBufPå
[
i
] = ()(
ãmp
 >> 8);

613 
∑UI¡8
:

616 *
öBufPå
 = (*Ë
∑°
->
∑°_I≈utBuf„r
;

617 
öputBuf„r
 = 
∑°
->
∑°_I≈utBuf„r
;

618 if–
∑°
->
∑°_Fœgs
 & 
∑DôhîOff
 )

620  
i
=0; i<
ßm∂esPîBuf„r
; i++ )

622 
öBufPå
[
i
] = ()((
«tiveI≈utBuf„r
[i] >> 8) + 0x80);

628  
i
=0; i<
ßm∂esPîBuf„r
; i++ )

630 
ãmp
 = 
«tiveI≈utBuf„r
[
i
];

631 
ãmp
 +
	`PaC⁄vît_TrünguœrDôhî
() >> 8;

632 
ãmp
 = ((temp < -0x8000) ? -0x8000 : ((temp > 0x7FFF) ? 0x7FFF :Åemp));

633 
öBufPå
[
i
] = ()((
ãmp
>>8) + 0x80);

646 if–(
∑°
->
∑°_NumOuçutCh™√ls
 > 0Ë&& (
«tiveOuçutBuf„r
 !
NULL
) )

649 
ouçutBuf„r
 = (
∑°
->
∑°_OuçutSam∂eF‹m©
 =
∑I¡16
) ?

650 
«tiveOuçutBuf„r
 : 
∑°
->
∑°_OuçutBuf„r
;

657 
u£rResu…
 = 
∑°
->
	`∑°_CÆlback
(

658 
öputBuf„r
,

659 
ouçutBuf„r
,

660 
∑°
->
∑°_FømesPîU£rBuf„r
,

661 
∑°
->
∑°_FømeCou¡
,

662 
∑°
->
∑°_U£rD©a
 );

664 
∑°
->
∑°_FømeCou¡
 +(
PaTime°amp
Ë∑°->
∑°_FømesPîU£rBuf„r
;

667 if–
ouçutBuf„r
 !
NULL
 )

669 
ßm∂esPîBuf„r
 = 
∑°
->
∑°_FømesPîU£rBuf„r
 *Öa°->
∑°_NumOuçutCh™√ls
;

670 
∑°
->
∑°_OuçutSam∂eF‹m©
)

672 
∑Flﬂt32
:

674 *
outBufPå
 = (*Ë
∑°
->
∑°_OuçutBuf„r
;

675 if–
∑°
->
∑°_Fœgs
 & 
∑DôhîOff
 )

677 if–
∑°
->
∑°_Fœgs
 & 
∑ClùOff
 )

679  
i
=0; i<
ßm∂esPîBuf„r
; i++ )

681 *
«tiveOuçutBuf„r
++ = (Ë(
outBufPå
[
i
] * (32767.0f));

686  
i
=0; i<
ßm∂esPîBuf„r
; i++ )

688 
ãmp
 = ()(
outBufPå
[
i
] * 32767.0f);

689 *
«tiveOuçutBuf„r
++ = ()((
ãmp
 < -0x8000) ? -0x8000 : ((temp > 0x7FFF) ? 0x7FFF :Åemp));

696  
i
=0; i<
ßm∂esPîBuf„r
; i++ )

698 
dôhî
 = 
	`PaC⁄vît_TrünguœrDôhî
()*
PA_DITHER_SCALE
;

699 
dôhîed
 = (
outBufPå
[
i
] * (32767.0f)Ë+ 
dôhî
;

700 
ãmp
 = (Ë(
dôhîed
);

701 *
«tiveOuçutBuf„r
++ = ()((
ãmp
 < -0x8000) ? -0x8000 : ((temp > 0x7FFF) ? 0x7FFF :Åemp));

707 
∑I¡32
:

709 *
outBufPå
 = (*Ë
∑°
->
∑°_OuçutBuf„r
;

710 if–
∑°
->
∑°_Fœgs
 & 
∑DôhîOff
 )

712  
i
=0; i<
ßm∂esPîBuf„r
; i++ )

714 *
«tiveOuçutBuf„r
++ = (Ë(
outBufPå
[
i
] >> 16 );

719  
i
=0; i<
ßm∂esPîBuf„r
; i++ )

722 
ãmp
 = (
outBufPå
[
i
] >> 1Ë+ 
	`PaC⁄vît_TrünguœrDôhî
();

723 
ãmp
 =Åemp >> 15;

724 *
«tiveOuçutBuf„r
++ = ()((
ãmp
 < -0x8000) ? -0x8000 : ((temp > 0x7FFF) ? 0x7FFF :Åemp));

730 
∑I¡8
:

732 *
outBufPå
 = (*Ë
∑°
->
∑°_OuçutBuf„r
;

733  
i
=0; i<
ßm∂esPîBuf„r
; i++ )

735 *
«tiveOuçutBuf„r
++ = (Ë((()
outBufPå
[
i
]) << 8);

740 
∑UI¡8
:

742 *
outBufPå
 = (*Ë
∑°
->
∑°_OuçutBuf„r
;

743  
i
=0; i<
ßm∂esPîBuf„r
; i++ )

745 *
«tiveOuçutBuf„r
++ = (Ë((()(
outBufPå
[
i
] - 0x80)) << 8);

756  
u£rResu…
;

757 
	}
}

760 
PaEº‹
 
	$Pa_Inôülize
( )

762 if–
gInôCou¡
++ > 0 )  
∑NoEº‹
;

763 
	`Re£tTø˚Mesßges
();

764  
	`PaHo°_Inô
();

765 
	}
}

767 
PaEº‹
 
	$Pa_Tîmö©e
( )

769 
PaEº‹
 
ªsu…
 = 
∑NoEº‹
;

771 if–
gInôCou¡
 =0 )  
∑NoEº‹
;

772 if–--
gInôCou¡
 == 0 )

774 
ªsu…
 = 
	`PaHo°_Tîm
();

775 
	`DumpTø˚Mesßges
();

777  
ªsu…
;

778 
	}
}

780 
	$PaHo°_IsInôülized
()

782  
gInôCou¡
;

783 
	}
}

786 
PaEº‹
 
	$Pa_GëSam∂eSize
–
PaSam∂eF‹m©
 
f‹m©
 )

788 
size
;

789 
f‹m©
 )

792 
∑UI¡8
:

793 
∑I¡8
:

794 
size
 = 1;

797 
∑I¡16
:

798 
size
 = 2;

801 
∑PackedI¡24
:

802 
size
 = 3;

805 
∑Flﬂt32
:

806 
∑I¡32
:

807 
∑I¡24
:

808 
size
 = 4;

812 
size
 = 
∑Sam∂eF‹m©NŸSuµ‹ãd
;

815  (
PaEº‹
Ë
size
;

816 
	}
}

	@portaudio/pa_common/pa_trace.c

33 
	~<°dio.h
>

34 
	~<°dlib.h
>

35 
	~<°rög.h
>

36 
	~"∑_åa˚.h
"

38 #i‡
TRACE_REALTIME_EVENTS


40 *
	gåa˚TextAºay
[
MAX_TRACE_RECORDS
];

41 
	gåa˚I¡Aºay
[
MAX_TRACE_RECORDS
];

42 
	gåa˚Index
 = 0;

43 
	gåa˚Block
 = 0;

46 
	$Re£tTø˚Mesßges
()

48 
åa˚Index
 = 0;

49 
	}
}

52 
	$DumpTø˚Mesßges
()

54 
i
;

55 
numDump
 = (
åa˚Index
 < 
MAX_TRACE_RECORDS
) ?ÅraceIndex : MAX_TRACE_RECORDS;

57 
	`¥ötf
("DumpTø˚Mesßges:Åø˚Index = %d\n", 
åa˚Index
 );

58  
i
=0; i<
numDump
; i++ )

60 
	`¥ötf
("%3d: %s = 0x%08X\n",

61 
i
, 
åa˚TextAºay
[i], 
åa˚I¡Aºay
[i] );

63 
	`Re£tTø˚Mesßges
();

64 
	`fÊush
(
°dout
);

65 
	}
}

68 
	$AddTø˚Mesßge
–*
msg
, 
d©a
 )

70 if–(
åa˚Index
 =
MAX_TRACE_RECORDS
Ë&& (
åa˚Block
 == 0) )

72 
åa˚Block
 = 1;

75 if–
åa˚Index
 < 
MAX_TRACE_RECORDS
 )

77 
åa˚TextAºay
[
åa˚Index
] = 
msg
;

78 
åa˚I¡Aºay
[
åa˚Index
] = 
d©a
;

79 
åa˚Index
++;

81 
	}
}

	@portaudio/pa_common/pa_trace.h

1 #i‚de‡
PA_TRACE_H


2 
	#PA_TRACE_H


	)

36 
	#TRACE_REALTIME_EVENTS
 (0Ë

	)

37 
	#MAX_TRACE_RECORDS
 (2048)

	)

39 #ifde‡
__˝lu•lus


49 #i‡
TRACE_REALTIME_EVENTS


51 
DumpTø˚Mesßges
();

52 
Re£tTø˚Mesßges
();

53 
AddTø˚Mesßge
–*
msg
, 
d©a
 );

57 
	#AddTø˚Mesßge
(
msg
,
d©a
Ë

	)

58 
	#Re£tTø˚Mesßges
(Ë

	)

59 
	#DumpTø˚Mesßges
(Ë

	)

63 #ifde‡
__˝lu•lus


	@portaudio/pa_common/portaudio.h

1 #i‚de‡
PORT_AUDIO_H


2 
	#PORT_AUDIO_H


	)

4 #ifde‡
__˝lu•lus


42 
	tPaEº‹
;

44 
∑NoEº‹
 = 0,

46 
∑Ho°Eº‹
 = -10000,

47 
∑InvÆidCh™√lCou¡
,

48 
∑InvÆidSam∂eR©e
,

49 
∑InvÆidDevi˚Id
,

50 
∑InvÆidFœg
,

51 
∑Sam∂eF‹m©NŸSuµ‹ãd
,

52 
∑BadIODevi˚Combö©i⁄
,

53 
∑Insufficõ¡Mem‹y
,

54 
∑Buf„rTooBig
,

55 
∑Buf„rTooSmÆl
,

56 
∑NuŒCÆlback
,

57 
∑BadSåómPå
,

58 
∑TimedOut
,

59 
∑I¡î«lEº‹
,

60 
∑Devi˚U«vaûabÀ


61 } 
	tPaEº‹Num
;

69 
PaEº‹
 
Pa_Inôülize
( );

77 
PaEº‹
 
Pa_Tîmö©e
( );

85 
Pa_GëHo°Eº‹
( );

93 c⁄° *
Pa_GëEº‹Text
–
PaEº‹
 
î∫um
 );

112 
	tPaSam∂eF‹m©
;

113 
	#∑Flﬂt32
 ((
PaSam∂eF‹m©
Ë(1<<0)Ë

	)

114 
	#∑I¡16
 ((
PaSam∂eF‹m©
Ë(1<<1)Ë

	)

115 
	#∑I¡32
 ((
PaSam∂eF‹m©
Ë(1<<2)Ë

	)

116 
	#∑I¡24
 ((
PaSam∂eF‹m©
Ë(1<<3))

	)

117 
	#∑PackedI¡24
 ((
PaSam∂eF‹m©
Ë(1<<4))

	)

118 
	#∑I¡8
 ((
PaSam∂eF‹m©
Ë(1<<5))

	)

119 
	#∑UI¡8
 ((
PaSam∂eF‹m©
Ë(1<<6))

	)

120 
	#∑Cu°omF‹m©
 ((
PaSam∂eF‹m©
Ë(1<<16))

	)

131 
	tPaDevi˚ID
;

132 
	#∑NoDevi˚
 -1

	)

134 
Pa_Cou¡Devi˚s
( );

138 
°ru˘Vîsi⁄
;

139 c⁄° *
«me
;

140 
maxI≈utCh™√ls
;

141 
maxOuçutCh™√ls
;

143 
numSam∂eR©es
;

145 c⁄° *
ßm∂eR©es
;

146 
PaSam∂eF‹m©
 
«tiveSam∂eF‹m©s
;

148 
	tPaDevi˚Info
;

166 
PaDevi˚ID
 
Pa_GëDeÁu…I≈utDevi˚ID
( );

167 
PaDevi˚ID
 
Pa_GëDeÁu…OuçutDevi˚ID
( );

182 c⁄° 
PaDevi˚Info
* 
Pa_GëDevi˚Info
–
PaDevi˚ID
 
devi˚
 );

191 
	tPaTime°amp
;

221 (
P‹tAudioCÆlback
)(

222 *
	töputBuf„r
, *
	touçutBuf„r
,

223 
	t‰amesPîBuf„r
,

224 
	tPaTime°amp
 
	toutTime
, *
	tu£rD©a
 );

235 
	#∑NoFœg
 (0)

	)

236 
	#∑ClùOff
 (1<<0Ë

	)

237 
	#∑DôhîOff
 (1<<1Ë

	)

238 
	#∑Pœtf‹mS≥cificFœgs
 (0x00010000)

	)

239 
	tPaSåómFœgs
;

247 
	tP‹tAudioSåóm
;

248 
	#PaSåóm
 
P‹tAudioSåóm


	)

325 
PaEº‹
 
Pa_O≥nSåóm
–
P‹tAudioSåóm
** 
°ªam
,

326 
PaDevi˚ID
 
öputDevi˚
,

327 
numI≈utCh™√ls
,

328 
PaSam∂eF‹m©
 
öputSam∂eF‹m©
,

329 *
öputDrivîInfo
,

330 
PaDevi˚ID
 
ouçutDevi˚
,

331 
numOuçutCh™√ls
,

332 
PaSam∂eF‹m©
 
ouçutSam∂eF‹m©
,

333 *
ouçutDrivîInfo
,

334 
ßm∂eR©e
,

335 
‰amesPîBuf„r
,

336 
numbîOfBuf„rs
,

337 
PaSåómFœgs
 
°ªamFœgs
,

338 
P‹tAudioCÆlback
 *
ˇŒback
,

339 *
u£rD©a
 );

355 
PaEº‹
 
Pa_O≥nDeÁu…Såóm
–
P‹tAudioSåóm
** 
°ªam
,

356 
numI≈utCh™√ls
,

357 
numOuçutCh™√ls
,

358 
PaSam∂eF‹m©
 
ßm∂eF‹m©
,

359 
ßm∂eR©e
,

360 
‰amesPîBuf„r
,

361 
numbîOfBuf„rs
,

362 
P‹tAudioCÆlback
 *
ˇŒback
,

363 *
u£rD©a
 );

370 
PaEº‹
 
Pa_Clo£Såóm
–
P‹tAudioSåóm
* );

380 
PaEº‹
 
Pa_SèπSåóm
–
P‹tAudioSåóm
 *
°ªam
 );

382 
PaEº‹
 
Pa_St›Såóm
–
P‹tAudioSåóm
 *
°ªam
 );

384 
PaEº‹
 
Pa_Ab‹tSåóm
–
P‹tAudioSåóm
 *
°ªam
 );

397 
PaEº‹
 
Pa_SåómA˘ive
–
P‹tAudioSåóm
 *
°ªam
 );

406 
PaTime°amp
 
Pa_SåómTime
–
P‹tAudioSåóm
 *
°ªam
 );

419 
Pa_GëCPULﬂd
–
P‹tAudioSåóm
* 
°ªam
 );

436 
Pa_GëMöNumBuf„rs
–
‰amesPîBuf„r
, 
ßm∂eR©e
 );

448 
Pa_SÀï
–
m£c
 );

457 
PaEº‹
 
Pa_GëSam∂eSize
–
PaSam∂eF‹m©
 
f‹m©
 );

460 #ifde‡
__˝lu•lus


	@portaudio/pa_mac/pa_mac.c

80 
	~<°dio.h
>

81 
	~<°dlib.h
>

82 
	~<°rög.h
>

83 
	~<mem‹y.h
>

84 
	~<m©h.h
>

87 
	~"OSUtûs.h
"

88 
	~<MacTy≥s.h
>

89 
	~<M©h64.h
>

90 
	~<Eº‹s.h
>

91 
	~<Sound.h
>

92 
	~<SoundI≈ut.h
>

93 
	~<SoundComp⁄íts.h
>

94 
	~<Devi˚s.h
>

95 
	~<D©eTimeUtûs.h
>

96 
	~<Timî.h
>

97 
	~<Ge°Æt.h
>

99 
	~"p‹èudio.h
"

100 
	~"∑_ho°.h
"

101 
	~"∑_åa˚.h
"

103 #i‚de‡
FALSE


104 
	#FALSE
 (0)

	)

105 
	#TRUE
 (!
FALSE
)

	)

116 
	#PA_MAX_USAGE_ALLOWED
 (0.92)

	)

119 
	#PRINT
(
x
Ë{ 
¥ötf
 x; 
	`fÊush
(
°dout
); }

	)

120 
	#ERR_RPT
(
x
Ë
	`PRINT
(x)

	)

121 
	#DBUG
(
x
Ë

	)

122 
	#DBUGX
(
x
Ë

	)

124 
	#MAC_PHYSICAL_FRAMES_PER_BUFFER
 (512Ë

	)

125 
	#MAC_VIRTUAL_FRAMES_PER_BUFFER
 (4096Ë

	)

126 
	#PA_MIN_NUM_HOST_BUFFERS
 (2)

	)

127 
	#PA_MAX_NUM_HOST_BUFFERS
 (16Ë

	)

128 
	#PA_MAX_DEVICE_INFO
 (32)

	)

131 
	#DoubÀToUnsig√dFixed
(
x
Ë((
Unsig√dFixed
Ë((xË* 65536.0))

	)

132 
	#Unsig√dFixedToDoubÀ
(
fx
Ë((()(fx)Ë* (1.0/(1<<16)))

	)

138 
	sMu…iBuf„r


140 *
	mbuf„rs
[
PA_MAX_NUM_HOST_BUFFERS
];

141 
	mnumBuf„rs
;

142 
	m√xtWrôe
;

143 
	m√xtRód
;

145 
	tMu…iBuf„r
;

148 
	sPaHo°SoundC⁄åﬁ


150 
UI¡64
 
	m∑hsc_E¡ryCou¡
;

151 
	m∑hsc_Invî£Mi¸osPîHo°Buf„r
;

154 vﬁ©ûê
	m∑hsc_IsRec‹dög
;

155 vﬁ©ûê
	m∑hsc_St›Rec‹dög
;

156 vﬁ©ûê
	m∑hsc_IfInsideCÆlback
;

158 
SPB
 
	m∑hsc_I≈utP¨ams
;

159 
SICom∂ëi⁄UPP
 
	m∑hsc_I≈utCom∂ëi⁄Proc
;

160 
Mu…iBuf„r
 
	m∑hsc_I≈utMu…iBuf„r
;

161 
öt32
 
	m∑hsc_ByãsPîI≈utHo°Buf„r
;

162 
öt32
 
	m∑hsc_I≈utRefNum
;

164 
CmpSoundHódî
 
	m∑hsc_SoundHódîs
[
PA_MAX_NUM_HOST_BUFFERS
];

165 
öt32
 
	m∑hsc_ByãsPîOuçutHo°Buf„r
;

166 
SndCh™√lPå
 
	m∑hsc_Ch™√l
;

167 
SndCÆlBackUPP
 
	m∑hsc_OuçutCom∂ëi⁄Proc
;

168 
öt32
 
	m∑hsc_NumOutsQueued
;

169 
öt32
 
	m∑hsc_NumOutsPœyed
;

170 
PaTime°amp
 
	m∑hsc_NumFømesD⁄e
;

171 
UI¡64
 
	m∑hsc_WhíFømesD⁄eIn¸emíãd
;

173 
öt32
 
	m∑hsc_NumHo°Buf„rs
;

174 
öt32
 
	m∑hsc_FømesPîHo°Buf„r
;

175 
öt32
 
	m∑hsc_U£rBuf„rsPîHo°Buf„r
;

176 
öt32
 
	m∑hsc_MöFømesPîHo°Buf„r
;

178 
	tPaHo°SoundC⁄åﬁ
;

181 
	söã∫ÆP‹tAudioDevi˚


183 
	m∑d_Devi˚RefNum
;

184 
	m∑d_Devi˚Buf„rSize
;

185 
Comp⁄ít
 
	m∑d_Idítifõr
;

186 
PaDevi˚Info
 
	m∑d_Info
;

188 
	töã∫ÆP‹tAudioDevi˚
;

193 
	gsNumDevi˚s
 = 0;

194 
öã∫ÆP‹tAudioDevi˚
 
	gsDevi˚s
[
PA_MAX_DEVICE_INFO
] = { 0 };

195 
öt32
 
	gsPaHo°Eº‹
 = 0;

196 
	gsDeÁu…OuçutDevi˚ID
;

197 
	gsDeÁu…I≈utDevi˚ID
;

202 
PaEº‹
 
PaMac_TimeSli˚
–
öã∫ÆP‹tAudioSåóm
 *
∑°
, 
öt16
 *
macOuçutBufPå
 );

203 
PaEº‹
 
PaMac_CÆlU£rLo›
–
öã∫ÆP‹tAudioSåóm
 *
∑°
, 
öt16
 *
outPå
 );

204 
PaEº‹
 
PaMac_Rec‹dNext
–
öã∫ÆP‹tAudioSåóm
 *
∑°
 );

205 
PaMac_SèπLﬂdCÆcuœti⁄
–
öã∫ÆP‹tAudioSåóm
 *
∑°
 );

206 
PaMac_GëMöNumBuf„rs
–
möFømesPîHo°Buf„r
, 
‰amesPîBuf„r
, 
ßm∂eR©e
 );

207 *
PaMac_GëSam∂eR©esFromH™dÀ
 ( 
numR©es
, 
H™dÀ
 
h
 );

208 
PaEº‹
 
PaMac_SˇnI≈utDevi˚s
( );

209 
PaEº‹
 
PaMac_SˇnOuçutDevi˚s
( );

210 
PaEº‹
 
PaMac_QuîyOuçutDevi˚Info
–
Comp⁄ít
 
idítifõr
, 
öã∫ÆP‹tAudioDevi˚
 *
ùad
 );

211 
PaEº‹
 
PaMac_QuîyI≈utDevi˚Info
–
Så255
 
devi˚Name
, 
öã∫ÆP‹tAudioDevi˚
 *
ùad
 );

212 
PaMac_InôSoundHódî
–
öã∫ÆP‹tAudioSåóm
 *
∑°
, 
CmpSoundHódî
 *
¢dHódî
 );

213 
PaMac_EndLﬂdCÆcuœti⁄
–
öã∫ÆP‹tAudioSåóm
 *
∑°
 );

214 
PaMac_PœyNext
 ( 
öã∫ÆP‹tAudioSåóm
 *
∑°
, 
ödex
 );

215 
PaMac_FûlNextOuçutBuf„r
–
öã∫ÆP‹tAudioSåóm
 *
∑°
, 
ödex
 );

216 
∑sˇl
 
PaMac_I≈utCom∂ëi⁄Proc
(
SPBPå
 
ªcP¨ams
);

217 
∑sˇl
 
PaMac_OuçutCom∂ëi⁄Proc
 (
SndCh™√lPå
 
theCh™√l
, 
SndComm™d
 * 
theCmd
);

218 
PaEº‹
 
PaMac_BackgroundM™agî
–
öã∫ÆP‹tAudioSåóm
 *
∑°
, 
ödex
 );

219 
PaHo°_GëTŸÆBuf„rFømes
–
öã∫ÆP‹tAudioSåóm
 *
∑°
 );

220 
Mac_IsVútuÆMem‹yOn
( );

221 
PToCSåög
(* 
öSåög
, * 
outSåög
);

222 
CToPSåög
(*
öSåög
, * 
outSåög
);

223 *
Mu…iBuf„r_GëNextWrôeBuf„r
–
Mu…iBuf„r
 *
mbuf
 );

224 *
Mu…iBuf„r_GëNextRódBuf„r
–
Mu…iBuf„r
 *
mbuf
 );

225 
Mu…iBuf„r_GëNextRódIndex
–
Mu…iBuf„r
 *
mbuf
 );

226 
Mu…iBuf„r_GëNextWrôeIndex
–
Mu…iBuf„r
 *
mbuf
 );

227 
Mu…iBuf„r_IsWrôóbÀ
–
Mu…iBuf„r
 *
mbuf
 );

228 
Mu…iBuf„r_IsRódabÀ
–
Mu…iBuf„r
 *
mbuf
 );

229 
Mu…iBuf„r_Adv™˚RódIndex
–
Mu…iBuf„r
 *
mbuf
 );

230 
Mu…iBuf„r_Adv™˚WrôeIndex
–
Mu…iBuf„r
 *
mbuf
 );

237 *
	$Mu…iBuf„r_GëNextWrôeBuf„r
–
Mu…iBuf„r
 *
mbuf
 )

239  
mbuf
->
buf„rs
[mbuf->
√xtWrôe
 % mbuf->
numBuf„rs
];

240 
	}
}

241 *
	$Mu…iBuf„r_GëNextRódBuf„r
–
Mu…iBuf„r
 *
mbuf
 )

243  
mbuf
->
buf„rs
[mbuf->
√xtRód
 % mbuf->
numBuf„rs
];

244 
	}
}

245 
	$Mu…iBuf„r_GëNextRódIndex
–
Mu…iBuf„r
 *
mbuf
 )

247  
mbuf
->
√xtRód
 % mbuf->
numBuf„rs
;

248 
	}
}

249 
	$Mu…iBuf„r_GëNextWrôeIndex
–
Mu…iBuf„r
 *
mbuf
 )

251  
mbuf
->
√xtWrôe
 % mbuf->
numBuf„rs
;

252 
	}
}

254 
	$Mu…iBuf„r_IsWrôóbÀ
–
Mu…iBuf„r
 *
mbuf
 )

256 
bufsFuŒ
 = 
mbuf
->
√xtWrôe
 - mbuf->
√xtRód
;

257 if–
bufsFuŒ
 < 0 ) bufsFuŒ +(2 * 
mbuf
->
numBuf„rs
);

258  (
bufsFuŒ
 < 
mbuf
->
numBuf„rs
);

259 
	}
}

260 
	$Mu…iBuf„r_IsRódabÀ
–
Mu…iBuf„r
 *
mbuf
 )

262 
bufsFuŒ
 = 
mbuf
->
√xtWrôe
 - mbuf->
√xtRód
;

263 if–
bufsFuŒ
 < 0 ) bufsFuŒ +(2 * 
mbuf
->
numBuf„rs
);

264  (
bufsFuŒ
 > 0);

265 
	}
}

266 
	$Mu…iBuf„r_Adv™˚RódIndex
–
Mu…iBuf„r
 *
mbuf
 )

268 
ãmp
 = 
mbuf
->
√xtRód
 + 1;

269 
mbuf
->
√xtRód
 = (
ãmp
 >(2 * mbuf->
numBuf„rs
)) ? 0 :Åemp;

270 
	}
}

271 
	$Mu…iBuf„r_Adv™˚WrôeIndex
–
Mu…iBuf„r
 *
mbuf
 )

273 
ãmp
 = 
mbuf
->
√xtWrôe
 + 1;

274 
mbuf
->
√xtWrôe
 = (
ãmp
 >(2 * mbuf->
numBuf„rs
)) ? 0 :Åemp;

275 
	}
}

280 
	$PToCSåög
(* 
öSåög
, * 
outSåög
)

282 
i
;

283 
i
=0; i<
öSåög
[0]; i++)

284 
outSåög
[
i
] = 
öSåög
[i+1];

285 
outSåög
[
i
]=0;

286 
	}
}

291 
	$CToPSåög
(* 
öSåög
, * 
outSåög
)

293 
Àn
 = 
	`°æí
(
öSåög
);

294 
i
;

296 i‡(
Àn
 > 255)

297 
Àn
 = 255;

300 
outSåög
[0] = ()
Àn
;

301 
i
=0; i<
Àn
; i++)

302 
outSåög
[
i
+1] = 
öSåög
[i];

303 
	}
}

306 
PaEº‹
 
	$PaHo°_Tîm
( )

308 
i
;

309 
PaDevi˚Info
 *
dev
;

310 *
øãs
;

312  
i
=0; i<
sNumDevi˚s
; i++ )

314 
dev
 = &
sDevi˚s
[
i
].
∑d_Info
;

315 
øãs
 = (*Ë
dev
->
ßm∂eR©es
;

316 if–(
øãs
 !
NULL
ËË
	`‰ì
(Ñates );

317 
dev
->
ßm∂eR©es
 = 
NULL
;

318 if–
dev
->
«me
 !
NULL
 ) 
	`‰ì
( (*) dev->name );

319 
dev
->
«me
 = 
NULL
;

321 
sNumDevi˚s
 = 0;

322  
∑NoEº‹
;

323 
	}
}

329 
PaEº‹
 
	$PaHo°_Inô
( )

331 
PaEº‹
 
îr
;

332 
NumVîsi⁄V¨ü¡
 
vîsi⁄
;

334 
vîsi⁄
.
∑πs
 = 
	`SndSoundM™agîVîsi⁄
();

335 
	`DBUG
(("SndSoundM™agîVîsi⁄ = 0x%x\n", 
vîsi⁄
.
whﬁe
));

338 
îr
 = (
PaEº‹
Ë
	`Pa_Cou¡Devi˚s
();

339 if–
îr
 < 0 ) Érr;

340  
∑NoEº‹
;

341 
	}
}

346 
PaEº‹
 
	$PaMac_SˇnOuçutDevi˚s
( )

348 
PaEº‹
 
îr
;

349 
Comp⁄ít
 
idítifõr
=0;

350 
Comp⁄ítDes¸ùti⁄
 
¸ôîü
 = { 
kSoundOuçutDevi˚Ty≥
, 0, 0, 0, 0 };

351 
numComp⁄íts
, 
i
;

354 
numComp⁄íts
 = 
	`Cou¡Comp⁄íts
 (&
¸ôîü
);

355 
idítifõr
 = 0;

356 
sDeÁu…OuçutDevi˚ID
 = 
sNumDevi˚s
;

357 
i
 = 0; i < 
numComp⁄íts
; i++)

360 
idítifõr
 = 
	`FödNextComp⁄ít
–idítifõr, &
¸ôîü
);

361 
sDevi˚s
[
sNumDevi˚s
].
∑d_Idítifõr
 = 
idítifõr
;

364 
îr
 = 
	`PaMac_QuîyOuçutDevi˚Info
–
idítifõr
, &
sDevi˚s
[
sNumDevi˚s
] );

365 if–
îr
 < 0 ) Érr;

366 
sNumDevi˚s
++;

370  
∑NoEº‹
;

371 
	}
}

376 
PaEº‹
 
	$PaMac_SˇnI≈utDevi˚s
( )

378 
Så255
 
devi˚Name
;

379 
cou¡
;

380 
H™dÀ
 
ic⁄H™dÀ
;

381 
PaEº‹
 
îr
;

382 
OSEº
 
o£º
;

383 
cou¡
 = 1;

384 
sDeÁu…I≈utDevi˚ID
 = 
sNumDevi˚s
;

385 
åue
)

388 
o£º
 = 
	`SPBGëIndexedDevi˚
(
cou¡
++, 
devi˚Name
, &
ic⁄H™dÀ
);

389 
	`DBUG
(("PaMac_SˇnI≈utDevi˚s: SPBGëIndexedDevi˚Ñëu∫ed %d\n", 
o£º
 ));

392 if(
o£º
 !
noEº
) ;

394 if(
o£º
 =
siBadSoundInDevi˚
)

396 
o£º
 = 
noEº
;

399 if(
o£º
 !
noEº
)

401 
	`ERR_RPT
(("ERROR: SPBGëIndexedDevi˚(%d,,Ëªtu∫ed %d\n", 
cou¡
-1, 
o£º
 ));

402 
sPaHo°Eº‹
 = 
o£º
;

403  
∑Ho°Eº‹
;

406 
	`Di•o£H™dÀ
(
ic⁄H™dÀ
);

408 
îr
 = 
	`PaMac_QuîyI≈utDevi˚Info
–
devi˚Name
, &
sDevi˚s
[
sNumDevi˚s
] );

409 
	`DBUG
(("PaMac_SˇnI≈utDevi˚s: PaMac_QuîyI≈utDevi˚Infÿªtu∫ed %d\n", 
îr
 ));

410 if–
îr
 < 0 ) Érr;

411 if–
îr
 =1 ) 
sNumDevi˚s
++;

414  
∑NoEº‹
;

415 
	}
}

419 #¥agm®
›ti⁄s
 
Æign
=
mac68k


422 
öt16
 
	mnumR©es
;

423 
Unsig√dFixed
 (**
øãs
)[];

425 
	tSR©eInfo
;

426 #¥agm®
›ti⁄s
 
Æign
=
ª£t


436 
PaEº‹
 
	$PaMac_QuîyOuçutDevi˚Info
–
Comp⁄ít
 
idítifõr
, 
öã∫ÆP‹tAudioDevi˚
 *
ùad
 )

438 
Àn
;

439 
OSEº
 
îr
;

440 
PaDevi˚Info
 *
dev
 = &
ùad
->
∑d_Info
;

441 
SR©eInfo
 
§öfo
 = {0};

442 
numR©es
;

443 
Comp⁄ítDes¸ùti⁄
 
ãmpD
;

444 
H™dÀ
 
«meH
=
nû
, 
öfoH
Úû, 
ic⁄H
=nil;

446 
	`mem£t
–
ùad
, 0, (
öã∫ÆP‹tAudioDevi˚
) );

448 
dev
->
°ru˘Vîsi⁄
 = 1;

449 
dev
->
maxI≈utCh™√ls
 = 0;

450 
dev
->
maxOuçutCh™√ls
 = 2;

451 
dev
->
«tiveSam∂eF‹m©s
 = 
∑I¡16
;

454 
îr
 = 
	`GëSoundOuçutInfo
(
idítifõr
, 
siSam∂eR©eAvaûabÀ
, (
På
Ë&
§öfo
);

455 if(
îr
 !
noEº
)

457 
	`ERR_RPT
(("Eº‹ i¿PaMac_QuîyOuçutDevi˚Info: GëSoundOuçutInfÿsiSam∂eR©eAvaûabÀÑëu∫ed %d\n", 
îr
 ));

458 
îr‹
;

460 
numR©es
 = 
§öfo
.numRates;

461 
	`DBUG
(("PaMac_QuîyOuçutDevi˚Info: sröfo.numR©e†%d\n", 
§öfo
.
numR©es
 ));

462 if–
numR©es
 == 0 )

464 
dev
->
numSam∂eR©es
 = -1;

465 
numR©es
 = 2;

469 
dev
->
numSam∂eR©es
 = 
numR©es
;

471 
dev
->
ßm∂eR©es
 = 
	`PaMac_GëSam∂eR©esFromH™dÀ
–
numR©es
, (
H™dÀ
Ë
§öfo
.
øãs
 );

472 if(
dev
->
ßm∂eR©es
 =
NULL
)

474 
	`DBUG
(("PaMac_QueryOutputDeviceInfo: PaMac_GetSampleRatesFromHandleálloc failed.\n"));

475  
∑Insufficõ¡Mem‹y
;

479 
	`Di•o£H™dÀ
((
H™dÀ
Ë
§öfo
.
øãs
);

484 
	`DBUG
(("PaMac_QueryOutputDeviceInfo: get componentÇame.\n"));

485 
öfoH
 = 
nû
;

486 
ic⁄H
 = 
nû
;

487 
«meH
 = 
	`NewH™dÀ
(0);

488 if(
«meH
 =
nû
Ë 
∑Insufficõ¡Mem‹y
;

489 
îr
 = 
	`GëComp⁄ítInfo
(
idítifõr
, &
ãmpD
, 
«meH
, 
öfoH
, 
ic⁄H
);

490 i‡(
îr
)

492 
	`ERR_RPT
(("Eº‹ i¿PaMac_QuîyOuçutDevi˚Info: GëComp⁄ítInfÿªtu∫ed %d\n", 
îr
 ));

493 
îr‹
;

496 
Àn
 = ((*)(*
«meH
))[0] + 1;

497 
	`DBUG
(("PaMac_QuîyOuçutDevi˚Info:ÇewÜí = %d\n", 
Àn
 ));

499 
dev
->
«me
 = (*Ë
	`mÆloc
(
Àn
);

500 if–
dev
->
«me
 =
NULL
 )

502 
	`Di•o£H™dÀ
(
«meH
);

503  
∑Insufficõ¡Mem‹y
;

507 
	`PToCSåög
((*)(*
«meH
), (*Ë
dev
->
«me
);

508 
	`Di•o£H™dÀ
(
«meH
);

511 
	`DBUG
(("PaMac_QuîyOuçutDevi˚Info: dev->«mê%s\n", 
dev
->
«me
 ));

512  
∑NoEº‹
;

514 
îr‹
:

515 
sPaHo°Eº‹
 = 
îr
;

516  
∑Ho°Eº‹
;

518 
	}
}

528 
PaEº‹
 
	$PaMac_QuîyI≈utDevi˚Info
–
Så255
 
devi˚Name
, 
öã∫ÆP‹tAudioDevi˚
 *
ùad
 )

530 
PaEº‹
 
ªsu…
 = 
∑NoEº‹
;

531 
Àn
;

532 
OSEº
 
îr
;

533 
mRefNum
 = 0;

534 
ãmpL
;

535 
öt16
 
ãmpS
;

536 
Fixed
 
ãmpF
;

537 
PaDevi˚Info
 *
dev
 = &
ùad
->
∑d_Info
;

538 
SR©eInfo
 
§öfo
 = {0};

539 
numR©es
;

541 
	`mem£t
–
ùad
, 0, (
öã∫ÆP‹tAudioDevi˚
) );

542 
dev
->
maxOuçutCh™√ls
 = 0;

545 
îr
 = 
	`SPBO≥nDevi˚
–
devi˚Name
, 
siWrôePîmissi⁄
, &
mRefNum
);

546 i‡(
îr
)

549 
îr
 = 
	`SPBO≥nDevi˚
–
devi˚Name
, 
siRódPîmissi⁄
, &
mRefNum
);

550 i‡(
îr
)

552 
	`ERR_RPT
(("Eº‹ i¿PaMac_QuîyI≈utDevi˚Info: SPBO≥nDevi˚Ñëu∫ed %d\n", 
îr
 ));

553 
sPaHo°Eº‹
 = 
îr
;

554  
∑Ho°Eº‹
;

559 
	#PrötDevi˚Info
(
£À˘‹
,
v¨
) \

560 
îr
 = 
	`SPBGëDevi˚Info
(
mRefNum
, 
£À˘‹
, (
På
Ë&
v¨
); \

561 i‡(
îr
) { \

562 
	`DBUG
(("query %s failed\n", #selector )); \

565 
	`DBUG
(("quîy %†0x%x\n", #£À˘‹, 
v¨
 )); \

566 }

	)

568 
	`PrötDevi˚Info
–
siC⁄töuous
, 
ãmpS
 );

569 
	`PrötDevi˚Info
–
siAsync
, 
ãmpS
 );

570 
	`PrötDevi˚Info
–
siNumbîCh™√ls
, 
ãmpS
 );

571 
	`PrötDevi˚Info
–
siSam∂eSize
, 
ãmpS
 );

572 
	`PrötDevi˚Info
–
siSam∂eR©e
, 
ãmpF
 );

573 
	`PrötDevi˚Info
–
siCh™√lAvaûabÀ
, 
ãmpS
 );

574 
	`PrötDevi˚Info
–
siA˘iveCh™√ls
, 
ãmpL
 );

575 
	`PrötDevi˚Info
–
siDevi˚Buf„rInfo
, 
ãmpL
 );

577 
îr
 = 
	`SPBGëDevi˚Info
(
mRefNum
, 
siA˘iveCh™√ls
, (
På
Ë&
ãmpL
);

578 i‡(
îr
 =0Ë
	`DBUG
(("%†0x%x\n", "siA˘iveCh™√ls", 
ãmpL
 ));

580 
îr
 = 
	`SPBGëDevi˚Info
(
mRefNum
, 
siAsync
, (
På
Ë&
ãmpS
);

581 i‡(
îr
)

583 
	`ERR_RPT
(("Eº‹ i¿PaMac_QuîyI≈utDevi˚Info: SPBGëDevi˚InfÿsiAsyn¯ªtu∫ed %d\n", 
îr
 ));

584 
îr‹
;

586 if–
ãmpS
 =0 ) 
u£Àss
;

588 
îr
 = 
	`SPBGëDevi˚Info
(
mRefNum
, 
siCh™√lAvaûabÀ
, (
På
Ë&
ãmpS
);

589 i‡(
îr
)

591 
	`ERR_RPT
(("Eº‹ i¿PaMac_QuîyI≈utDevi˚Info: SPBGëDevi˚InfÿsiCh™√lAvaûabÀÑëu∫ed %d\n", 
îr
 ));

592 
îr‹
;

594 
dev
->
maxI≈utCh™√ls
 = 
ãmpS
;

597 
îr
 = 
	`SPBGëDevi˚Info
(
mRefNum
, 
siSam∂eR©eAvaûabÀ
, (
På
Ë&
§öfo
);

598 i‡(
îr
)

600 
	`ERR_RPT
(("Eº‹ i¿PaMac_QuîyI≈utDevi˚Info: SPBGëDevi˚InfÿsiSam∂eR©eAvaûabÀÑëu∫ed %d\n", 
îr
 ));

601 
îr‹
;

604 
numR©es
 = 
§öfo
.numRates;

605 
	`DBUG
(("numR©e†0x%x\n", 
numR©es
 ));

606 if–
numR©es
 == 0 )

608 
dev
->
numSam∂eR©es
 = -1;

609 
numR©es
 = 2;

613 
dev
->
numSam∂eR©es
 = 
numR©es
;

615 
dev
->
ßm∂eR©es
 = 
	`PaMac_GëSam∂eR©esFromH™dÀ
–
numR©es
, (
H™dÀ
Ë
§öfo
.
øãs
 );

617 
	`Di•o£H™dÀ
((
H™dÀ
Ë
§öfo
.
øãs
);

620 
îr
 = 
	`SPBGëDevi˚Info
(
mRefNum
, 
siDevi˚Buf„rInfo
, (
På
Ë&
ãmpL
);

621 i‡(
îr
)

623 
	`ERR_RPT
(("Eº‹ i¿PaMac_QuîyI≈utDevi˚Info: SPBGëDevi˚InfÿsiDevi˚Buf„rInfÿªtu∫ed %d\n", 
îr
 ));

624 
îr‹
;

626 
ùad
->
∑d_Devi˚Buf„rSize
 = 
ãmpL
;

627 
	`DBUG
(("siDevi˚Buf„rInfÿ%d\n", 
ãmpL
 ));

630 
îr
 = 
	`SPBGëDevi˚Info
(
mRefNum
, 
siSam∂eSize
, (
På
Ë&
ãmpS
);

631 i‡(
îr
)

633 
	`ERR_RPT
(("Eº‹ i¿PaMac_QuîyI≈utDevi˚Info: SPBGëDevi˚InfÿsiSam∂eSizêªtu∫ed %d\n", 
îr
 ));

634 
îr‹
;

636  
ãmpS
 )

639 
dev
->
«tiveSam∂eF‹m©s
 = 
∑I¡32
;

643 
dev
->
«tiveSam∂eF‹m©s
 = 
∑I¡16
;

646 
	`DBUG
(("«tiveSam∂eF‹m©†%d\n", 
dev
->
«tiveSam∂eF‹m©s
 ));

649 
Àn
 = 
devi˚Name
[0] + 1;

650 
dev
->
«me
 = (*Ë
	`mÆloc
(
Àn
);

651 if–
dev
->
«me
 =
NULL
 )

653 
ªsu…
 = 
∑Insufficõ¡Mem‹y
;

654 
˛ónup
;

656 
	`PToCSåög
(
devi˚Name
, (*Ë
dev
->
«me
);

657 
	`DBUG
(("devi˚Namê%s\n", 
dev
->
«me
 ));

658 
ªsu…
 = (
PaEº‹
) 1;

660 
˛ónup
:

661 if–
mRefNum
 ) 
	`SPBClo£Devi˚
(mRefNum);

662  
ªsu…
;

664 
îr‹
:

665 if–
mRefNum
 ) 
	`SPBClo£Devi˚
(mRefNum);

666 
sPaHo°Eº‹
 = 
îr
;

667  
∑Ho°Eº‹
;

669 
u£Àss
:

670 if–
mRefNum
 ) 
	`SPBClo£Devi˚
(mRefNum);

671  (
PaEº‹
) 0;

672 
	}
}

677 * 
	$PaMac_GëSam∂eR©esFromH™dÀ
 ( 
numR©es
, 
H™dÀ
 
h
 )

679 
OSEº
 
îr
 = 
noEº
;

680 
SI¡8
 
hSèã
;

681 
i
;

682 
Unsig√dFixed
 *
fixedR©es
;

683 *
øãs
 = (*Ë
	`mÆloc
–
numR©es
 * () );

684 if–
øãs
 =
NULL
 )  NULL;

688 
hSèã
 = 
	`HGëSèã
 (
h
);

689 i‡(!(
îr
 = 
	`MemEº‹
 ()))

691 
	`HLock
 (
h
);

692 i‡(!(
îr
 = 
	`MemEº‹
 ( )))

694 
fixedR©es
 = (
UI¡32
 *Ë*
h
;

695  
i
=0; i<
numR©es
; i++ )

697 
øãs
[
i
] = 
	`Unsig√dFixedToDoubÀ
(
fixedR©es
[i]);

700 
	`HSëSèã
 (
h
,
hSèã
);

701 
îr
 = 
	`MemEº‹
 ( );

704 if–
îr
 )

706 
	`‰ì
–
øãs
 );

707 
	`ERR_RPT
(("Eº‹ i¿PaMac_GëSam∂eR©esFromH™dÀ = %d\n", 
îr
 ));

709  
øãs
;

710 
	}
}

713 
	$Pa_Cou¡Devi˚s
()

715 
PaEº‹
 
îr
;

716 
	`DBUG
(("Pa_CountDevices()\n"));

718 if–
sNumDevi˚s
 <= 0 )

720 
îr
 = 
	`PaMac_SˇnOuçutDevi˚s
();

721 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

722 
îr
 = 
	`PaMac_SˇnI≈utDevi˚s
();

723 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

725  
sNumDevi˚s
;

727 
îr‹
:

728 
	`PaHo°_Tîm
();

729 
	`DBUG
(("Pa_Cou¡Devi˚s:Ñëu∫†%d\n", 
îr
 ));

730  
îr
;

732 
	}
}

735 c⁄° 
PaDevi˚Info
* 
	$Pa_GëDevi˚Info
–
PaDevi˚ID
 
id
 )

737 if–(
id
 < 0Ë|| ( id >
	`Pa_Cou¡Devi˚s
()ËË 
NULL
;

738  &
sDevi˚s
[
id
].
∑d_Info
;

739 
	}
}

741 
PaDevi˚ID
 
	$Pa_GëDeÁu…I≈utDevi˚ID
( )

743  
sDeÁu…I≈utDevi˚ID
;

744 
	}
}

747 
PaDevi˚ID
 
	$Pa_GëDeÁu…OuçutDevi˚ID
( )

749  
sDeÁu…OuçutDevi˚ID
;

750 
	}
}

753 
	$PaMac_SèπLﬂdCÆcuœti⁄
–
öã∫ÆP‹tAudioSåóm
 *
∑°
 )

755 
PaHo°SoundC⁄åﬁ
 *
∑hsc
 = (PaHo°SoundC⁄åﬁ *Ë
∑°
->
∑°_Devi˚D©a
;

756 
Unsig√dWide
 
widePad
;

757 if–
∑hsc
 =
NULL
 ) ;

759 
	`Mi¸o£c⁄ds
–&
widePad
 );

760 
∑hsc
->
∑hsc_E¡ryCou¡
 = 
	`Unsig√dWideToUI¡64
–
widePad
 );

761 
	}
}

768 
	$PaMac_EndLﬂdCÆcuœti⁄
–
öã∫ÆP‹tAudioSåóm
 *
∑°
 )

770 
Unsig√dWide
 
widePad
;

771 
UI¡64
 
cuºítCou¡
;

772 
u£csEœp£d
;

773 
√wUßge
;

774 
PaHo°SoundC⁄åﬁ
 *
∑hsc
 = (PaHo°SoundC⁄åﬁ *Ë
∑°
->
∑°_Devi˚D©a
;

775 if–
∑hsc
 =
NULL
 ) ;

780 
	#LOWPASS_COEFFICIENT_0
 (0.95)

	)

781 
	#LOWPASS_COEFFICIENT_1
 (0.99999 - 
LOWPASS_COEFFICIENT_0
)

	)

782 
	`Mi¸o£c⁄ds
–&
widePad
 );

783 
cuºítCou¡
 = 
	`Unsig√dWideToUI¡64
–
widePad
 );

785 
u£csEœp£d
 = (Ë
	`U64Subåa˘
(
cuºítCou¡
, 
∑hsc
->
∑hsc_E¡ryCou¡
);

788 
√wUßge
 = 
u£csEœp£d
 * 
∑hsc
->
∑hsc_Invî£Mi¸osPîHo°Buf„r
;

790 
∑°
->
∑°_Ußge
 = (
LOWPASS_COEFFICIENT_0
 *Öast->past_Usage) +

791 (
LOWPASS_COEFFICIENT_1
 * 
√wUßge
);

793 
	}
}

798 
PaEº‹
 
	$PaHo°_SèπI≈ut
–
öã∫ÆP‹tAudioSåóm
 *
∑°
 )

800 
PaHo°SoundC⁄åﬁ
 *
∑hsc
 = (PaHo°SoundC⁄åﬁ *Ë
∑°
->
∑°_Devi˚D©a
;

801 
∑hsc
->
∑hsc_IsRec‹dög
 = 0;

802 
∑hsc
->
∑hsc_St›Rec‹dög
 = 0;

803 
∑hsc
->
∑hsc_I≈utMu…iBuf„r
.
√xtWrôe
 = 0;

804 
∑hsc
->
∑hsc_I≈utMu…iBuf„r
.
√xtRód
 = 0;

805  
	`PaMac_Rec‹dNext
–
∑°
 );

806 
	}
}

813 
PaEº‹
 
	$PaHo°_St›I≈ut
–
öã∫ÆP‹tAudioSåóm
 *
∑°
, 
ab‹t
 )

815 
öt32
 
timeOutM£c
;

816 
PaEº‹
 
ªsu…
 = 
∑NoEº‹
;

817 
OSEº
 
îr
 = 0;

818 
mRefNum
;

819 
PaHo°SoundC⁄åﬁ
 *
∑hsc
 = (PaHo°SoundC⁄åﬁ *Ë
∑°
->
∑°_Devi˚D©a
;

820 if–
∑hsc
 =
NULL
 )  
∑NoEº‹
;

822 (Ë
ab‹t
;

824 
mRefNum
 = 
∑hsc
->
∑hsc_I≈utRefNum
;

826 
	`DBUG
(("PaHo°_St›I≈ut: mRefNum = %d\n", 
mRefNum
 ));

827 if–
mRefNum
 )

829 
	`DBUG
(("PaHo°_St›I≈ut:Öahsc_IsRec‹dög = %d\n", 
∑hsc
->
∑hsc_IsRec‹dög
 ));

830 if–
∑hsc
->
∑hsc_IsRec‹dög
 )

833 
∑hsc
->
∑hsc_St›Rec‹dög
 = 1;

834 
îr
 = 
	`SPBSt›Rec‹dög
(
mRefNum
);

835 
	`DBUG
(("PaHo°_St›I≈ut:ÅhíÖahsc_IsRec‹dög = %d\n", 
∑hsc
->
∑hsc_IsRec‹dög
 ));

838 
timeOutM£c
 = (
öt32
Ë((1500.0 * 
∑hsc
->
∑hsc_FømesPîHo°Buf„r
Ë/ 
∑°
->
∑°_Sam∂eR©e
);

840  !
îr
 && 
∑hsc
->
∑hsc_IsRec‹dög
 && (
timeOutM£c
 > 0))

842 
	`Pa_SÀï
(20);

843 
timeOutM£c
 -= 20;

845 if–
timeOutM£c
 <= 0 )

847 
	`ERR_RPT
(("PaHost_StopInput:Åimed out!\n"));

848  
∑TimedOut
;

852 if–
îr
 )

854 
sPaHo°Eº‹
 = 
îr
;

855 
ªsu…
 = 
∑Ho°Eº‹
;

858 
	`DBUG
(("PaHo°_St›I≈ut: föished.\n", 
mRefNum
 ));

859  
ªsu…
;

860 
	}
}

863 
	$PaMac_InôSoundHódî
–
öã∫ÆP‹tAudioSåóm
 *
∑°
, 
CmpSoundHódî
 *
¢dHódî
 )

865 
¢dHódî
->
numCh™√ls
 = 
∑°
->
∑°_NumOuçutCh™√ls
;

866 
¢dHódî
->
ßm∂eR©e
 = 
	`DoubÀToUnsig√dFixed
(
∑°
->
∑°_Sam∂eR©e
);

867 
¢dHódî
->
lo›Sèπ
 = 0;

868 
¢dHódî
->
lo›End
 = 0;

869 
¢dHódî
->
ícode
 = 
cmpSH
;

870 
¢dHódî
->
ba£Fªquícy
 = 
kMiddÀC
;

871 
¢dHódî
->
m¨kîChunk
 = 
nû
;

872 
¢dHódî
->
futuªU£2
 = 
nû
;

873 
¢dHódî
->
°©eV¨s
 = 
nû
;

874 
¢dHódî
->
À·OvîSam∂es
 = 
nû
;

875 
¢dHódî
->
com¥essi⁄ID
 = 0;

876 
¢dHódî
->
∑ckëSize
 = 0;

877 
¢dHódî
->
¢thID
 = 0;

878 
¢dHódî
->
ßm∂eSize
 = 8 * (
öt16
);

879 
¢dHódî
->
ßm∂eAªa
[0] = 0;

880 
¢dHódî
->
f‹m©
 = 
kSoundNŸCom¥es£d
;

881 
	}
}

883 
	$SëFømesD⁄e
–
PaHo°SoundC⁄åﬁ
 *
∑hsc
, 
PaTime°amp
 
‰amesD⁄e
 )

885 
Unsig√dWide
 
now
;

886 
	`Mi¸o£c⁄ds
–&
now
 );

887 
∑hsc
->
∑hsc_NumFømesD⁄e
 = 
‰amesD⁄e
;

888 
∑hsc
->
∑hsc_WhíFømesD⁄eIn¸emíãd
 = 
	`Unsig√dWideToUI¡64
–
now
 );

889 
	}
}

892 
PaEº‹
 
	$PaHo°_SèπOuçut
–
öã∫ÆP‹tAudioSåóm
 *
∑°
 )

894 
SndComm™d
 
∑u£Comm™d
;

895 
SndComm™d
 
ªsumeComm™d
;

896 
i
;

897 
OSEº
 
îr‹
;

898 
PaHo°SoundC⁄åﬁ
 *
∑hsc
 = (PaHo°SoundC⁄åﬁ *Ë
∑°
->
∑°_Devi˚D©a
;

899 if–
∑hsc
 =
NULL
 )  
∑I¡î«lEº‹
;

900 if–
∑hsc
->
∑hsc_Ch™√l
 =
NULL
 )  
∑I¡î«lEº‹
;

902 
∑°
->
∑°_St›So⁄
 = 0;

903 
∑°
->
∑°_IsA˘ive
 = 1;

904 
∑hsc
->
∑hsc_NumOutsQueued
 = 0;

905 
∑hsc
->
∑hsc_NumOutsPœyed
 = 0;

907 
	`SëFømesD⁄e
–
∑hsc
, 0.0 );

910 
∑u£Comm™d
.
cmd
 = 
∑u£Cmd
;

911 
∑u£Comm™d
.
∑øm1
 =Öau£Comm™d.
∑øm2
 = 0;

912 
îr‹
 = 
	`SndDoComm™d
 (
∑hsc
->
∑hsc_Ch™√l
, &
∑u£Comm™d
, 
åue
);

913 i‡(
noEº
 !
îr‹
Ë
exô
;

916 
i
 = 0; i<
∑hsc
->
∑hsc_NumHo°Buf„rs
; i++)

918 
	`PaMac_PœyNext
–
∑°
, 
i
 );

922 
ªsumeComm™d
.
cmd
 = 
ªsumeCmd
;

923 
ªsumeComm™d
.
∑øm1
 =ÑesumeComm™d.
∑øm2
 = 0;

924 
îr‹
 = 
	`SndDoImmedüã
–
∑hsc
->
∑hsc_Ch™√l
, &
ªsumeComm™d
 );

925 i‡(
noEº
 !
îr‹
Ë
exô
;

927  
∑NoEº‹
;

928 
exô
:

929 
∑°
->
∑°_IsA˘ive
 = 0;

930 
sPaHo°Eº‹
 = 
îr‹
;

931 
	`ERR_RPT
(("Eº‹ i¿PaHo°_SèπOuçut: SndDoComm™dÑëu∫ed %d\n", 
îr‹
 ));

932  
∑Ho°Eº‹
;

933 
	}
}

936 
	$PaHo°_GëTŸÆBuf„rFømes
–
öã∫ÆP‹tAudioSåóm
 *
∑°
 )

938 
PaHo°SoundC⁄åﬁ
 *
∑hsc
 = (PaHo°SoundC⁄åﬁ *Ë
∑°
->
∑°_Devi˚D©a
;

939  (Ë(
∑hsc
->
∑hsc_NumHo°Buf„rs
 *Öahsc->
∑hsc_FømesPîHo°Buf„r
);

940 
	}
}

947 
PaEº‹
 
	$PaHo°_St›Ouçut
–
öã∫ÆP‹tAudioSåóm
 *
∑°
, 
ab‹t
 )

949 
öt32
 
timeOutM£c
;

950 
PaHo°SoundC⁄åﬁ
 *
∑hsc
 = (PaHo°SoundC⁄åﬁ *Ë
∑°
->
∑°_Devi˚D©a
;

951 if–
∑hsc
 =
NULL
 )  
∑NoEº‹
;

952 if–
∑hsc
->
∑hsc_Ch™√l
 =
NULL
 )  
∑NoEº‹
;

954 
	`DBUG
(("PaHost_StopOutput()\n"));

955 if–
∑°
->
∑°_IsA˘ive
 =0 )  
∑NoEº‹
;

958 if–
ab‹t
 ) 
∑°
->
∑°_St›Now
 = 1;

959 
∑°
->
∑°_St›So⁄
 = 1;

961 
timeOutM£c
 = (
öt32
Ë((1500.0 * 
	`PaHo°_GëTŸÆBuf„rFømes
–
∑°
 )Ë/Öa°->
∑°_Sam∂eR©e
);

963  
∑°
->
∑°_IsA˘ive
 && (
timeOutM£c
 > 0))

965 
	`Pa_SÀï
(20);

966 
timeOutM£c
 -= 20;

968 if–
timeOutM£c
 <= 0 )

970 
	`ERR_RPT
(("PaHost_StopOutput:Åimed out!\n"));

971  
∑TimedOut
;

973  
∑NoEº‹
;

974 
	}
}

977 
PaEº‹
 
	$PaHo°_SèπEngöe
–
öã∫ÆP‹tAudioSåóm
 *
∑°
 )

979 (Ë
∑°
;

980  
∑NoEº‹
;

981 
	}
}

984 
PaEº‹
 
	$PaHo°_St›Engöe
–
öã∫ÆP‹tAudioSåóm
 *
∑°
, 
ab‹t
 )

986 (Ë
∑°
;

987 (Ë
ab‹t
;

988  
∑NoEº‹
;

989 
	}
}

991 
PaEº‹
 
	$PaHo°_SåómA˘ive
–
öã∫ÆP‹tAudioSåóm
 *
∑°
 )

993 
PaHo°SoundC⁄åﬁ
 *
∑hsc
 = (PaHo°SoundC⁄åﬁ *Ë
∑°
->
∑°_Devi˚D©a
;

994  (
PaEº‹
Ë–
∑°
->
∑°_IsA˘ive
 + 
∑hsc
->
∑hsc_IsRec‹dög
 );

995 
	}
}

996 
	$Mac_IsVútuÆMem‹yOn
( )

998 
©å
;

999 
OSEº
 
ªsu…
 = 
	`Ge°Æt
–
ge°ÆtVMAâr
, &
©å
 );

1000 
	`DBUG
(("ge°ÆtVMAâ∏: 0x%x\n", 
©å
 ));

1001  ((
©å
 >> 
ge°ÆtVMHasPagögC⁄åﬁ
 ) & 1);

1002 
	}
}

1008 
	$PaHo°_CÆcNumHo°Buf„rs
–
öã∫ÆP‹tAudioSåóm
 *
∑°
 )

1010 
PaHo°SoundC⁄åﬁ
 *
∑hsc
 = (PaHo°SoundC⁄åﬁ *Ë
∑°
->
∑°_Devi˚D©a
;

1011 
öt32
 
möNumBuf„rs
;

1012 
öt32
 
möFømesPîHo°Buf„r
;

1013 
öt32
 
möTŸÆFømes
;

1014 
öt32
 
u£rBuf„rsPîHo°Buf„r
;

1015 
öt32
 
‰amesPîHo°Buf„r
;

1016 
öt32
 
numHo°Buf„rs
;

1018 
möFømesPîHo°Buf„r
 = 
∑hsc
->
∑hsc_MöFømesPîHo°Buf„r
;

1019 
möFømesPîHo°Buf„r
 = (minFramesPerHostBuffer + 7) & ~7;

1020 
	`DBUG
(("PaHo°_CÆcNumHo°Buf„rs: möFømesPîHo°Buf„∏%d\n", 
möFømesPîHo°Buf„r
 ));

1027 
möNumBuf„rs
 = 
	`PaMac_GëMöNumBuf„rs
–
möFømesPîHo°Buf„r
, 
∑°
->
∑°_FømesPîU£rBuf„r
,Öa°->
∑°_Sam∂eR©e
 );

1029 
∑°
->
∑°_NumU£rBuf„rs
 = ( 
möNumBuf„rs
 >Öast->past_NumUserBuffers ) ? minNumBuffers :Öast->past_NumUserBuffers;

1030 
	`DBUG
(("PaHo°_CÆcNumHo°Buf„rs: möÖa°_NumU£rBuf„r†%d\n", 
∑°
->
∑°_NumU£rBuf„rs
 ));

1031 
möTŸÆFømes
 = 
∑°
->
∑°_NumU£rBuf„rs
 *Öa°->
∑°_FømesPîU£rBuf„r
;

1034 if–(
öt32
Ë
∑°
->
∑°_FømesPîU£rBuf„r
 < 
möFømesPîHo°Buf„r
 )

1036 
u£rBuf„rsPîHo°Buf„r
 =

1037 (
möFømesPîHo°Buf„r
 + 
∑°
->
∑°_FømesPîU£rBuf„r
 - 1) /

1038 
∑°
->
∑°_FømesPîU£rBuf„r
;

1042 
u£rBuf„rsPîHo°Buf„r
 = 1;

1044 
‰amesPîHo°Buf„r
 = 
∑°
->
∑°_FømesPîU£rBuf„r
 * 
u£rBuf„rsPîHo°Buf„r
;

1047 
numHo°Buf„rs
 = (
möTŸÆFømes
 + 
‰amesPîHo°Buf„r
 - 1) / framesPerHostBuffer;

1049 if–
numHo°Buf„rs
 < 
PA_MIN_NUM_HOST_BUFFERS
)

1051 
numHo°Buf„rs
 = 
PA_MIN_NUM_HOST_BUFFERS
;

1056 
numHo°Buf„rs
 > 
PA_MAX_NUM_HOST_BUFFERS
)

1058 
u£rBuf„rsPîHo°Buf„r
 += 1;

1059 
‰amesPîHo°Buf„r
 = 
∑°
->
∑°_FømesPîU£rBuf„r
 * 
u£rBuf„rsPîHo°Buf„r
;

1060 
numHo°Buf„rs
 = (
möTŸÆFømes
 + 
‰amesPîHo°Buf„r
 - 1) / framesPerHostBuffer;

1064 
∑hsc
->
∑hsc_U£rBuf„rsPîHo°Buf„r
 = 
u£rBuf„rsPîHo°Buf„r
;

1065 
∑hsc
->
∑hsc_FømesPîHo°Buf„r
 = 
‰amesPîHo°Buf„r
;

1066 
∑hsc
->
∑hsc_NumHo°Buf„rs
 = 
numHo°Buf„rs
;

1067 
	`DBUG
(("PaHo°_CÆcNumHo°Buf„rs:Öahsc_U£rBuf„rsPîHo°Buf„∏%d\n", 
∑hsc
->
∑hsc_U£rBuf„rsPîHo°Buf„r
 ));

1068 
	`DBUG
(("PaHo°_CÆcNumHo°Buf„rs:Öahsc_NumHo°Buf„r†%d\n", 
∑hsc
->
∑hsc_NumHo°Buf„rs
 ));

1069 
	`DBUG
(("PaHo°_CÆcNumHo°Buf„rs:Öahsc_FømesPîHo°Buf„∏%d\n", 
∑hsc
->
∑hsc_FømesPîHo°Buf„r
 ));

1070 
	`DBUG
(("PaHo°_CÆcNumHo°Buf„rs:Öa°_NumU£rBuf„r†%d\n", 
∑°
->
∑°_NumU£rBuf„rs
 ));

1071 
	}
}

1074 
PaEº‹
 
	$PaHo°_O≥nSåóm
–
öã∫ÆP‹tAudioSåóm
 *
∑°
 )

1076 
OSEº
 
îr
;

1077 
PaEº‹
 
ªsu…
 = 
∑Ho°Eº‹
;

1078 
PaHo°SoundC⁄åﬁ
 *
∑hsc
;

1079 
i
;

1081 
∑hsc
 = (
PaHo°SoundC⁄åﬁ
 *Ë
	`PaHo°_AŒoˇãFa°Mem‹y
((PaHostSoundControl));

1082 if–
∑hsc
 =
NULL
 )

1084  
∑Insufficõ¡Mem‹y
;

1086 
∑°
->
∑°_Devi˚D©a
 = (*Ë
∑hsc
;

1089 if–(
∑°
->
∑°_NumI≈utCh™√ls
 > 0Ë&& 
	`Mac_IsVútuÆMem‹yOn
() )

1091 
∑hsc
->
∑hsc_MöFømesPîHo°Buf„r
 = 
MAC_VIRTUAL_FRAMES_PER_BUFFER
;

1095 
∑hsc
->
∑hsc_MöFømesPîHo°Buf„r
 = 
MAC_PHYSICAL_FRAMES_PER_BUFFER
;

1098 
	`PaHo°_CÆcNumHo°Buf„rs
–
∑°
 );

1101 
∑hsc
->
∑hsc_Invî£Mi¸osPîHo°Buf„r
 = 
∑°
->
∑°_Sam∂eR©e
 / (1000000.0 *Öahsc->
∑hsc_FømesPîHo°Buf„r
);

1104 if–
∑°
->
∑°_NumOuçutCh™√ls
 > 0 )

1107 
∑hsc
->
∑hsc_Ch™√l
 = 0L;

1108 
îr
 = 
	`SndNewCh™√l
(&
∑hsc
->
∑hsc_Ch™√l
, 
ßm∂edSy¡h
, 0, 
nû
);

1109 if(
îr
 != 0)

1111 
	`ERR_RPT
(("Eº‹ i¿PaHo°_O≥nSåóm: SndNewCh™√»ªtu∫ed 0x%x\n", 
îr
 ));

1112 
îr‹
;

1117 #i‡
TARGET_API_MAC_CARBON


1118 
∑hsc
->
∑hsc_OuçutCom∂ëi⁄Proc
 = 
	`NewSndCÆlBackUPP
(
PaMac_OuçutCom∂ëi⁄Proc
);

1120 
∑hsc
->
∑hsc_OuçutCom∂ëi⁄Proc
 = 
	`NewSndCÆlBackProc
(
PaMac_OuçutCom∂ëi⁄Proc
);

1123 
∑hsc
->
∑hsc_Ch™√l
->
ˇŒBack
 =Öahsc->
∑hsc_OuçutCom∂ëi⁄Proc
;

1125 
∑hsc
->
∑hsc_ByãsPîOuçutHo°Buf„r
 =Öahsc->
∑hsc_FømesPîHo°Buf„r
 * 
∑°
->
∑°_NumOuçutCh™√ls
 * (
öt16
);

1126 
i
 = 0; i<
∑hsc
->
∑hsc_NumHo°Buf„rs
; i++)

1128 *
buf
 = (*)
	`PaHo°_AŒoˇãFa°Mem‹y
(
∑hsc
->
∑hsc_ByãsPîOuçutHo°Buf„r
);

1129 i‡(
buf
 =
NULL
)

1131 
	`ERR_RPT
(("Eº‹ i¿PaHo°_O≥nSåóm: couldÇŸáŒoˇã ouçuàbuf„r. Sizê\n", 
∑hsc
->
∑hsc_ByãsPîOuçutHo°Buf„r
 ));

1132 
memîr‹
;

1135 
	`PaMac_InôSoundHódî
–
∑°
, &
∑hsc
->
∑hsc_SoundHódîs
[
i
] );

1136 
∑hsc
->
∑hsc_SoundHódîs
[
i
].
ßm∂ePå
 = 
buf
;

1137 
∑hsc
->
∑hsc_SoundHódîs
[
i
].
numFømes
 = (Ë∑hsc->
∑hsc_FømesPîHo°Buf„r
;

1141 #ifde‡
SUPPORT_AUDIO_CAPTURE


1144 if–
∑°
->
∑°_NumI≈utCh™√ls
 > 0 )

1146 
öt16
 
ãmpS
;

1147 
ãmpL
;

1148 
Fixed
 
ãmpF
;

1149 
mRefNum
;

1150 
Så255
 
«mePSåög
;

1151 #i‡
TARGET_API_MAC_CARBON


1152 
∑hsc
->
∑hsc_I≈utCom∂ëi⁄Proc
 = 
	`NewSICom∂ëi⁄UPP
((
SICom∂ëi⁄ProcPå
)
PaMac_I≈utCom∂ëi⁄Proc
);

1154 
∑hsc
->
∑hsc_I≈utCom∂ëi⁄Proc
 = 
	`NewSICom∂ëi⁄Proc
((
ProcPå
)
PaMac_I≈utCom∂ëi⁄Proc
);

1156 
∑hsc
->
∑hsc_ByãsPîI≈utHo°Buf„r
 =Öahsc->
∑hsc_FømesPîHo°Buf„r
 * 
∑°
->
∑°_NumI≈utCh™√ls
 * (
öt16
);

1157 
i
 = 0; i<
∑hsc
->
∑hsc_NumHo°Buf„rs
; i++)

1159 *
buf
 = (*Ë
	`PaHo°_AŒoˇãFa°Mem‹y
(
∑hsc
->
∑hsc_ByãsPîI≈utHo°Buf„r
);

1160 i‡–
buf
 =
NULL
 )

1162 
	`ERR_RPT
(("PaHo°_O≥nSåóm: couldÇŸáŒoˇã i≈uà buf„r. Sizê\n", 
∑hsc
->
∑hsc_ByãsPîI≈utHo°Buf„r
 ));

1163 
memîr‹
;

1165 
∑hsc
->
∑hsc_I≈utMu…iBuf„r
.
buf„rs
[
i
] = 
buf
;

1167 
∑hsc
->
∑hsc_I≈utMu…iBuf„r
.
numBuf„rs
 =Öahsc->
∑hsc_NumHo°Buf„rs
;

1170 
	`CToPSåög
((*)
sDevi˚s
[
∑°
->
∑°_I≈utDevi˚ID
].
∑d_Info
.
«me
, 
«mePSåög
);

1171 
îr
 = 
	`SPBO≥nDevi˚
(
«mePSåög
, 
siWrôePîmissi⁄
, &
mRefNum
);

1173 i‡(
îr
Ë
îr‹
;

1174 
∑hsc
->
∑hsc_I≈utRefNum
 = 
mRefNum
;

1175 
	`DBUG
(("PaHo°_O≥nSåóm: mRefNum = %d\n", 
mRefNum
 ));

1178 
ãmpS
 = 1;

1179 
îr
 = 
	`SPBSëDevi˚Info
(
mRefNum
, 
siC⁄töuous
, (
På
Ë&
ãmpS
);

1180 i‡(
îr
)

1182 
	`ERR_RPT
(("Eº‹ i¿PaHo°_O≥nSåóm: SPBSëDevi˚InfÿsiC⁄töuou†ªtu∫ed %d\n", 
îr
 ));

1183 
îr‹
;

1186 
ãmpL
 = 0x03;

1187 
îr
 = 
	`SPBSëDevi˚Info
(
mRefNum
, 
siA˘iveCh™√ls
, (
På
Ë&
ãmpL
);

1188 i‡(
îr
)

1190 
	`DBUG
(("PaHo°_O≥nSåóm: sëtög siA˘iveCh™√l†ªtu∫ed 0x%x. Eº‹ ign‹ed.\n", 
îr
 ));

1194 
ãmpS
 = 
∑°
->
∑°_NumI≈utCh™√ls
;

1195 
îr
 = 
	`SPBSëDevi˚Info
(
mRefNum
, 
siNumbîCh™√ls
, (
På
Ë&
ãmpS
);

1196 i‡(
îr
)

1198 
	`ERR_RPT
(("Eº‹ i¿PaHo°_O≥nSåóm: SPBSëDevi˚InfÿsiNumbîCh™√l†ªtu∫ed %d\n", 
îr
 ));

1199 
îr‹
;

1202 
ãmpF
 = (()
∑°
->
∑°_Sam∂eR©e
) << 16;

1203 
îr
 = 
	`SPBSëDevi˚Info
(
mRefNum
, 
siSam∂eR©e
, (
På
Ë&
ãmpF
);

1204 i‡(
îr
)

1206 
	`ERR_RPT
(("Eº‹ i¿PaHo°_O≥nSåóm: SPBSëDevi˚InfÿsiSam∂eR©êªtu∫ed %d\n", 
îr
 ));

1207 
îr‹
;

1211 
∑hsc
->
∑hsc_I≈utP¨ams
.
öRefNum
 = 
mRefNum
;

1212 
∑hsc
->
∑hsc_I≈utP¨ams
.
mûli£c⁄ds
 = 0;

1213 
∑hsc
->
∑hsc_I≈utP¨ams
.
com∂ëi⁄Routöe
 =Öahsc->
∑hsc_I≈utCom∂ëi⁄Proc
;

1214 
∑hsc
->
∑hsc_I≈utP¨ams
.
öãºu±Routöe
 = 0;

1215 
∑hsc
->
∑hsc_I≈utP¨ams
.
u£rL⁄g
 = (Ë
∑°
;

1216 
∑hsc
->
∑hsc_I≈utP¨ams
.
unu£d1
 = 0;

1219 
	`DBUG
(("PaHost_OpenStream: complete.\n"));

1220  
∑NoEº‹
;

1222 
îr‹
:

1223 
	`PaHo°_Clo£Såóm
–
∑°
 );

1224 
	`ERR_RPT
(("PaHo°_O≥nSåóm: sPaHo°Eº‹ = 0x%x.\n", 
îr
 ));

1225 
sPaHo°Eº‹
 = 
îr
;

1226  
∑Ho°Eº‹
;

1228 
memîr‹
:

1229 
	`PaHo°_Clo£Såóm
–
∑°
 );

1230  
∑Insufficõ¡Mem‹y
;

1231 
	}
}

1238 
PaEº‹
 
	$PaHo°_Clo£Såóm
–
öã∫ÆP‹tAudioSåóm
 *
∑°
 )

1240 
PaEº‹
 
ªsu…
 = 
∑NoEº‹
;

1241 
OSEº
 
îr
 = 0;

1242 
i
;

1243 
PaHo°SoundC⁄åﬁ
 *
∑hsc
;

1245 
	`DBUG
(("PaHo°_Clo£Såóm–0x%x )\n", 
∑°
 ));

1247 if–
∑°
 =
NULL
 )  
∑BadSåómPå
;

1249 
∑hsc
 = (
PaHo°SoundC⁄åﬁ
 *Ë
∑°
->
∑°_Devi˚D©a
;

1250 if–
∑hsc
 =
NULL
 )  
∑NoEº‹
;

1252 if–
∑°
->
∑°_NumOuçutCh™√ls
 > 0 )

1255 if–
∑hsc
->
∑hsc_Ch™√l
 !
NULL
 ) 
	`SndDi•o£Ch™√l
’ahsc->∑hsc_Ch™√l, 
TRUE
);

1257 
i
 = 0; i<
∑hsc
->
∑hsc_NumHo°Buf„rs
; i++)

1259 
På
 
p
 = (PåË
∑hsc
->
∑hsc_SoundHódîs
[
i
].
ßm∂ePå
;

1260 if–
p
 !
NULL
 ) 
	`PaHo°_FªeFa°Mem‹y
–p, 
∑hsc
->
∑hsc_ByãsPîOuçutHo°Buf„r
 );

1265 if–
∑°
->
∑°_NumI≈utCh™√ls
 > 0 )

1267 if–
∑hsc
->
∑hsc_I≈utRefNum
 )

1269 
îr
 = 
	`SPBClo£Devi˚
(
∑hsc
->
∑hsc_I≈utRefNum
);

1270 
∑hsc
->
∑hsc_I≈utRefNum
 = 0;

1271 if–
îr
 )

1273 
sPaHo°Eº‹
 = 
îr
;

1274 
ªsu…
 = 
∑Ho°Eº‹
;

1278 
i
 = 0; i<
∑hsc
->
∑hsc_I≈utMu…iBuf„r
.
numBuf„rs
; i++)

1280 
På
 
p
 = (PåË
∑hsc
->
∑hsc_I≈utMu…iBuf„r
.
buf„rs
[
i
];

1281 if–
p
 !
NULL
 ) 
	`PaHo°_FªeFa°Mem‹y
–p, 
∑hsc
->
∑hsc_ByãsPîI≈utHo°Buf„r
 );

1286 
∑°
->
∑°_Devi˚D©a
 = 
NULL
;

1287 
	`PaHo°_FªeFa°Mem‹y
–
∑hsc
, (
PaHo°SoundC⁄åﬁ
) );

1289 
	`DBUG
(("PaHo°_Clo£Såóm: com∂ëe.\n", 
∑°
 ));

1290  
ªsu…
;

1291 
	}
}

1293 
	$Pa_GëMöNumBuf„rs
–
‰amesPîU£rBuf„r
, 
ßm∂eR©e
 )

1298  
	`PaMac_GëMöNumBuf„rs
–
MAC_VIRTUAL_FRAMES_PER_BUFFER
, 
‰amesPîU£rBuf„r
, 
ßm∂eR©e
 );

1299 
	}
}

1301 
	$PaMac_GëMöNumBuf„rs
–
möFømesPîHo°Buf„r
, 
‰amesPîU£rBuf„r
, 
ßm∂eR©e
 )

1303 
möU£rPîHo°
 = ( 
möFømesPîHo°Buf„r
 + 
‰amesPîU£rBuf„r
 - 1) / framesPerUserBuffer;

1304 
numBufs
 = 
PA_MIN_NUM_HOST_BUFFERS
 * 
möU£rPîHo°
;

1305 if–
numBufs
 < 
PA_MIN_NUM_HOST_BUFFERS
 )ÇumBufs = PA_MIN_NUM_HOST_BUFFERS;

1306 (Ë
ßm∂eR©e
;

1307  
numBufs
;

1308 
	}
}

1311 
	$Pa_SÀï
–
öt32
 
m£c
 )

1313 
EvítRec‹d
 
evít
;

1314 
öt32
 
¶ìpTime
, 
ídTime
;

1316 
¶ìpTime
 = ((
m£c
 * 60) + 999) / 1000;

1317 if–
¶ìpTime
 < 1 ) sleepTime = 1;

1318 
ídTime
 = 
	`TickCou¡
(Ë+ 
¶ìpTime
;

1321 
	`DBUGX
(("SÀï f‹ %dÅicks.\n", 
¶ìpTime
 ));

1325 
	`WaôNextEvít
–0, &
evít
, 
¶ìpTime
, 
NULL
 );

1326 
¶ìpTime
 = 
ídTime
 - 
	`TickCou¡
();

1328  
¶ìpTime
 > 0 );

1329 
	}
}

1331 
öt32
 
	$Pa_GëHo°Eº‹
( )

1333 
öt32
 
îr
 = 
sPaHo°Eº‹
;

1334 
sPaHo°Eº‹
 = 0;

1335  
îr
;

1336 
	}
}

1344 *
	$PaHo°_AŒoˇãFa°Mem‹y
–
numByãs
 )

1346 *
addr
 = 
	`NewPåCÀ¨
–
numByãs
 );

1347 if–(
addr
 =
NULL
Ë|| (
	`MemEº‹
 () != 0) )  NULL;

1349 #i‡(
TARGET_API_MAC_CARBON
 == 0)

1350 if–
	`HﬁdMem‹y
–
addr
, 
numByãs
 ) !
noEº
 )

1352 
	`Di•o£På
–(
På
Ë
addr
 );

1353  
NULL
;

1356  
addr
;

1357 
	}
}

1363 
	$PaHo°_FªeFa°Mem‹y
–*
addr
, 
numByãs
 )

1365 if–
addr
 =
NULL
 ) ;

1366 #i‡
TARGET_API_MAC_CARBON


1367 (Ë
numByãs
;

1369 
	`UnhﬁdMem‹y
–
addr
, 
numByãs
 );

1371 
	`Di•o£På
–(
På
Ë
addr
 );

1372 
	}
}

1375 
PaTime°amp
 
	$Pa_SåómTime
–
P‹tAudioSåóm
 *
°ªam
 )

1377 
PaTime°amp
 
‰amesD⁄e1
;

1378 
PaTime°amp
 
‰amesD⁄e2
;

1379 
UI¡64
 
whíIn¸emíãd
;

1380 
Unsig√dWide
 
now
;

1381 
UI¡64
 
now64
;

1382 
mi¸osEœp£d
;

1383 
‰amesEœp£d
;

1385 
PaHo°SoundC⁄åﬁ
 *
∑hsc
;

1386 
öã∫ÆP‹tAudioSåóm
 *
∑°
 = (öã∫ÆP‹tAudioSåóm *Ë
°ªam
;

1387 if–
∑°
 =
NULL
 )  
∑BadSåómPå
;

1388 
∑hsc
 = (
PaHo°SoundC⁄åﬁ
 *Ë
∑°
->
∑°_Devi˚D©a
;

1396 
‰amesD⁄e1
 = 
∑hsc
->
∑hsc_NumFømesD⁄e
;

1397 
whíIn¸emíãd
 = 
∑hsc
->
∑hsc_WhíFømesD⁄eIn¸emíãd
;

1398 
‰amesD⁄e2
 = 
∑hsc
->
∑hsc_NumFømesD⁄e
;

1399 }  
‰amesD⁄e1
 !
‰amesD⁄e2
 );

1402 
	`Mi¸o£c⁄ds
–&
now
 );

1403 
now64
 = 
	`Unsig√dWideToUI¡64
–
now
 );

1404 
mi¸osEœp£d
 = 
	`U64Subåa˘
–
now64
, 
whíIn¸emíãd
 );

1405 
‰amesEœp£d
 = 
mi¸osEœp£d
 * 
∑°
->
∑°_Sam∂eR©e
 * 0.000001;

1407  
‰amesD⁄e1
 + 
‰amesEœp£d
;

1408 
	}
}

1413 
	ggRec‹dCou¡î
 = 0;

1414 
	ggPœyCou¡î
 = 0;

1415 
∑sˇl
 
	$PaMac_I≈utCom∂ëi⁄Proc
(
SPBPå
 
ªcP¨ams
)

1417 
PaEº‹
 
ªsu…
 = 
∑NoEº‹
;

1418 
föished
 = 1;

1419 
öã∫ÆP‹tAudioSåóm
 *
∑°
;

1420 
PaHo°SoundC⁄åﬁ
 *
∑hsc
;

1422 
gRec‹dCou¡î
 += 1;

1425 
∑°
 = (
öã∫ÆP‹tAudioSåóm
 *Ë
ªcP¨ams
->
u£rL⁄g
;

1426 if–
∑°
 =
NULL
 ) ;

1428 if–
∑°
->
∑°_Magic
 !
PA_MAGIC
 )

1430 
	`AddTø˚Mesßge
("PaMac_I≈utCom∂ëi⁄Proc: bad MAGIC,Öa°", (Ë
∑°
 );

1431 
	`AddTø˚Mesßge
("PaMac_I≈utCom∂ëi⁄Proc: bad MAGIC, magic", (Ë
∑°
->
∑°_Magic
 );

1432 
îr‹
;

1434 
∑hsc
 = (
PaHo°SoundC⁄åﬁ
 *Ë
∑°
->
∑°_Devi˚D©a
;

1435 
∑°
->
∑°_NumCÆlbacks
 += 1;

1438 if–(
ªcP¨ams
->
îr‹
 =
ab‹tEº
Ë|| 
∑hsc
->
∑hsc_St›Rec‹dög
 ) error;

1443 if(
∑°
->
∑°_NumOuçutCh™√ls
 == 0)

1445 
	`SëFømesD⁄e
–
∑hsc
,

1446 
∑hsc
->
∑hsc_NumFømesD⁄e
 +Öahsc->
∑hsc_FømesPîHo°Buf„r
 );

1447 
ªsu…
 = 
	`PaMac_CÆlU£rLo›
–
∑°
, 
NULL
 );

1451 if–(
ªsu…
 =
∑NoEº‹
Ë&& (
∑hsc
->
∑hsc_St›Rec‹dög
 == 0) )

1453 
ªsu…
 = 
	`PaMac_Rec‹dNext
–
∑°
 );

1454 if–
ªsu…
 !
∑NoEº‹
 ) 
∑hsc
->
∑hsc_IsRec‹dög
 = 0;

1456 
îr‹
;

1460 
îr‹
:

1461 
∑hsc
->
∑hsc_IsRec‹dög
 = 0;

1462 
∑hsc
->
∑hsc_St›Rec‹dög
 = 0;

1464 
	}
}

1471 
PaEº‹
 
	$PaMac_CÆlU£rLo›
–
öã∫ÆP‹tAudioSåóm
 *
∑°
, 
öt16
 *
outPå
 )

1473 
PaEº‹
 
ªsu…
 = 
∑NoEº‹
;

1474 
PaHo°SoundC⁄åﬁ
 *
∑hsc
 = (PaHo°SoundC⁄åﬁ *Ë
∑°
->
∑°_Devi˚D©a
;

1475 
öt16
 *
öPå
 = 
NULL
;

1476 
i
;

1480 if(
∑°
->
∑°_NumI≈utCh™√ls
 > 0)

1482 if–
	`Mu…iBuf„r_IsRódabÀ
–&
∑hsc
->
∑hsc_I≈utMu…iBuf„r
 ) )

1484 
öPå
 = (
öt16
 *Ë
	`Mu…iBuf„r_GëNextRódBuf„r
–&
∑hsc
->
∑hsc_I≈utMu…iBuf„r
 );

1485 
	`Mu…iBuf„r_Adv™˚RódIndex
–&
∑hsc
->
∑hsc_I≈utMu…iBuf„r
 );

1490 if–(
öPå
 !
NULL
Ë|| (
outPå
 != NULL) )

1492 
	`PaMac_SèπLﬂdCÆcuœti⁄
–
∑°
 );

1494 #ifde‡
PA_MAX_USAGE_ALLOWED


1496 if–
∑°
->
∑°_Ußge
 > 
PA_MAX_USAGE_ALLOWED
 )

1498 
∑°
->
∑°_FømeCou¡
 +(
PaTime°amp
Ë
∑hsc
->
∑hsc_FømesPîHo°Buf„r
;

1504  
i
=0; i<
∑hsc
->
∑hsc_U£rBuf„rsPîHo°Buf„r
; i++ )

1506 
ªsu…
 = (
PaEº‹
Ë
	`Pa_CÆlC⁄vîtI¡16
–
∑°
, 
öPå
, 
outPå
 );

1507 if–
ªsu…
 != 0)

1510 
∑hsc
->
∑hsc_St›Rec‹dög
 =Öahsc->
∑hsc_IsRec‹dög
;

1514 if(
öPå
 !
NULL
ËöPå +
∑°
->
∑°_FømesPîU£rBuf„r
 *Öa°->
∑°_NumI≈utCh™√ls
;

1515 if(
outPå
 !
NULL
ËoutPå +
∑°
->
∑°_FømesPîU£rBuf„r
 *Öa°->
∑°_NumOuçutCh™√ls
;

1519 
	`PaMac_EndLﬂdCÆcuœti⁄
–
∑°
 );

1521  
ªsu…
;

1522 
	}
}

1527 
PaEº‹
 
	$PaMac_Rec‹dNext
–
öã∫ÆP‹tAudioSåóm
 *
∑°
 )

1529 
PaEº‹
 
ªsu…
 = 
∑NoEº‹
;

1530 
OSEº
 
îr
;

1531 
PaHo°SoundC⁄åﬁ
 *
∑hsc
 = (PaHo°SoundC⁄åﬁ *Ë
∑°
->
∑°_Devi˚D©a
;

1533 
∑hsc
->
∑hsc_I≈utP¨ams
.
buf„rPå
 = 
	`Mu…iBuf„r_GëNextWrôeBuf„r
–&∑hsc->
∑hsc_I≈utMu…iBuf„r
 );

1536 if–
	`Mu…iBuf„r_IsWrôóbÀ
–&
∑hsc
->
∑hsc_I≈utMu…iBuf„r
 ) )

1538 
	`Mu…iBuf„r_Adv™˚WrôeIndex
–&
∑hsc
->
∑hsc_I≈utMu…iBuf„r
 );

1541 
	`AddTø˚Mesßge
("PaMac_Rec‹dNext: buf„rPå", (Ë
∑hsc
->
∑hsc_I≈utP¨ams
.
buf„rPå
 );

1542 
	`AddTø˚Mesßge
("PaMac_Rec‹dNext:ÇextWrôe", 
∑hsc
->
∑hsc_I≈utMu…iBuf„r
.
√xtWrôe
 );

1545 
∑hsc
->
∑hsc_I≈utP¨ams
.
buf„rLígth
 =Öahsc->
∑hsc_ByãsPîI≈utHo°Buf„r
;

1546 
∑hsc
->
∑hsc_I≈utP¨ams
.
cou¡
 =Öahsc->
∑hsc_ByãsPîI≈utHo°Buf„r
;

1547 
îr
 = 
	`SPBRec‹d
(&
∑hsc
->
∑hsc_I≈utP¨ams
, 
åue
);

1548 if–
îr
 )

1550 
	`AddTø˚Mesßge
("PaMac_Rec‹dNext: SPBRec‹dÉº‹ ", 
îr
 );

1551 
sPaHo°Eº‹
 = 
îr
;

1552 
ªsu…
 = 
∑Ho°Eº‹
;

1556 
∑hsc
->
∑hsc_IsRec‹dög
 = 1;

1558  
ªsu…
;

1559 
	}
}

1565 
	$PaMac_FûlNextOuçutBuf„r
–
öã∫ÆP‹tAudioSåóm
 *
∑°
, 
ödex
 )

1567 
PaHo°SoundC⁄åﬁ
 *
∑hsc
;

1568 
ªsu…
 = 0;

1569 
föished
 = 1;

1570 *
outPå
;

1572 
gPœyCou¡î
 += 1;

1574 
∑°
->
∑°_NumCÆlbacks
 += 1;

1575 
∑hsc
 = (
PaHo°SoundC⁄åﬁ
 *Ë
∑°
->
∑°_Devi˚D©a
;

1576 if–
∑hsc
 =
NULL
 )  -1;

1578 if–
∑hsc
->
∑hsc_IfInsideCÆlback
 )  0;

1579 
∑hsc
->
∑hsc_IfInsideCÆlback
 = 1;

1581 
outPå
 = 
∑hsc
->
∑hsc_SoundHódîs
[
ödex
].
ßm∂ePå
;

1583 
ªsu…
 = 
	`PaMac_CÆlU£rLo›
–
∑°
, (
öt16
 *Ë
outPå
 );

1585 
∑hsc
->
∑hsc_IfInsideCÆlback
 = 0;

1586  
ªsu…
;

1587 
	}
}

1592 
∑sˇl
 
	$PaMac_OuçutCom∂ëi⁄Proc
 (
SndCh™√lPå
 
theCh™√l
, 
SndComm™d
 * 
theCÆlBackCmd
)

1594 
öã∫ÆP‹tAudioSåóm
 *
∑°
;

1595 
PaHo°SoundC⁄åﬁ
 *
∑hsc
;

1596 (Ë
theCh™√l
;

1597 (Ë
theCÆlBackCmd
;

1600 
∑°
 = (
öã∫ÆP‹tAudioSåóm
 *Ë
theCÆlBackCmd
->
∑øm2
;

1601 if–
∑°
 =
NULL
 ) ;

1603 
∑hsc
 = (
PaHo°SoundC⁄åﬁ
 *Ë
∑°
->
∑°_Devi˚D©a
;

1604 
∑hsc
->
∑hsc_NumOutsPœyed
 += 1;

1606 
	`SëFømesD⁄e
–
∑hsc
,

1607 
∑hsc
->
∑hsc_NumFømesD⁄e
 +Öahsc->
∑hsc_FømesPîHo°Buf„r
 );

1609 
	`PaMac_BackgroundM™agî
–
∑°
, 
theCÆlBackCmd
->
∑øm1
 );

1610 
	}
}

1613 
PaEº‹
 
	$PaMac_BackgroundM™agî
–
öã∫ÆP‹tAudioSåóm
 *
∑°
, 
ödex
 )

1615 
PaEº‹
 
ªsu…
 = 
∑NoEº‹
;

1616 
PaHo°SoundC⁄åﬁ
 *
∑hsc
 = (PaHo°SoundC⁄åﬁ *Ë
∑°
->
∑°_Devi˚D©a
;

1618 if–
∑°
->
∑°_St›Now
 )

1620 
SndComm™d
 
comm™d
;

1622 
comm™d
.
cmd
 = 
ÊushCmd
;

1623 
comm™d
.
∑øm1
 = comm™d.
∑øm2
 = 0;

1624 
	`SndDoImmedüã
–
∑hsc
->
∑hsc_Ch™√l
, &
comm™d
 );

1626 
comm™d
.
cmd
 = 
quõtCmd
;

1627 
	`SndDoImmedüã
–
∑hsc
->
∑hsc_Ch™√l
, &
comm™d
 );

1628 
∑°
->
∑°_IsA˘ive
 = 0;

1633 if–
∑°
->
∑°_St›So⁄
 )

1635 if–(
∑hsc
->
∑hsc_NumOutsQueued
 -Öahsc->
∑hsc_NumOutsPœyed
) <= 0 )

1637 
∑°
->
∑°_IsA˘ive
 = 0;

1642 
	`PaMac_PœyNext
–
∑°
, 
ödex
 );

1644  
ªsu…
;

1645 
	}
}

1650 
	$PaMac_PœyNext
 ( 
öã∫ÆP‹tAudioSåóm
 *
∑°
, 
ödex
 )

1652 
OSEº
 
îr‹
;

1653 
ªsu…
;

1654 
SndComm™d
 
∂ayCmd
;

1655 
SndComm™d
 
ˇŒbackCmd
;

1656 
PaHo°SoundC⁄åﬁ
 *
∑hsc
 = (PaHo°SoundC⁄åﬁ *Ë
∑°
->
∑°_Devi˚D©a
;

1659 i‡–
∑°
->
∑°_St›So⁄
 ) 
d⁄e
;

1662 
ªsu…
 = 
	`PaMac_FûlNextOuçutBuf„r
 ( 
∑°
, 
ödex
 );

1663 if–
ªsu…
 > 0 ) 
∑°
->
∑°_St›So⁄
 = 1;

1664 if–
ªsu…
 < 0 ) 
d⁄e
;

1667 
∂ayCmd
.
cmd
 = 
buf„rCmd
;

1668 
∂ayCmd
.
∑øm1
 = 0;

1669 
∂ayCmd
.
∑øm2
 = (Ë&
∑hsc
->
∑hsc_SoundHódîs
[ 
ödex
 ];

1670 
îr‹
 = 
	`SndDoComm™d
 (
∑hsc
->
∑hsc_Ch™√l
, &
∂ayCmd
, 
åue
 );

1671 if–
îr‹
 !
noEº
 ) 
gŸEº‹
;

1674 
ˇŒbackCmd
.
cmd
 = 
ˇŒBackCmd
;

1675 
ˇŒbackCmd
.
∑øm1
 = 
ödex
;

1676 
ˇŒbackCmd
.
∑øm2
 = ()
∑°
;

1677 
îr‹
 = 
	`SndDoComm™d
 (
∑hsc
->
∑hsc_Ch™√l
, &
ˇŒbackCmd
, 
åue
 );

1678 if–
îr‹
 !
noEº
 ) 
gŸEº‹
;

1679 
∑hsc
->
∑hsc_NumOutsQueued
 += 1;

1683 
gŸEº‹
:

1684 
sPaHo°Eº‹
 = 
îr‹
;

1685 
d⁄e
:

1687 
	}
}

	@portaudio/pa_mac/patest_devinfo.c

1 #ö˛udê
	~<°dio.h
> #ö˛udê<°dlib.h> #ö˛udê<°rög.h> #ö˛udê<mem‹y.h> #ö˛udê<m©h.h> #ö˛udê"OSUtûs.h" #ö˛udê<MacTy≥s.h> #ö˛udê<M©h64.h> #ö˛udê<Eº‹s.h> #ö˛udê<Sound.h> #ö˛udê<SoundI≈ut.h> #ö˛udê<Devi˚s.h> #ö˛udê<D©eTimeUtûs.h> #ö˛udê<Timî.h> #ö˛udê<Ge°Æt.h> #deföêUSE_POINTER (1Ë #deföêPRINT(xË{Öröt‡x; fÊush(°dout); } #deföêERR_RPT(xËPRINT(xË#deföêDBUG(xËPRINT(xËTe°SëtögDevi˚Info–c⁄° *devi˚Namê); maö–); maö–Ë{ n⁄amê0; ªsu… = Te°SëtögDevi˚Info–(c⁄° *Ë&n⁄amê); PRINT(("Te° com∂ëe.Ñesu… = %d\n",Ñesu… ));  0; } Te°SëtögDevi˚Info–c⁄° *devi˚NamêË{ OSEºÉº; mRefNum = 0; ãmpL; ãmpS; FixedÅempF;Éº = SPBO≥nDevi˚–devi˚Name, siWrôePîmissi⁄, &mRefNum); i‡”ºË{ PRINT(("CoundÇŸ o≥¿devi˚!\n"));  -1; } #deföêPrötDevi˚Info(£À˘‹,v¨Ë\Éº = SPBGëDevi˚Info(mRefNum, sñe˘‹, (PåË&v¨); \ i‡”ºË{ \ PRINT(("quîy %†Áûed\n", #£À˘‹ )); \ }\ { \ PRINT(("quîy %†0x%x\n", #£À˘‹, v¨ )); \ } PrötDevi˚Info–siC⁄töuous,ÅempS ); PrötDevi˚Info–siAsync,ÅempS ); PrötDevi˚Info–siNumbîCh™√ls,ÅempS ); PrötDevi˚Info–siSam∂eSize,ÅempS ); PrötDevi˚Info–siSam∂eR©e,ÅempF ); PrötDevi˚Info–siCh™√lAvaûabÀ,ÅempS ); PrötDevi˚Info–siA˘iveCh™√ls,ÅempL ); PrötDevi˚Info–siDevi˚Buf„rInfo,ÅempL ); #i‡USE_POINTER PRINT(("Aâem±Åÿ£àsiC⁄töuou†tÿ1 usögÖoöã∏mëhod.\n"));ÅempS = 1;Éº = SPBSëDevi˚Info(mRefNum, siC⁄töuous, (PåË&ãmpS); i‡”ºËPRINT(("£âög siC⁄töuou†usögÖoöã∏Áûed\n")); PrötDevi˚Info–siC⁄töuous,ÅempS ); PRINT(("Aâem±Åÿ£àsiC⁄töuou†tÿ0 usögÖoöã∏mëhod.\n"));ÅempS = 1;Éº = SPBSëDevi˚Info(mRefNum, siC⁄töuous, (PåË&ãmpS); i‡”ºËPRINT(("£âög siC⁄töuou†usögÖoöã∏Áûed\n")); PrötDevi˚Info–siC⁄töuous,ÅempS ); #ñ£ (("Aâem±Åÿ£àsiC⁄töuou†tÿ1 usög dúe˘ mëhod.\n"));SPBSëDevi˚Info(mRefNum, siC⁄töuous, (PåË1);”ºËPRINT(("£âög siC⁄töuou†usög dúe˘ faûed\n"));–siC⁄töuous,ÅempS );(("Aâem±Åÿ£àsiC⁄töuou†tÿ0 usög dúe˘ mëhod.\n"));SPBSëDevi˚Info(mRefNum, siC⁄töuous, (PåË0);”ºËPRINT(("£âög siC⁄töuou†usög dúe˘ faûed\n"));–siC⁄töuous,ÅempS );#ídif/* Sam∂êøã ----------- */#i‡USE_POINTER(("Aâem±Åÿ£àsiSam∂eR©êtÿ44100 usögÖoöã∏mëhod.\n"));((unsig√dÜ⁄g)44100Ë<< 16;SPBSëDevi˚Info(mRefNum, siSam∂eR©e, (PåË&ãmpF);”ºËPRINT(("£âög siSam∂eR©êusögÖoöã∏Áûed\n"));0;–siSam∂eR©e,ÅempF );(("Aâem±Åÿ£àsiSam∂eR©êtÿ22050 usögÖoöã∏mëhod.\n"));((unsig√dÜ⁄g)22050Ë<< 16;SPBSëDevi˚Info(mRefNum, siSam∂eR©e, (PåË&ãmpF);”ºËPRINT(("£âög siSam∂eR©êusögÖoöã∏Áûed\n"));0;–siSam∂eR©e,ÅempF );#ñ£(("Aâem±Åÿ£àsiSam∂eR©êtÿ44100 usög dúe˘ mëhod.\n"));SPBSëDevi˚Info(mRefNum, siSam∂eR©e, (PåË(((unsig√dÜ⁄g)44100Ë<< 16));”ºËPRINT(("£âög siSam∂eR©êusög dúe˘ faûed\n"));–siSam∂eR©e,ÅempF );(("Aâem±Åÿ£àsiSam∂eR©êtÿ22050 usög dúe˘ mëhod.\n"));SPBSëDevi˚Info(mRefNum, siSam∂eR©e, (PåË (((unsig√dÜ⁄g)44100Ë<< 16));”ºËPRINT(("£âög siSam∂eR©êusög dúe˘ faûed\n"));–siSam∂eR©e,ÅempF );#ídif/* AŒ d⁄êsÿ˛o£ u∞devi˚. */–mRefNum ) SPBClo£Devi˚(mRefNum);0;:–mRefNum ) SPBClo£Devi˚(mRefNum);-1;}

	@portaudio/pa_mac_core/pa_mac_core.c

98 
	~<C‹eSîvi˚s/C‹eSîvi˚s.h
>

99 
	~<C‹eAudio/C‹eAudio.h
>

100 
	~<sys/time.h
>

101 
	~<sys/ªsour˚.h
>

102 
	~<sys/ty≥s.h
>

103 
	~<uni°d.h
>

104 
	~<uni°d.h
>

105 
	~<AudioUnô/AudioUnô.h
>

106 
	~<AudioToﬁbox/DeÁu…AudioOuçut.h
>

107 
	~<AudioToﬁbox/AudioC⁄vîãr.h
>

109 
	~"p‹èudio.h
"

110 
	~"∑_ho°.h
"

111 
	~"∑_åa˚.h
"

112 
	~"rögbuf„r.h
"

115 
	#SET_DEVICE_BUFFER_SIZE
 (1)

	)

118 
	#PA_TRACE_RUN
 (0)

	)

119 
	#PA_TRACE_START_STOP
 (0)

	)

121 
	#PA_MIN_LATENCY_MSEC
 (20Ë

	)

122 
	#MIN_TIMEOUT_MSEC
 (3000)

	)

124 
	#PRINT
(
x
Ë{ 
¥ötf
 x; 
	`fÊush
(
°dout
); }

	)

125 
	#PRINT_ERR
–
msg
, 
îr
 ) 
	`PRINT
(–msg ":Éº‹ = 0x%0lX = '%s'\n", (îr), 
	`Eº‹ToSåög
”º)Ë)

	)

126 
	#DBUG
(
x
Ë
	`PRINT
(x)

	)

127 
	#DBUGBACK
(
x
Ë

	)

128 
	#DBUGX
(
x
)

	)

131 
	#IS_INPUT
 (
åue
)

	)

132 
	#IS_OUTPUT
 (
Ál£
)

	)

134 
	ePaDevi˚Mode


136 
	mPA_MODE_OUTPUT_ONLY
,

137 
	mPA_MODE_INPUT_ONLY
,

138 
	mPA_MODE_IO_ONE_DEVICE
,

139 
	mPA_MODE_IO_TWO_DEVICES


140 } 
	tPaDevi˚Mode
;

142 
	#PA_USING_OUTPUT
 (
∑hsc
->
mode
 !
PA_MODE_INPUT_ONLY
)

	)

143 
	#PA_USING_INPUT
 (
∑hsc
->
mode
 !
PA_MODE_OUTPUT_ONLY
)

	)

148 
	sPaHo°InOut_s


150 
AudioDevi˚ID
 
	maudioDevi˚ID
;

151 
	mbyãsPîU£rN©iveBuf„r
;

152 
AudioC⁄vîãrRef
 
	mc⁄vîãr
;

153 *
	mc⁄vîãrBuf„r
;

154 
	mnumCh™√ls
;

155 } 
	tPaHo°InOut
;

161 
	sPaHo°SoundC⁄åﬁ


163 
PaHo°InOut
 
	möput
;

164 
PaHo°InOut
 
	mouçut
;

165 
AudioDevi˚ID
 
	m¥im¨yDevi˚ID
;

166 
PaDevi˚Mode
 
	mmode
;

167 
RögBuf„r
 
	mrögBuf„r
;

168 *
	mrögBuf„rD©a
;

169 
Boﬁón
 
	mf‹m©Li°íîCÆÀd
;

171 
rußge
 
	míåyRußge
;

172 
	mövî£Mi¸osPîHo°Buf„r
;

173 } 
	tPaHo°SoundC⁄åﬁ
;

180 
	sPaHo°Devi˚Info


182 
PaDevi˚Info
 
	m∑Info
;

183 
AudioDevi˚ID
 
	maudioDevi˚ID
;

185 
	tPaHo°Devi˚Info
;

189 
	gsNumPaDevi˚s
 = 0;

190 
	gsNumI≈utDevi˚s
 = 0;

191 
	gsNumOuçutDevi˚s
 = 0;

192 
	gsNumC‹eDevi˚s
 = 0;

193 
AudioDevi˚ID
 *
	gsC‹eDevi˚IDs
;

194 
PaHo°Devi˚Info
 *
	gsDevi˚Infos
 = 
NULL
;

195 
	gsDeÁu…I≈utDevi˚ID
 = 
∑NoDevi˚
;

196 
	gsDeÁu…OuçutDevi˚ID
 = 
∑NoDevi˚
;

197 
	gsSavedHo°Eº‹
 = 0;

199 c⁄° 
	gsuµ‹ãdSam∂eR©eR™ge
[] = { 8000.0, 96000.0 };

200 c⁄° 
	gsM≠≥rSuffixI≈ut
[] = " - Input";

201 c⁄° 
	gsM≠≥rSuffixOuçut
[] = " - Output";

206 *
	$FourCh¨Code2Så
(
code
)

208 
°r
[5];

209 
°r
[0] = ()((
code
 & 0xFF000000) >> 24);

210 
°r
[1] = ()((
code
 & 0xFF0000) >> 16);

211 
°r
[2] = ()((
code
 & 0xFF00) >> 8);

212 
°r
[3] = ()((
code
 & 0xFF));

213 
°r
[4] = 0;

215  
°r
;

216 
	}
}

219 
	#LOWEST_INPUT_DEVID
 (0)

	)

220 
	#HIGHEST_INPUT_DEVID
 (
sNumI≈utDevi˚s
 - 1)

	)

221 
	#LOWEST_OUTPUT_DEVID
 (
sNumI≈utDevi˚s
)

	)

222 
	#HIGHEST_OUTPUT_DEVID
 (
sNumPaDevi˚s
 - 1)

	)

228 
PaEº‹
 
PaOSX_QuîyDevi˚s
( );

229 
PaOSX_SˇnDevi˚s
–
Boﬁón
 
isI≈ut
 );

230 
PaOSX_QuîyDevi˚Info
–
PaHo°Devi˚Info
 *
ho°Devi˚Info
, 
c‹eDevi˚Index
, 
Boﬁón
 
isI≈ut
 );

231 
PaDevi˚ID
 
PaOSX_QuîyDeÁu…I≈utDevi˚
( );

232 
PaDevi˚ID
 
PaOSX_QuîyDeÁu…OuçutDevi˚
( );

233 
PaOSX_CÆcHo°Buf„rSize
–
öã∫ÆP‹tAudioSåóm
 *
∑°
 );

235 
OSSètus
 
PAOSX_Devi˚Pr›îtyLi°íî
 (
AudioDevi˚ID
 
öDevi˚
,

236 
UI¡32
 
öCh™√l
,

237 
Boﬁón
 
isI≈ut
,

238 
AudioDevi˚Pr›îtyID
 
öPr›îtyID
,

239 * 
öClõ¡D©a
);

245 
OSSètus
 
	g°©usText
[2] = { 0, 0 };

246 c⁄° *
	$Eº‹ToSåög
–
OSSètus
 
îr
 )

248 c⁄° *
°r
;

250 
îr
)

252 
kAudioH¨dw¨eUn•ecifõdEº‹
:

253 
°r
 = "kAudioHardwareUnspecifiedError";

255 
kAudioH¨dw¨eNŸRu¬ögEº‹
:

256 
°r
 = "kAudioHardwareNotRunningError";

258 
kAudioH¨dw¨eUnknownPr›îtyEº‹
:

259 
°r
 = "kAudioHardwareUnknownPropertyError";

261 
kAudioDevi˚Unsuµ‹ãdF‹m©Eº‹
:

262 
°r
 = "kAudioDeviceUnsupportedFormatError";

264 
kAudioH¨dw¨eBadPr›îtySizeEº‹
:

265 
°r
 = "kAudioHardwareBadPropertySizeError";

267 
kAudioH¨dw¨eIŒegÆO≥øti⁄Eº‹
:

268 
°r
 = "kAudioHardwareIllegalOperationError";

271 
°©usText
[0] = 
îr
;

272 
°r
 = (c⁄° *)
°©usText
;

276  
°r
;

277 
	}
}

280 
	$RoundUpToNextPowîOf2
–
n
 )

282 
numBôs
 = 0;

283 if–((
n
-1) &Ç) == 0) Ç;

284  
n
 > 0 )

286 
n
=Ç>>1;

287 
numBôs
++;

289  (1<<
numBôs
);

290 
	}
}

293 
	$Pa_SèπUßgeCÆcuœti⁄
–
öã∫ÆP‹tAudioSåóm
 *
∑°
 )

295 
PaHo°SoundC⁄åﬁ
 *
∑hsc
 = (PaHo°SoundC⁄åﬁ *Ë
∑°
->
∑°_Devi˚D©a
;

296 if–
∑hsc
 =
NULL
 ) ;

298 
	`gërußge
–
RUSAGE_SELF
, &
∑hsc
->
íåyRußge
 );

299 
	}
}

301 
	$Subåa˘Time_AmöusB
–
timevÆ
 *
timeA
, timevÆ *
timeB
 )

303 
£cs
 = 
timeA
->
tv_£c
 - 
timeB
->tv_sec;

304 
u£cs
 = 
£cs
 * 1000000;

305 
u£cs
 +(
timeA
->
tv_u£c
 - 
timeB
->tv_usec);

306  
u£cs
;

307 
	}
}

313 
	$Pa_EndUßgeCÆcuœti⁄
–
öã∫ÆP‹tAudioSåóm
 *
∑°
 )

315 
rußge
 
cuºítRußge
;

316 
u£csEœp£d
;

317 
√wUßge
;

319 
	#LOWPASS_COEFFICIENT_0
 (0.95)

	)

320 
	#LOWPASS_COEFFICIENT_1
 (0.99999 - 
LOWPASS_COEFFICIENT_0
)

	)

322 
PaHo°SoundC⁄åﬁ
 *
∑hsc
 = (PaHo°SoundC⁄åﬁ *Ë
∑°
->
∑°_Devi˚D©a
;

323 if–
∑hsc
 =
NULL
 ) ;

325 if–
	`gërußge
–
RUSAGE_SELF
, &
cuºítRußge
 ) == 0 )

327 
u£csEœp£d
 = 
	`Subåa˘Time_AmöusB
–&
cuºítRußge
.
ru_utime
, &
∑hsc
->
íåyRußge
.ru_utime );

330 
√wUßge
 = 
u£csEœp£d
 * 
∑hsc
->
övî£Mi¸osPîHo°Buf„r
;

332 
∑°
->
∑°_Ußge
 = (
LOWPASS_COEFFICIENT_0
 *Öast->past_Usage) +

333 (
LOWPASS_COEFFICIENT_1
 * 
√wUßge
);

335 
	}
}

339 
PaDevi˚ID
 
	$PaOSX_QuîyDeÁu…I≈utDevi˚
( )

341 
OSSètus
 
îr
 = 
noEº
;

342 
UI¡32
 
cou¡
;

343 
i
;

344 
AudioDevi˚ID
 
ãmpDevi˚ID
 = 
kAudioDevi˚Unknown
;

345 
PaDevi˚ID
 
deÁu…Devi˚ID
 = 
∑NoDevi˚
;

349 
cou¡
 = (
ãmpDevi˚ID
);

350 
îr
 = 
	`AudioH¨dw¨eGëPr›îty
–
kAudioH¨dw¨ePr›îtyDeÁu…I≈utDevi˚
, &
cou¡
, (*Ë&
ãmpDevi˚ID
);

351 i‡(
îr
 !
noEº
Ë
îr‹
;

354 
deÁu…Devi˚ID
 = 
∑NoDevi˚
;

355  
i
=
LOWEST_INPUT_DEVID
; i<=
HIGHEST_INPUT_DEVID
; i++ )

357 
	`DBUG
(("PaOSX_QuîyDeÁu…I≈utDevi˚: i = %d,áDevId = %ld\n", 
i
, 
sDevi˚Infos
[i].
audioDevi˚ID
 ));

358 if–
sDevi˚Infos
[
i
].
audioDevi˚ID
 =
ãmpDevi˚ID
 )

360 
deÁu…Devi˚ID
 = 
i
;

364 
îr‹
:

365  
deÁu…Devi˚ID
;

366 
	}
}

369 
PaDevi˚ID
 
	$PaOSX_QuîyDeÁu…OuçutDevi˚
( )

371 
OSSètus
 
îr
 = 
noEº
;

372 
UI¡32
 
cou¡
;

373 
i
;

374 
AudioDevi˚ID
 
ãmpDevi˚ID
 = 
kAudioDevi˚Unknown
;

375 
PaDevi˚ID
 
deÁu…Devi˚ID
 = 
∑NoDevi˚
;

379 
cou¡
 = (
ãmpDevi˚ID
);

380 
îr
 = 
	`AudioH¨dw¨eGëPr›îty
–
kAudioH¨dw¨ePr›îtyDeÁu…OuçutDevi˚
, &
cou¡
, (*Ë&
ãmpDevi˚ID
);

381 i‡(
îr
 !
noEº
Ë
îr‹
;

384 
deÁu…Devi˚ID
 = 
∑NoDevi˚
;

385  
i
=
LOWEST_OUTPUT_DEVID
; i<=
HIGHEST_OUTPUT_DEVID
; i++ )

387 
	`DBUG
(("PaOSX_QuîyDeÁu…OuçutDevi˚: i = %d,áDevId = %ld\n", 
i
, 
sDevi˚Infos
[i].
audioDevi˚ID
 ));

388 if–
sDevi˚Infos
[
i
].
audioDevi˚ID
 =
ãmpDevi˚ID
 )

390 
deÁu…Devi˚ID
 = 
i
;

394 
îr‹
:

395  
deÁu…Devi˚ID
;

396 
	}
}

399 
PaEº‹
 
	$PaOSX_QuîyDevi˚s
( )

401 
OSSètus
 
îr
 = 
noEº
;

402 
UI¡32
 
outSize
;

403 
Boﬁón
 
outWrôabÀ
;

404 
numByãs
;

407 
outSize
 = (
outWrôabÀ
);

408 
îr
 = 
	`AudioH¨dw¨eGëPr›îtyInfo
(
kAudioH¨dw¨ePr›îtyDevi˚s
, &
outSize
, &
outWrôabÀ
);

409 i‡(
îr
 !
noEº
)

411 
	`PRINT_ERR
("Couldn'àgë infÿabouàli° o‡audiÿdevi˚s", 
îr
);

412 
sSavedHo°Eº‹
 = 
îr
;

413  
∑Ho°Eº‹
;

417 
sNumC‹eDevi˚s
 = 
outSize
 / (
AudioDevi˚ID
);

420 i‡(
sNumC‹eDevi˚s
 < 1)

422 
	`PRINT
(("No Devices Available"));

423  
∑Ho°Eº‹
;

427 
sC‹eDevi˚IDs
 = (
AudioDevi˚ID
 *)
	`mÆloc
(
outSize
);

430 
îr
 = 
	`AudioH¨dw¨eGëPr›îty
(
kAudioH¨dw¨ePr›îtyDevi˚s
, &
outSize
, (*)
sC‹eDevi˚IDs
);

431 i‡(
îr
 !
noEº
)

433 
	`PRINT_ERR
("Couldn'àgëÜi° o‡audiÿdevi˚ IDs", 
îr
);

434 
sSavedHo°Eº‹
 = 
îr
;

435  
∑Ho°Eº‹
;

440 
numByãs
 = 
sNumC‹eDevi˚s
 * 2 * (
PaHo°Devi˚Info
);

441 
sDevi˚Infos
 = (
PaHo°Devi˚Info
 *Ë
	`PaHo°_AŒoˇãFa°Mem‹y
–
numByãs
 );

442 if–
sDevi˚Infos
 =
NULL
 )  
∑Insufficõ¡Mem‹y
;

446 
	`DBUG
(("PaOSX_QueryDevices: scan for input ======================\n"));

447 
	`PaOSX_SˇnDevi˚s
–
IS_INPUT
 );

448 
sNumI≈utDevi˚s
 = 
sNumPaDevi˚s
;

450 
	`DBUG
(("PaOSX_QueryDevices: scan for output ======================\n"));

451 
	`PaOSX_SˇnDevi˚s
–
IS_OUTPUT
 );

452 
sNumOuçutDevi˚s
 = 
sNumPaDevi˚s
 - 
sNumI≈utDevi˚s
;

455 
sDeÁu…I≈utDevi˚ID
 = 
	`PaOSX_QuîyDeÁu…I≈utDevi˚
();

456 
sDeÁu…OuçutDevi˚ID
 = 
	`PaOSX_QuîyDeÁu…OuçutDevi˚
();

458  
∑NoEº‹
;

459 
	}
}

466 
Flﬂt64
 
	$PaOSX_GëDevi˚Sam∂eR©e
–
AudioDevi˚ID
 
devi˚ID
, 
Boﬁón
 
isI≈ut
 )

468 
OSSètus
 
îr
 = 
noEº
;

469 
AudioSåómBasicDes¸ùti⁄
 
f‹m©Desc
;

470 
UI¡32
 
d©aSize
;

471 
d©aSize
 = (
f‹m©Desc
);

472 
îr
 = 
	`AudioDevi˚GëPr›îty
–
devi˚ID
, 0, 
isI≈ut
,

473 
kAudioDevi˚Pr›îtySåómF‹m©
, &
d©aSize
, &
f‹m©Desc
);

474 if–
îr
 !
noEº
 )  0.0;

475  
f‹m©Desc
.
mSam∂eR©e
;

476 
	}
}

480 *
	$PaOSX_Devi˚NameFromID
(
AudioDevi˚ID
 
devi˚ID
, 
Boﬁón
 
isI≈ut
 )

482 
OSSètus
 
îr
 = 
noEº
;

483 
UI¡32
 
outSize
;

484 
Boﬁón
 
outWrôabÀ
;

485 *
devi˚Name
 = 
nû
;

488 
îr
 = 
	`AudioDevi˚GëPr›îtyInfo
(
devi˚ID
, 0, 
isI≈ut
, 
kAudioDevi˚Pr›îtyDevi˚Name
, &
outSize
, &
outWrôabÀ
);

489 i‡(
îr
 =
noEº
)

491 
devi˚Name
 = (*)
	`mÆloc
–
outSize
 + 1);

492 if–
devi˚Name
 )

494 
îr
 = 
	`AudioDevi˚GëPr›îty
(
devi˚ID
, 0, 
isI≈ut
, 
kAudioDevi˚Pr›îtyDevi˚Name
, &
outSize
, 
devi˚Name
);

495 i‡(
îr
 !
noEº
)

496 
	`PRINT_ERR
("Couldn'àgëáudiÿdevi˚Çame", 
îr
);

500  
devi˚Name
;

501 
	}
}

508 
	$PaOSX_SˇnDevi˚s
–
Boﬁón
 
isI≈ut
 )

510 
c‹eDevi˚Index
;

511 
ªsu…
;

512 
PaHo°Devi˚Info
 *
ho°Devi˚Info
;

513 
numAdded
 = 0;

515  
c‹eDevi˚Index
=0; c‹eDevi˚Index<
sNumC‹eDevi˚s
; coreDeviceIndex++ )

518 
ho°Devi˚Info
 = &
sDevi˚Infos
[
sNumPaDevi˚s
];

519 
ªsu…
 = 
	`PaOSX_QuîyDevi˚Info
–
ho°Devi˚Info
, 
c‹eDevi˚Index
, 
isI≈ut
 );

520 
	`DBUG
(("PaOSX_SˇnDevi˚s:ÖaDevId = %d, c‹eDevId = %d\n", 
sNumPaDevi˚s
, 
c‹eDevi˚Index
 ));

521 if–
ªsu…
 > 0 )

523 
sNumPaDevi˚s
 += 1;

524 
numAdded
 += 1;

526 if–
ªsu…
 < 0 ) Ñesult;

528  
numAdded
;

529 
	}
}

539 
	$PaOSX_QuîyDevi˚Info
–
PaHo°Devi˚Info
 *
ho°Devi˚Info
, 
c‹eDevi˚Index
, 
Boﬁón
 
isI≈ut
 )

541 
AudioSåómBasicDes¸ùti⁄
 *
ÆlSåómF‹m©s
;

542 
AudioSåómBasicDes¸ùti⁄
 
f‹m©Desc
;

543 
OSSètus
 
îr
;

544 
UI¡32
 
outSize
;

545 
Boﬁón
 
outWrôabÀ
;

546 
AudioDevi˚ID
 
devID
;

547 
numSåómF‹m©s
;

548 
maxCh™√ls
;

549 
i
;

550 
PaDevi˚Info
 *
devi˚Info
 = &
ho°Devi˚Info
->
∑Info
;

552 
devi˚Info
->
°ru˘Vîsi⁄
 = 1;

553 
devi˚Info
->
maxI≈utCh™√ls
 = 0;

554 
devi˚Info
->
maxOuçutCh™√ls
 = 0;

556 
devi˚Info
->
ßm∂eR©es
 = 
suµ‹ãdSam∂eR©eR™ge
;

557 
devi˚Info
->
numSam∂eR©es
 = -1;

559 
devID
 = 
sC‹eDevi˚IDs
[ 
c‹eDevi˚Index
 ];

560 
ho°Devi˚Info
->
audioDevi˚ID
 = 
devID
;

561 
	`DBUG
(("PaOSX_QuîyDevi˚Info:Çamê%s\n", 
	`PaOSX_Devi˚NameFromID
–
devID
, 
isI≈ut
 )));

562 
	`DBUG
(("PaOSX_QueryDeviceInfo: coreDeviceIndex = %d, devID = %d, isInput = %d\n",

563 
c‹eDevi˚Index
, 
devID
, 
isI≈ut
 ));

566 
outSize
 = (
f‹m©Desc
);

567 
îr
 = 
	`AudioDevi˚GëPr›îty
(
devID
, 0, 
isI≈ut
, 
kAudioDevi˚Pr›îtySåómF‹m©
, &
outSize
, &
f‹m©Desc
);

569 if–(
îr
 !
noEº
Ë|| (
f‹m©Desc
.
mCh™√lsPîFøme
 =0ËË
îr‹
;

571 
	`DBUG
(("PaOSX_QuîyDevi˚Info: mF‹m©ID = %4s\n", &
f‹m©Desc
.
mF‹m©ID
));

572 
	`DBUG
(("PaOSX_QuîyDevi˚Info: mF‹m©Fœg†0x%x\n", 
f‹m©Desc
.
mF‹m©Fœgs
));

573 
	`DBUG
(("PaOSX_QuîyDevi˚Info: kLöórPCMF‹m©FœgIsFlﬂà0x%x\n", 
kLöórPCMF‹m©FœgIsFlﬂt
));

577 
devi˚Info
->
«tiveSam∂eF‹m©s
 = 
∑Flﬂt32
;

582 
outSize
 = 0;

583 
îr
 = 
	`AudioDevi˚GëPr›îtyInfo
–
devID
, 0, 
isI≈ut
,

584 
kAudioDevi˚Pr›îtySåómF‹m©s
,

585 &
outSize
, &
outWrôabÀ
 );

587 
ÆlSåómF‹m©s
 = (
AudioSåómBasicDes¸ùti⁄
 *)
	`mÆloc
(
outSize
);

588 
numSåómF‹m©s
 = 
outSize
 / (
AudioSåómBasicDes¸ùti⁄
);

589 
îr
 = 
	`AudioDevi˚GëPr›îty
–
devID
, 0, 
isI≈ut
,

590 
kAudioDevi˚Pr›îtySåómF‹m©s
,

591 &
outSize
, 
ÆlSåómF‹m©s
);

593 
	`DBUG
(("%d suµ‹ãd f‹m©s!\n", 
numSåómF‹m©s
));

594 
maxCh™√ls
 = 0;

595 
i
=0; i<
numSåómF‹m©s
; i++) {

596 
	`DBUG
(("Format %d: formatID=%4s flags=0x%x channels=%dÑate=%.0f\n",

597 
i
,

598 &
ÆlSåómF‹m©s
[
i
].
mF‹m©ID
,

599 
ÆlSåómF‹m©s
[
i
].
mF‹m©Fœgs
,

600 
ÆlSåómF‹m©s
[
i
].
mCh™√lsPîFøme
,

601 
ÆlSåómF‹m©s
[
i
].
mSam∂eR©e
));

603 i‡(
ÆlSåómF‹m©s
[
i
].
mCh™√lsPîFøme
 > 
maxCh™√ls
)

604 
maxCh™√ls
 = 
ÆlSåómF‹m©s
[
i
].
mCh™√lsPîFøme
;

607 
	`‰ì
(
ÆlSåómF‹m©s
);

611 
	`mem£t
–&
f‹m©Desc
, 0, (formatDesc));

612 
f‹m©Desc
.
mCh™√lsPîFøme
 = 256;

613 
f‹m©Desc
.
mF‹m©ID
 = 
kAudioF‹m©LöórPCM
;

614 
f‹m©Desc
.
mF‹m©Fœgs
 =

615 
kAudioF‹m©FœgIsFlﬂt
 |

616 
kAudioF‹m©FœgIsBigEndün
 |

617 
kAudioF‹m©FœgIsPacked
;

618 
outSize
 = (
f‹m©Desc
);

619 
îr
 = 
	`AudioDevi˚GëPr›îty
–
devID
, 0,

620 
isI≈ut
, 
kAudioDevi˚Pr›îtySåómF‹m©M©ch
, &
outSize
, &
f‹m©Desc
);

621 if–
îr
 !
noEº
 )

623 
	`PRINT_ERR
("PaOSX_QuîyDevi˚Info: CouldÇŸ gë devi˚ f‹m© m©ch", 
îr
);

624 
sSavedHo°Eº‹
 = 
îr
;

625  
∑Ho°Eº‹
;

629 if–
isI≈ut
 )

631 
devi˚Info
->
maxI≈utCh™√ls
 = 
maxCh™√ls
;

635 
devi˚Info
->
maxOuçutCh™√ls
 = 
maxCh™√ls
;

639 
devi˚Info
->
«me
 = 
	`PaOSX_Devi˚NameFromID
–
devID
, 
isI≈ut
 );

642 
	`DBUG
(("\n"));

644 
îr‹
:

646 
	}
}

649 
PaEº‹
 
	$PaOSX_MaybeQuîyDevi˚s
( )

651 if–
sNumPaDevi˚s
 == 0 )

653  
	`PaOSX_QuîyDevi˚s
();

656 
	}
}

658 
	gzîoPad
[256] = { 0 };

665 
OSSètus
 
	$PaOSX_I≈utC⁄vîãrCÆlbackProc
 (
AudioC⁄vîãrRef
 
öAudioC⁄vîãr
,

666 
UI¡32
* 
outD©aSize
,

667 ** 
outD©a
,

668 * 
öU£rD©a
)

670 
öã∫ÆP‹tAudioSåóm
 *
∑°
 = (öã∫ÆP‹tAudioSåóm *Ë
öU£rD©a
;

671 
PaHo°SoundC⁄åﬁ
 *
∑hsc
 = (PaHo°SoundC⁄åﬁ *Ë
∑°
->
∑°_Devi˚D©a
;

672 *
d©aPå1
;

673 
size1
;

674 *
d©aPå2
;

675 
size2
;

678 
	`RögBuf„r_GëRódRegi⁄s
–&
∑hsc
->
rögBuf„r
, *
outD©aSize
,

679 &
d©aPå1
, &
size1
, &
d©aPå2
, &
size2
 );

681 if–
size1
 > 0 )

683 *
outD©a
 = 
d©aPå1
;

684 *
outD©aSize
 = 
size1
;

685 
	`RögBuf„r_Adv™˚RódIndex
–&
∑hsc
->
rögBuf„r
, 
size1
 );

686 
	`DBUGX
(("PaOSX_I≈utC⁄vîãrCÆlbackProc:Ñód %ld byã†‰om FIFO.\n", 
size1
 ));

690 
	`DBUGBACK
(("PaOSX_InputConverterCallbackProc: gotÇo data!\n"));

691 *
outD©a
 = 
zîoPad
;

692 *
outD©aSize
 = (
zîoPad
);

694  
noEº
;

695 
	}
}

701 
OSSètus
 
	$PaOSX_LﬂdAndPro˚ss
–
öã∫ÆP‹tAudioSåóm
 *
∑°
,

702 *
öputBuf„r
, *
ouçutBuf„r
 )

704 
OSSètus
 
îr
 = 
noEº
;

705 
PaHo°SoundC⁄åﬁ
 *
∑hsc
 = (PaHo°SoundC⁄åﬁ *Ë
∑°
->
∑°_Devi˚D©a
;

707 if–
∑°
->
∑°_St›So⁄
 )

709 if–
ouçutBuf„r
 )

712 
	`AddTø˚Mesßge
("PaOSX_LﬂdAndPro˚ss: zîÿª° o‡wavêbuf„∏", 
i
 );

713 
	`mem£t
–
ouçutBuf„r
, 0, 
∑hsc
->
ouçut
.
byãsPîU£rN©iveBuf„r
 );

719 if–
PA_USING_INPUT
 )

721 
UI¡32
 
size
 = 
∑hsc
->
öput
.
byãsPîU£rN©iveBuf„r
;

722 
îr
 = 
	`AudioC⁄vîãrFûlBuf„r
(

723 
∑hsc
->
öput
.
c⁄vîãr
,

724 
PaOSX_I≈utC⁄vîãrCÆlbackProc
,

725 
∑°
,

726 &
size
,

727 
∑hsc
->
öput
.
c⁄vîãrBuf„r
);

728 if–
îr
 !
noEº
 ) Érr;

729 
öputBuf„r
 = 
∑hsc
->
öput
.
c⁄vîãrBuf„r
;

734 if–
	`PaC⁄vît_Pro˚ss
–
∑°
, 
öputBuf„r
, 
ouçutBuf„r
 ))

736 
∑°
->
∑°_St›So⁄
 = 1;

739  
îr
;

740 
	}
}

745 
OSSètus
 
	$PaOSX_OuçutC⁄vîãrCÆlbackProc
 (
AudioC⁄vîãrRef
 
öAudioC⁄vîãr
,

746 
UI¡32
* 
outD©aSize
,

747 ** 
outD©a
,

748 * 
öU£rD©a
)

750 
öã∫ÆP‹tAudioSåóm
 *
∑°
 = (öã∫ÆP‹tAudioSåóm *Ë
öU£rD©a
;

751 
PaHo°SoundC⁄åﬁ
 *
∑hsc
 = (PaHo°SoundC⁄åﬁ *Ë
∑°
->
∑°_Devi˚D©a
;

753 *
outD©a
 = 
∑hsc
->
ouçut
.
c⁄vîãrBuf„r
;

754 *
outD©aSize
 = 
∑hsc
->
ouçut
.
byãsPîU£rN©iveBuf„r
;

756  
	`PaOSX_LﬂdAndPro˚ss
 ( 
∑°
, 
∑hsc
->
öput
.
c⁄vîãrBuf„r
,Öahsc->
ouçut
.converterBuffer );

757 
	}
}

764 
OSSètus
 
	$PaOSX_H™dÀI≈utOuçut
–
öã∫ÆP‹tAudioSåóm
 *
∑°
,

765 c⁄° 
AudioBuf„rLi°
* 
öI≈utD©a
,

766 
AudioBuf„rLi°
* 
outOuçutD©a
 )

768 
OSSètus
 
îr
 = 
noEº
;

769 *
öputN©iveBuf„rfPå
 = 
NULL
;

770 *
ouçutN©iveBuf„rfPå
 = 
NULL
;

771 
PaHo°SoundC⁄åﬁ
 *
∑hsc
 = (PaHo°SoundC⁄åﬁ *Ë
∑°
->
∑°_Devi˚D©a
;

774 if–
outOuçutD©a
->
mNumbîBuf„rs
 > 0 )

776 
ouçutN©iveBuf„rfPå
 = (*)
outOuçutD©a
->
mBuf„rs
[0].
mD©a
;

779 if–
öI≈utD©a
->
mNumbîBuf„rs
 > 0 )

781 
öputN©iveBuf„rfPå
 = (*)
öI≈utD©a
->
mBuf„rs
[0].
mD©a
;

784 if–(
∑hsc
->
mode
 =
PA_MODE_INPUT_ONLY
Ë|| (∑hsc->modê=
PA_MODE_IO_ONE_DEVICE
) )

786 
wrôeRoom
 = 
	`RögBuf„r_GëWrôeAvaûabÀ
–&
∑hsc
->
rögBuf„r
 );

787 
numByãs
 = 
öI≈utD©a
->
mBuf„rs
[0].
mD©aByãSize
;

788 if–
numByãs
 <
wrôeRoom
 )

790 
	`RögBuf„r_Wrôe
–&
∑hsc
->
rögBuf„r
, 
öputN©iveBuf„rfPå
, 
numByãs
 );

791 
	`DBUGBACK
(("PaOSX_H™dÀI≈utOuçut: wrŸê%ld byã†tÿFIFO.\n", 
öI≈utD©a
->
mBuf„rs
[0].
mD©aByãSize
));

796 if–
∑hsc
->
mode
 =
PA_MODE_INPUT_ONLY
 )

799 
hÆfSize
 = 
∑hsc
->
rögBuf„r
.
buf„rSize
 / 2;

800  (
	`RögBuf„r_GëRódAvaûabÀ
–&
∑hsc
->
rögBuf„r
 ) >
hÆfSize
) &&

801 (
∑°
->
∑°_St›So⁄
 == 0) )

803 
îr
 = 
	`PaOSX_LﬂdAndPro˚ss
 ( 
∑°
, 
NULL
, NULL );

804 if–
îr
 !
noEº
 ) 
îr‹
;

809 
UI¡32
 
size
 = 
outOuçutD©a
->
mBuf„rs
[0].
mD©aByãSize
;

810 
îr
 = 
	`AudioC⁄vîãrFûlBuf„r
(

811 
∑hsc
->
ouçut
.
c⁄vîãr
,

812 
PaOSX_OuçutC⁄vîãrCÆlbackProc
,

813 
∑°
,

814 &
size
,

815 
ouçutN©iveBuf„rfPå
);

816 if–
îr
 !
noEº
 )

818 
	`PRINT_ERR
("PaOSX_H™dÀI≈utOuçut: AudioC⁄vîãrFûlBuf„∏Áûed", 
îr
);

819 
îr‹
;

823 
îr‹
:

824  
îr
;

825 
	}
}

833 
OSSètus
 
	$PaOSX_C‹eAudioI≈utCÆlback
 (
AudioDevi˚ID
 
öDevi˚
, c⁄° 
AudioTimeSèmp
* 
öNow
,

834 c⁄° 
AudioBuf„rLi°
* 
öI≈utD©a
, c⁄° 
AudioTimeSèmp
* 
öI≈utTime
,

835 
AudioBuf„rLi°
* 
outOuçutD©a
, c⁄° 
AudioTimeSèmp
* 
öOuçutTime
,

836 * 
c⁄ãxtPå
)

838 
öã∫ÆP‹tAudioSåóm
 *
∑°
 = (öã∫ÆP‹tAudioSåóm *Ë
c⁄ãxtPå
;

839 
PaHo°SoundC⁄åﬁ
 *
∑hsc
;

840 
∑hsc
 = (
PaHo°SoundC⁄åﬁ
 *Ë
∑°
->
∑°_Devi˚D©a
;

843 if–
∑hsc
->
rögBuf„rD©a
 !
NULL
 )

845 
wrôeRoom
 = 
	`RögBuf„r_GëWrôeAvaûabÀ
–&
∑hsc
->
rögBuf„r
 );

846 
numByãs
 = 
öI≈utD©a
->
mBuf„rs
[0].
mD©aByãSize
;

847 if–
numByãs
 <
wrôeRoom
 )

849 
	`RögBuf„r_Wrôe
–&
∑hsc
->
rögBuf„r
, 
öI≈utD©a
->
mBuf„rs
[0].
mD©a
, inI≈utD©a->mBuf„rs[0].
mD©aByãSize
 );

853 
	`DBUGBACK
(("PaOSX_CoreAudioInputCallback: FIFOÅoo fullÅo write!\n"));

857  
noEº
;

858 
	}
}

867 
OSSètus
 
	$PaOSX_C‹eAudioIOCÆlback
 (
AudioDevi˚ID
 
öDevi˚
, c⁄° 
AudioTimeSèmp
* 
öNow
,

868 c⁄° 
AudioBuf„rLi°
* 
öI≈utD©a
, c⁄° 
AudioTimeSèmp
* 
öI≈utTime
,

869 
AudioBuf„rLi°
* 
outOuçutD©a
, c⁄° 
AudioTimeSèmp
* 
öOuçutTime
,

870 * 
c⁄ãxtPå
)

872 
OSSètus
 
îr
 = 
noEº
;

873 
öã∫ÆP‹tAudioSåóm
 *
∑°
;

874 
PaHo°SoundC⁄åﬁ
 *
∑hsc
;

875 
∑°
 = (
öã∫ÆP‹tAudioSåóm
 *Ë
c⁄ãxtPå
;

876 
∑hsc
 = (
PaHo°SoundC⁄åﬁ
 *Ë
∑°
->
∑°_Devi˚D©a
;

879 if–
∑°
->
∑°_St›Now
 )

881 
∑°
->
∑°_IsA˘ive
 = 0;

886 if–
∑°
->
∑°_St›So⁄
 )

889 
∑°
->
∑°_IsA˘ive
 = 0;

909 
	`Pa_SèπUßgeCÆcuœti⁄
–
∑°
 );

910 
∑°
->
∑°_NumCÆlbacks
 += 1;

913 
îr
 = 
	`PaOSX_H™dÀI≈utOuçut
–
∑°
, 
öI≈utD©a
, 
outOuçutD©a
 );

915 
	`Pa_EndUßgeCÆcuœti⁄
–
∑°
 );

918 if–
îr
 !0 ) 
	`DBUG
(("PaOSX_CoreAudioIOCallback:Ñeturns %ld.\n",Érr ));

920  
îr
;

921 
	}
}

925 
	$PaOSX_IsBëãrF‹m©
(
AudioSåómBasicDes¸ùti⁄
 *
√wF‹m©
,

926 
AudioSåómBasicDes¸ùti⁄
 *
ﬁdF‹m©
,

927 
desúedR©e
, 
desúedCh™√ls
)

931 i‡(
√wF‹m©
->
mF‹m©ID
 !
kAudioF‹m©LöórPCM
)

935 i‡(
ﬁdF‹m©
->
mF‹m©ID
 !
kAudioF‹m©LöórPCM
 &&

936 
√wF‹m©
->
mF‹m©ID
 =
kAudioF‹m©LöórPCM
)

942 i‡(
ﬁdF‹m©
->
mCh™√lsPîFøme
 < 
desúedCh™√ls
 &&

943 
√wF‹m©
->
mCh™√lsPîFøme
 >
desúedCh™√ls
)

946 i‡(
√wF‹m©
->
mCh™√lsPîFøme
 < 
desúedCh™√ls
 &&

947 
ﬁdF‹m©
->
mCh™√lsPîFøme
 >
desúedCh™√ls
)

951 i‡(
ﬁdF‹m©
->
mBôsPîCh™√l
 == 8 &&

952 
√wF‹m©
->
mBôsPîCh™√l
 >= 16)

955 i‡(
√wF‹m©
->
mBôsPîCh™√l
 == 8 &&

956 
ﬁdF‹m©
->
mBôsPîCh™√l
 >= 16)

961 i‡(
√wF‹m©
->
mSam∂eR©e
 == 0 &&

962 
ﬁdF‹m©
->
mSam∂eR©e
 != 0)

965 i‡(
√wF‹m©
->
mSam∂eR©e
 != 0 &&

966 
ﬁdF‹m©
->
mSam∂eR©e
 == 0)

969 i‡(
ﬁdF‹m©
->
mSam∂eR©e
 != 0 &&

970 
√wF‹m©
->
mSam∂eR©e
 != 0) {

976 i‡(
desúedR©e
 < 
√wF‹m©
->
mSam∂eR©e
 &&

977 
desúedR©e
 < 
ﬁdF‹m©
->
mSam∂eR©e
)

979 i‡(
	`Ábs
(
√wF‹m©
->
mSam∂eR©e
 - 
desúedR©e
) < 1.0 &&

980 
	`Ábs
(
ﬁdF‹m©
->
mSam∂eR©e
 - 
desúedR©e
) >= 1.0)

985 i‡(
	`Ábs
(
√wF‹m©
->
mSam∂eR©e
 - 
desúedR©e
) <

986 
	`Ábs
(
ﬁdF‹m©
->
mSam∂eR©e
 - 
desúedR©e
))

993 i‡(
√wF‹m©
->
mBôsPîCh™√l
 >

994 
ﬁdF‹m©
->
mBôsPîCh™√l
)

998 
	}
}

1000 
	$PaOSX_Debug_Pröt_F‹m©
(
ödex
, 
AudioSåómBasicDes¸ùti⁄
 *
f‹m©
)

1002 
	`DBUG
(("Format %2d: %s %2d-bit %d-channel %6.0f Hz\n",

1003 
ödex
,

1004 
f‹m©
->
mF‹m©ID
 =
kAudioF‹m©LöórPCM
? "linear PCM" : "non-PCM ",

1005 
f‹m©
->
mBôsPîCh™√l
,

1006 
f‹m©
->
mCh™√lsPîFøme
,

1007 
f‹m©
->
mSam∂eR©e
));

1008 
	}
}

1011 
	gPaOSX_Lóve_Devi˚_Al⁄e_Mode
 = 0;

1023 
PaEº‹
 
	$PaOSX_SëF‹m©
–
AudioDevi˚ID
 
devID
, 
Boﬁón
 
isI≈ut
,

1024 
desúedR©e
, 
desúedNumCh™√ls
 )

1026 
AudioSåómID
 *
°ªams
 = 
NULL
;

1027 
AudioSåómBasicDes¸ùti⁄
 *
f‹m©s
 = 
NULL
;

1028 
PaEº‹
 
ªsu…
 = 0;

1029 
OSSètus
 
îr
;

1030 
Boﬁón
 
outWrôabÀ
;

1031 
UI¡32
 
d©aSize
;

1032 
desúedNumCh™√lsPîSåóm
;

1033 
numSåóms
;

1034 
°ªamIndex
;

1035 
pid_t
 
hog_pid
;

1036 
pid_t
 
this_pid
 = 
	`gëpid
();

1037 
did_£t_hog_mode
 = 0;

1043 i‡(
PaOSX_Lóve_Devi˚_Al⁄e_Mode
) {

1044 
	`DBUG
(("Opening deviceás-is.\n"));

1050 
îr
 = 
	`AudioDevi˚GëPr›îtyInfo
–
devID
, 0, 
isI≈ut
,

1051 
kAudioDevi˚Pr›îtySåóms
, &
d©aSize
, 
NULL
 );

1052 i‡–
îr
 !
noEº
 )

1054 
	`PRINT_ERR
("PaOSX_SëF‹m©: CouldÇŸ gëÇumbî o‡°ªams.", 
îr
);

1055 
sSavedHo°Eº‹
 = 
îr
;

1056 
ªsu…
 = 
∑Ho°Eº‹
;

1057 
föish
;

1060 
°ªams
 = (
AudioSåómID
 *)
	`mÆloc
(
d©aSize
);

1061 i‡–!
°ªams
 )

1063 
	`PRINT_ERR
("PaOSX_SëF‹m©: CouldÇŸáŒoˇã %d byã†f‹ såóms.", 
d©aSize
);

1064 
ªsu…
 = 
∑Insufficõ¡Mem‹y
;

1065 
föish
;

1068 
numSåóms
 = 
d©aSize
 / (
AudioSåómID
);

1069 
	`DBUG
(("PaOSX_SëF‹m©:ÇumSåóms=%d.\n", 
numSåóms
 ));

1071 
îr
 = 
	`AudioDevi˚GëPr›îty
–
devID
, 0, 
isI≈ut
,

1072 
kAudioDevi˚Pr›îtySåóms
, &
d©aSize
, 
°ªams
 );

1073 i‡–
îr
 !
noEº
 )

1075 
	`PRINT_ERR
("PaOSX_SëF‹m©: CouldÇŸ gë såóms.", 
îr
);

1076 
sSavedHo°Eº‹
 = 
îr
;

1077 
ªsu…
 = 
∑Ho°Eº‹
;

1078 
föish
;

1081 
desúedNumCh™√lsPîSåóm
 = 
desúedNumCh™√ls
 / 
numSåóms
;

1082 i‡(
desúedNumCh™√lsPîSåóm
 < 1)

1083 
desúedNumCh™√lsPîSåóm
 = 1;

1085 
	`DBUG
(("PaOSX_SëF‹m©: desúedNumCh™√lsPîSåóm=%d.\n", 
desúedNumCh™√lsPîSåóm
));

1092 
°ªamIndex
=0; såómIndex<
numSåóms
; streamIndex++)

1094 
AudioSåómBasicDes¸ùti⁄
 *
be°F‹m©
;

1095 
AudioSåómBasicDes¸ùti⁄
 
cuºítF‹m©
;

1096 
numF‹m©s
;

1097 
f‹m©Index
;

1098 
be°F‹m©Index
;

1099 
ch
 = 0;

1101 
	`DBUG
(("Såóm %d\n", 
°ªamIndex
));

1105 
d©aSize
 = (
cuºítF‹m©
);

1106 
îr
 = 
	`AudioSåómGëPr›îty
–
°ªams
[
°ªamIndex
], 
ch
,

1107 
kAudioSåómPr›îtyPhysiˇlF‹m©
, &
d©aSize
,

1108 &
cuºítF‹m©
);

1109 i‡–
îr
 !
noEº
 )

1111 
	`PRINT_ERR
("PaOSX_SëF‹m©: CouldÇŸ gë cuºíàphysiˇ»f‹m© o‡°ªam %d.", 
°ªamIndex
);

1112 
sSavedHo°Eº‹
 = 
îr
;

1113 
ªsu…
 = 
∑Ho°Eº‹
;

1114 
föish
;

1117 
	`PaOSX_Debug_Pröt_F‹m©
(-1, &
cuºítF‹m©
);

1121 
îr
 = 
	`AudioSåómGëPr›îtyInfo
–
°ªams
[
°ªamIndex
], 
ch
,

1122 
kAudioSåómPr›îtyPhysiˇlF‹m©s
, &
d©aSize
, 
NULL
 );

1123 i‡–
îr
 !
noEº
 )

1125 
	`‰ì
(
°ªams
);

1126 
	`PRINT_ERR
("PaOSX_SëF‹m©: CouldÇŸ gëÇumbî o‡physiˇ»f‹m©†f‹ såóm %d.", 
°ªamIndex
);

1127 
sSavedHo°Eº‹
 = 
îr
;

1128 
ªsu…
 = 
∑Ho°Eº‹
;

1129 
föish
;

1132 
f‹m©s
 = (
AudioSåómBasicDes¸ùti⁄
 *)
	`mÆloc
(
d©aSize
);

1133 i‡–!
f‹m©s
 )

1135 
	`PRINT_ERR
("PaOSX_SëF‹m©: CouldÇŸáŒoˇã %d byã†f‹ såóm f‹m©s.", 
d©aSize
);

1136 
ªsu…
 = 
∑Insufficõ¡Mem‹y
;

1137 
föish
;

1140 
îr
 = 
	`AudioSåómGëPr›îty
–
°ªams
[
°ªamIndex
], 
ch
,

1141 
kAudioSåómPr›îtyPhysiˇlF‹m©s
, &
d©aSize
, 
f‹m©s
 );

1142 i‡–
îr
 !
noEº
 )

1144 
	`PRINT_ERR
("PaOSX_SëF‹m©: CouldÇŸ gëáŒÖhysiˇ»f‹m©†f‹ såóm %d.", 
°ªamIndex
);

1145 
sSavedHo°Eº‹
 = 
îr
;

1146 
ªsu…
 = 
∑Ho°Eº‹
;

1147 
föish
;

1150 
numF‹m©s
 = 
d©aSize
 / (
AudioSåómBasicDes¸ùti⁄
);

1161 
be°F‹m©Index
 = -1;

1162 
be°F‹m©
 = &
cuºítF‹m©
;

1164 
f‹m©Index
=0; f‹m©Index<
numF‹m©s
; formatIndex++)

1166 
	`PaOSX_Debug_Pröt_F‹m©
(
f‹m©Index
, &
f‹m©s
[formatIndex]);

1168 i‡(
	`PaOSX_IsBëãrF‹m©
(&
f‹m©s
[
f‹m©Index
], 
be°F‹m©
,

1169 
desúedR©e
, 
desúedNumCh™√lsPîSåóm
))

1171 
	`DBUG
(("F‹m© %d i†°ri˘ly bëã∏th™ f‹m© %d\n", 
f‹m©Index
, 
be°F‹m©Index
));

1172 
be°F‹m©Index
 = 
f‹m©Index
;

1173 
be°F‹m©
 = &
f‹m©s
[
f‹m©Index
];

1177 i‡(
be°F‹m©Index
 != -1)

1183 i‡(!
did_£t_hog_mode
)

1186 
d©aSize
 = (
hog_pid
);

1187 
îr
 = 
	`AudioDevi˚GëPr›îty
(
devID
, 0, 
isI≈ut
,

1188 
kAudioDevi˚Pr›îtyHogMode
, &
d©aSize
, &
hog_pid
);

1190 i‡(!
îr
 && 
hog_pid
 !
this_pid
)

1192 
	`DBUG
(("Cuºíà°©u†o‡hog mode:Öid=%dÅhis_pid=%d\n", ()
hog_pid
, ()
this_pid
));

1194 
hog_pid
 = 
this_pid
;

1195 
îr
 = 
	`AudioDevi˚SëPr›îty
–
devID
, 0, 0, 
isI≈ut
,

1196 
kAudioDevi˚Pr›îtyHogMode
, (
hog_pid
), &hog_pid);

1197 i‡(!
îr
)

1199 
	`DBUG
(("Successfully set hog mode.\n"));

1200 
did_£t_hog_mode
 = 1;

1209 i‡(
be°F‹m©
->
mSam∂eR©e
 == 0)

1210 
be°F‹m©
->
mSam∂eR©e
 = 
desúedR©e
;

1212 
d©aSize
 = (
AudioSåómBasicDes¸ùti⁄
);

1213 
îr
 = 
	`AudioSåómSëPr›îty
–
°ªams
[
°ªamIndex
], 
NULL
, 
ch
,

1214 
kAudioSåómPr›îtyPhysiˇlF‹m©
, 
d©aSize
,

1215 
be°F‹m©
 );

1217 i‡(
îr
 !
noEº
)

1219 
	`DBUG
(("Suc˚ssfuŒy së f‹m© o‡°ªam %d.\n", 
°ªamIndex
));

1220 
ªsu…
 = 1;

1224 
	`DBUG
(("U«bÀÅÿ£àf‹m© o‡°ªam %d.\n", 
°ªamIndex
));

1229 
îr
 = 
	`AudioSåómSëPr›îty
–
devID
, 
NULL
, 
ch
,

1230 
kAudioSåómPr›îtyPhysiˇlF‹m©
, 
d©aSize
,

1231 
be°F‹m©
 );

1233 i‡(
îr
 !
noEº
)

1235 
	`DBUG
(("Suc˚ssfuŒy së f‹m© o‡devi˚.\n", 
°ªamIndex
));

1236 
ªsu…
 = 1;

1240 
	`DBUG
(("U«bÀÅÿ£àf‹m© o‡devi˚.\n", 
°ªamIndex
));

1246 
	`DBUG
(("NoÇeedÅo set stream format,Éxisting format is goodÉnough.\n"));

1253 i‡(
ªsu…
 == 1)

1255 
UI¡32
 
suµ‹tsMixög
 = 1;

1256 
îr
 = 
	`AudioDevi˚SëPr›îty
–
devID
, 0, 0, 
isI≈ut
,

1257 
kAudioDevi˚Pr›îtySuµ‹tsMixög
, (
UI¡32
), &
suµ‹tsMixög
);

1259 i‡(
îr
) {

1260 
	`DBUG
(("UnableÅoÅurn on mixing\n"));

1263 
	`DBUG
(("Turned on mixing!\n"));

1267 
föish
:

1269 i‡(
°ªams
)

1270 
	`‰ì
(
°ªams
);

1271 i‡(
f‹m©s
)

1272 
	`‰ì
(
f‹m©s
);

1274 i‡(
did_£t_hog_mode
)

1276 
hog_pid
 = -1;

1277 
îr
 = 
	`AudioDevi˚SëPr›îty
–
devID
, 0, 0, 
isI≈ut
, 
kAudioDevi˚Pr›îtyHogMode
,

1278 (
hog_pid
), &hog_pid );

1280 i‡(
îr
 !
noEº
) {

1281 
	`DBUG
(("ErrorÑeleasing hog mode.\n"));

1284 
	`DBUG
(("Hog modeÑeleased successfully.\n"));

1288  
ªsu…
;

1289 
	}
}

1295 
	$PaOSX_FixVﬁumeSˇœrs
–
AudioDevi˚ID
 
devID
, 
Boﬁón
 
isI≈ut
,

1296 
numCh™√ls
, 
thªshﬁd
, 
√wLevñ
 )

1298 
OSSètus
 
îr
 = 
noEº
;

1299 
UI¡32
 
d©aSize
;

1300 
iCh™√l
;

1304  
iCh™√l
 = 0; iCh™√l<=
numCh™√ls
; iChannel++ )

1306 
Flﬂt32
 
fd©a32
;

1307 
d©aSize
 = –
fd©a32
 );

1308 
îr
 = 
	`AudioDevi˚GëPr›îty
–
devID
, 
iCh™√l
, 
isI≈ut
,

1309 
kAudioDevi˚Pr›îtyVﬁumeSˇœr
, &
d©aSize
, &
fd©a32
 );

1311 
	`¥ötf
("devID=%d\n", 
devID
);

1313 
	`¥ötf
("Channel=%d input=%d volume=%f\n",

1314 
iCh™√l
, ()
isI≈ut
, 
fd©a32
);

1316 if–
îr
 =
noEº
 )

1318 
	`DBUG
(("kAudioDevi˚Pr›îtyVﬁumeSˇœ∏f‹ ch™√»%d = %f\n", 
iCh™√l
, 
fd©a32
));

1319 if–
fd©a32
 <(
Flﬂt32
Ë
thªshﬁd
 )

1321 
d©aSize
 = –
fd©a32
 );

1322 
fd©a32
 = (
Flﬂt32
Ë
√wLevñ
;

1324 
	`¥ötf
("Channel=%d input=%dÇew volume=%f\n",

1325 
iCh™√l
, ()
isI≈ut
, 
fd©a32
);

1327 
îr
 = 
	`AudioDevi˚SëPr›îty
–
devID
, 0, 
iCh™√l
, 
isI≈ut
,

1328 
kAudioDevi˚Pr›îtyVﬁumeSˇœr
, 
d©aSize
, &
fd©a32
 );

1329 if–
îr
 !
noEº
 )

1331 
	`PRINT
(("Warning:áudio volume is veryÜowánd couldÇot beÅurned up.\n"));

1335 
	`PRINT
(("Volume foráudio channel %d was <= %4.2f so setÅo %4.2f by PortAudio!\n",

1336 
iCh™√l
, 
thªshﬁd
, 
√wLevñ
 ));

1342  
iCh™√l
 = 0; iCh™√l<=
numCh™√ls
; iChannel++ )

1344 
UI¡32
 
uid©a32
;

1345 
d©aSize
 = –
uid©a32
 );

1346 
îr
 = 
	`AudioDevi˚GëPr›îty
–
devID
, 
iCh™√l
, 
isI≈ut
,

1347 
kAudioDevi˚Pr›îtyMuã
, &
d©aSize
, &
uid©a32
 );

1348 if–
îr
 =
noEº
 )

1350 
	`DBUG
(("uid©a32 f‹ ch™√»%d = %ld\n", 
iCh™√l
, 
uid©a32
));

1351 if–
uid©a32
 == 1 )

1353 
d©aSize
 = –
uid©a32
 );

1354 
uid©a32
 = 0;

1355 
îr
 = 
	`AudioDevi˚SëPr›îty
–
devID
, 0, 
iCh™√l
, 
isI≈ut
,

1356 
kAudioDevi˚Pr›îtyMuã
, 
d©aSize
, &
uid©a32
 );

1357 if–
îr
 !
noEº
 )

1359 
	`PRINT
(("Warning:áudio is mutedánd couldÇot be unmuted!\n"));

1363 
	`PRINT
(("Audiÿch™√»%d wa†unmuãd by P‹tAudio!\n", 
iCh™√l
 ));

1369 
	}
}

1372 
	$PaOSX_DumpDevi˚Info
–
AudioDevi˚ID
 
devID
, 
Boﬁón
 
isI≈ut
 )

1374 
OSSètus
 
îr
 = 
noEº
;

1375 
UI¡32
 
d©aSize
;

1376 
UI¡32
 
uid©a32
;

1377 
Flﬂt32
 
fd©a32
;

1378 
AudioVÆueR™ge
 
audioR™ge
;

1380 
d©aSize
 = –
uid©a32
 );

1381 
îr
 = 
	`AudioDevi˚GëPr›îty
–
devID
, 0, 
isI≈ut
,

1382 
kAudioDevi˚Pr›îtyL©ícy
, &
d©aSize
, &
uid©a32
 );

1383 if–
îr
 !
noEº
 )

1385 
	`PRINT_ERR
("Eº‹Ñódög kAudioDevi˚Pr›îtyL©ícy", 
îr
);

1388 
	`PRINT
(("kAudioDevi˚Pr›îtyL©ícy = %d\n", ()
uid©a32
 ));

1390 
d©aSize
 = –
fd©a32
 );

1391 
îr
 = 
	`AudioDevi˚GëPr›îty
–
devID
, 1, 
isI≈ut
,

1392 
kAudioDevi˚Pr›îtyVﬁumeSˇœr
, &
d©aSize
, &
fd©a32
 );

1393 if–
îr
 !
noEº
 )

1395 
	`PRINT_ERR
("Eº‹Ñódög kAudioDevi˚Pr›îtyVﬁumeSˇœr", 
îr
);

1398 
	`PRINT
(("kAudioDevi˚Pr›îtyVﬁumeSˇœ∏%f\n", 
fd©a32
 ));

1400 
d©aSize
 = –
uid©a32
 );

1401 
îr
 = 
	`AudioDevi˚GëPr›îty
–
devID
, 0, 
isI≈ut
,

1402 
kAudioDevi˚Pr›îtyBuf„rSize
, &
d©aSize
, &
uid©a32
 );

1403 if–
îr
 !
noEº
 )

1405 
	`PRINT_ERR
("Eº‹Ñódög buf„∏size", 
îr
);

1408 
	`PRINT
(("kAudioDevi˚Pr›îtyBuf„rSizê%d byãs\n", ()
uid©a32
 ));

1410 
d©aSize
 = –
audioR™ge
 );

1411 
îr
 = 
	`AudioDevi˚GëPr›îty
–
devID
, 0, 
isI≈ut
,

1412 
kAudioDevi˚Pr›îtyBuf„rSizeR™ge
, &
d©aSize
, &
audioR™ge
 );

1413 if–
îr
 !
noEº
 )

1415 
	`PRINT_ERR
("Eº‹Ñódög buf„∏sizêønge", 
îr
);

1418 
	`PRINT
(("kAudioDevi˚Pr›îtyBuf„rSizeR™gê%gÅÿ%g byãs\n", 
audioR™ge
.
mMöimum
,áudioR™ge.
mMaximum
 ));

1420 
d©aSize
 = –
uid©a32
 );

1421 
îr
 = 
	`AudioDevi˚GëPr›îty
–
devID
, 0, 
isI≈ut
,

1422 
kAudioDevi˚Pr›îtyBuf„rFømeSize
, &
d©aSize
, &
uid©a32
 );

1423 if–
îr
 !
noEº
 )

1425 
	`PRINT_ERR
("Eº‹Ñódög buf„∏size", 
îr
);

1428 
	`PRINT
(("kAudioDevi˚Pr›îtyBuf„rFømeSizê%d fømes\n", ()
uid©a32
 ));

1430 
d©aSize
 = –
audioR™ge
 );

1431 
îr
 = 
	`AudioDevi˚GëPr›îty
–
devID
, 0, 
isI≈ut
,

1432 
kAudioDevi˚Pr›îtyBuf„rFømeSizeR™ge
, &
d©aSize
, &
audioR™ge
 );

1433 if–
îr
 !
noEº
 )

1435 
	`PRINT_ERR
("Eº‹Ñódög buf„∏sizêønge", 
îr
);

1438 
	`PRINT
(("kAudioDevi˚Pr›îtyBuf„rFømeSizeR™gê%gÅÿ%g fømes\n", 
audioR™ge
.
mMöimum
,áudioR™ge.
mMaximum
 ));

1441 
	}
}

1445 
OSSètus
 
	$PAOSX_Devi˚Pr›îtyLi°íî
 (
AudioDevi˚ID
 
öDevi˚
,

1446 
UI¡32
 
öCh™√l
,

1447 
Boﬁón
 
isI≈ut
,

1448 
AudioDevi˚Pr›îtyID
 
öPr›îtyID
,

1449 * 
öClõ¡D©a
)

1451 
PaHo°SoundC⁄åﬁ
 *
∑hsc
;

1452 
öã∫ÆP‹tAudioSåóm
 *
∑°
;

1453 
UI¡32
 
d©aSize
;

1454 
OSSètus
 
îr
 = 
noEº
;

1455 
AudioSåómBasicDes¸ùti⁄
 
u£rSåómF‹m©
, 
h¨dw¨eSåómF‹m©
;

1456 
Boﬁón
 
upd©eInvî£Mi¸os
;

1457 
Boﬁón
 
upd©eC⁄vîãr
;

1459 
∑°
 = (
öã∫ÆP‹tAudioSåóm
 *Ë
öClõ¡D©a
;

1460 
∑hsc
 = (
PaHo°SoundC⁄åﬁ
 *Ë
∑°
->
∑°_Devi˚D©a
;

1462 
	`DBUG
(("PAOSX_Devi˚Pr›îtyLi°íî: cÆÀd wôhÖr›îtyID = 0x%0X\n", (Ë
öPr›îtyID
 ));

1464 
upd©eInvî£Mi¸os
 = (
öDevi˚
 =
∑hsc
->
¥im¨yDevi˚ID
) &&

1465 ((
öPr›îtyID
 =
kAudioDevi˚Pr›îtySåómF‹m©
) ||

1466 (
öPr›îtyID
 =
kAudioDevi˚Pr›îtyBuf„rFømeSize
));

1468 
upd©eC⁄vîãr
 = (
öPr›îtyID
 =
kAudioDevi˚Pr›îtySåómF‹m©
);

1471 if–
upd©eC⁄vîãr
 || 
upd©eInvî£Mi¸os
 )

1475 
d©aSize
 = (
h¨dw¨eSåómF‹m©
);

1476 
îr
 = 
	`AudioDevi˚GëPr›îty
(
öDevi˚
, 0, 
isI≈ut
,

1477 
kAudioDevi˚Pr›îtySåómF‹m©
, &
d©aSize
, &
h¨dw¨eSåómF‹m©
);

1478 if–
îr
 !
noEº
 )

1480 
	`PRINT_ERR
("PAOSX_Devi˚Pr›îtyLi°íî: CouldÇŸ gë devi˚ f‹m©", 
îr
);

1481 
sSavedHo°Eº‹
 = 
îr
;

1482 
îr‹
;

1486 if–
upd©eC⁄vîãr
 )

1488 
	`DBUG
(("PAOSX_Devi˚Pr›îtyLi°íî: HWÑ©ê%f\n", 
h¨dw¨eSåómF‹m©
.
mSam∂eR©e
 ));

1489 
	`DBUG
(("PAOSX_Devi˚Pr›îtyLi°íî: u£∏øã = %f\n", 
∑°
->
∑°_Sam∂eR©e
 ));

1492 
	`mem£t
(&
u£rSåómF‹m©
, 0, (
AudioSåómBasicDes¸ùti⁄
));

1494 
u£rSåómF‹m©
.
mF‹m©ID
 = 
kAudioF‹m©LöórPCM
;

1495 
u£rSåómF‹m©
.
mF‹m©Fœgs
 =

1496 
kAudioF‹m©FœgIsFlﬂt
 |

1497 
kAudioF‹m©FœgIsBigEndün
 |

1498 
kAudioF‹m©FœgIsPacked
;

1499 
u£rSåómF‹m©
.
mBôsPîCh™√l
 = 32;

1500 
u£rSåómF‹m©
.
mSam∂eR©e
 = 
∑°
->
∑°_Sam∂eR©e
;

1501 
u£rSåómF‹m©
.
mCh™√lsPîFøme
 = (
isI≈ut
Ë? 
∑°
->
∑°_NumI≈utCh™√ls
 :Öa°->
∑°_NumOuçutCh™√ls
;

1503 
u£rSåómF‹m©
.
mByãsPîFøme
 = u£rSåómF‹m©.
mCh™√lsPîFøme
 * ();

1504 
u£rSåómF‹m©
.
mFømesPîPackë
 = 1;

1505 
u£rSåómF‹m©
.
mByãsPîPackë
 = u£rSåómF‹m©.
mByãsPîFøme
 * u£rSåómF‹m©.
mFømesPîPackë
;

1507 if–
isI≈ut
 )

1509 if–
∑hsc
->
öput
.
c⁄vîãr
 !
NULL
 )

1511 
	`vîify_n€º
(
	`AudioC⁄vîãrDi•o£
 (
∑hsc
->
öput
.
c⁄vîãr
));

1515 
îr
 = 
	`AudioC⁄vîãrNew
 (

1516 &
h¨dw¨eSåómF‹m©
,

1517 &
u£rSåómF‹m©
,

1518 &
∑hsc
->
öput
.
c⁄vîãr
 );

1519 if–
îr
 !
noEº
 )

1521 
	`PRINT_ERR
("CouldÇŸ cª©êöpuàf‹m© c⁄vîãr", 
îr
);

1522 
sSavedHo°Eº‹
 = 
îr
;

1523 
îr‹
;

1528 if–
∑hsc
->
ouçut
.
c⁄vîãr
 !
NULL
 )

1530 
	`vîify_n€º
(
	`AudioC⁄vîãrDi•o£
 (
∑hsc
->
ouçut
.
c⁄vîãr
));

1534 
îr
 = 
	`AudioC⁄vîãrNew
 (

1535 &
u£rSåómF‹m©
,

1536 &
h¨dw¨eSåómF‹m©
,

1537 &
∑hsc
->
ouçut
.
c⁄vîãr
 );

1538 if–
îr
 !
noEº
 )

1540 
	`PRINT_ERR
("CouldÇŸ cª©êouçuàf‹m© c⁄vîãr", 
îr
);

1541 
sSavedHo°Eº‹
 = 
îr
;

1542 
îr‹
;

1547 if–
upd©eInvî£Mi¸os
 )

1550 
UI¡32
 
ioBuf„rSize
;

1551 
d©aSize
 = (
ioBuf„rSize
);

1552 
îr
 = 
	`AudioDevi˚GëPr›îty
–
öDevi˚
, 0, 
isI≈ut
,

1553 
kAudioDevi˚Pr›îtyBuf„rFømeSize
, &
d©aSize
,

1554 &
ioBuf„rSize
);

1555 if–
îr
 =
noEº
 )

1557 
∑hsc
->
övî£Mi¸osPîHo°Buf„r
 = 
h¨dw¨eSåómF‹m©
.
mSam∂eR©e
 /

1558 (1000000.0 * 
ioBuf„rSize
);

1562 
îr‹
:

1563 
∑hsc
->
f‹m©Li°íîCÆÀd
 = 
åue
;

1564  
îr
;

1565 
	}
}

1570 
PaEº‹
 
	$PaOSX_Cª©eI≈utRögBuf„r
–
öã∫ÆP‹tAudioSåóm
 *
∑°
 )

1572 
PaHo°SoundC⁄åﬁ
 *
∑hsc
 = (PaHo°SoundC⁄åﬁ *Ë
∑°
->
∑°_Devi˚D©a
;

1573 
OSSètus
 
îr
 = 
noEº
;

1574 
UI¡32
 
d©aSize
;

1575 
ßm∂eR©eR©io
;

1576 
numByãs
;

1577 
UI¡32
 
‰amesPîHo°Buf„r
;

1578 
UI¡32
 
byãsF‹Devi˚
;

1579 
UI¡32
 
byãsF‹U£r
;

1580 
AudioSåómBasicDes¸ùti⁄
 
f‹m©Desc
;

1582 
d©aSize
 = (
f‹m©Desc
);

1583 
îr
 = 
	`AudioDevi˚GëPr›îty
–
∑hsc
->
öput
.
audioDevi˚ID
, 0, 
IS_INPUT
,

1584 
kAudioDevi˚Pr›îtySåómF‹m©
, &
d©aSize
, &
f‹m©Desc
);

1585 if–
îr
 !
noEº
 )

1587 
	`PRINT_ERR
("PaOSX_Cª©eI≈utRögBuf„r: CouldÇŸ gë I/O buf„∏size.\n", 
îr
);

1588 
sSavedHo°Eº‹
 = 
îr
;

1589  
∑Ho°Eº‹
;

1593 
ßm∂eR©eR©io
 = 
f‹m©Desc
.
mSam∂eR©e
 / 
∑°
->
∑°_Sam∂eR©e
;

1596 
d©aSize
 = (
‰amesPîHo°Buf„r
);

1597 
îr
 = 
	`AudioDevi˚GëPr›îty
–
∑hsc
->
öput
.
audioDevi˚ID
, 0, 
IS_INPUT
,

1598 
kAudioDevi˚Pr›îtyBuf„rFømeSize
, &
d©aSize
,

1599 &
‰amesPîHo°Buf„r
);

1600 if–
îr
 !
noEº
 )

1602 
	`PRINT_ERR
("PaOSX_Cª©eI≈utRögBuf„r: CouldÇŸ gë I/O buf„∏size.\n", 
îr
);

1603 
sSavedHo°Eº‹
 = 
îr
;

1604  
∑Ho°Eº‹
;

1607 
byãsF‹Devi˚
 = 
‰amesPîHo°Buf„r
 * 
f‹m©Desc
.
mCh™√lsPîFøme
 * (
Flﬂt32
) * 2;

1609 
byãsF‹U£r
 = 
∑°
->
∑°_FømesPîU£rBuf„r
 *Öa°->
∑°_NumI≈utCh™√ls
 *

1610 (
Flﬂt32
Ë* 3 * 
ßm∂eR©eR©io
;

1614 
numByãs
 = (
byãsF‹Devi˚
 > 
byãsF‹U£r
) ? bytesForDevice : bytesForUser;

1616 
numByãs
 = 
	`RoundUpToNextPowîOf2
(ÇumBytes );

1618 
	`DBUG
(("PaOSX_Cª©eI≈utRögBuf„r: FIFOÇumByã†%ld\n", 
numByãs
));

1619 
∑hsc
->
rögBuf„rD©a
 = 
	`PaHo°_AŒoˇãFa°Mem‹y
–
numByãs
 );

1620 if–
∑hsc
->
rögBuf„rD©a
 =
NULL
 )

1622  
∑Insufficõ¡Mem‹y
;

1624 
	`RögBuf„r_Inô
–&
∑hsc
->
rögBuf„r
, 
numByãs
,Öahsc->
rögBuf„rD©a
 );

1626 
	`RögBuf„r_Adv™˚WrôeIndex
–&
∑hsc
->
rögBuf„r
, 
numByãs
 );

1628  
∑NoEº‹
;

1629 
	}
}

1636 
OSSètus
 
	$PaOSX_SëDevi˚Buf„rSize
–
AudioDevi˚ID
 
devID
, 
Boﬁón
 
isI≈ut
, 
‰amesPîU£rBuf„r
, 
Flﬂt64
 
ßm∂eR©eR©io
 )

1638 
UI¡32
 
d©aSize
;

1639 
UI¡32
 
ioBuf„rSize
;

1640 
sˇÀr
;

1642 
sˇÀr
 = (Ë
ßm∂eR©eR©io
;

1643 if–
ßm∂eR©eR©io
 > (
Flﬂt64
Ë
sˇÀr
 ) scaler += 1;

1644 
	`DBUG
(("PaOSX_SëDevi˚Buf„rSize: buf„∏sizêsˇÀ∏%d\n", 
sˇÀr
 ));

1645 
ioBuf„rSize
 = 
‰amesPîU£rBuf„r
 * 
sˇÀr
;

1648 if–
ioBuf„rSize
 < 128 ) ioBufferSize = 128;

1650 
d©aSize
 = (
ioBuf„rSize
);

1651  
	`AudioDevi˚SëPr›îty
–
devID
, 0, 0, 
isI≈ut
,

1652 
kAudioDevi˚Pr›îtyBuf„rFømeSize
, 
d©aSize
,

1653 &
ioBuf„rSize
);

1654 
	}
}

1658 
PaEº‹
 
	$PaOSX_O≥nComm⁄Devi˚
–
öã∫ÆP‹tAudioSåóm
 *
∑°
,

1659 
PaHo°InOut
 *
öOut
, 
Boﬁón
 
isI≈ut
 )

1661 
PaHo°SoundC⁄åﬁ
 *
∑hsc
 = (PaHo°SoundC⁄åﬁ *Ë
∑°
->
∑°_Devi˚D©a
;

1662 
PaEº‹
 
ªsu…
 = 
∑NoEº‹
;

1663 
OSSètus
 
îr
 = 
noEº
;

1664 
Flﬂt64
 
devi˚R©e
;

1671 
∑hsc
->
f‹m©Li°íîCÆÀd
 = 
Ál£
;

1674 
	`DBUG
(("PaOSX_OpenCommonDevice: call AudioDeviceAddPropertyListener()\n" ));

1675 
îr
 = 
	`AudioDevi˚AddPr›îtyLi°íî
–
öOut
->
audioDevi˚ID
, 0, 
isI≈ut
,

1676 
kAudioDevi˚Pr›îtySåómF‹m©
,

1677 (
AudioDevi˚Pr›îtyLi°íîProc
Ë
PAOSX_Devi˚Pr›îtyLi°íî
, 
∑°
 );

1678 i‡(
îr
 !
noEº
)

1685 
ªsu…
 = 
	`PaOSX_SëF‹m©
–
öOut
->
audioDevi˚ID
, 
isI≈ut
, 
∑°
->
∑°_Sam∂eR©e
, inOut->
numCh™√ls
 );

1688 if–
ªsu…
 == 1 )

1690 c⁄° 
¶ìpDurM£c
 = 10;

1691 
•öCou¡
 = 
MIN_TIMEOUT_MSEC
 / 
¶ìpDurM£c
;

1692  !
∑hsc
->
f‹m©Li°íîCÆÀd
 && (
•öCou¡
 > 0) )

1694 
	`DBUG
(("SÀïög: %d\n", 
•öCou¡
));

1695 
	`Pa_SÀï
–
¶ìpDurM£c
 );

1696 
•öCou¡
--;

1698 if–!
∑hsc
->
f‹m©Li°íîCÆÀd
 )

1700 
	`PRINT
(("PaOSX_OpenCommonDevice:Åimed out waiting for device formatÅo settle.\n"));

1702 
ªsu…
 = 0;

1707 if–
öOut
->
c⁄vîãr
 =
NULL
 )

1709 
îr
 = 
	`PAOSX_Devi˚Pr›îtyLi°íî
 (
öOut
->
audioDevi˚ID
,

1710 0, 
isI≈ut
, 
kAudioDevi˚Pr›îtySåómF‹m©
, 
∑°
);

1711 i‡(
îr
 !
kAudioH¨dw¨eNoEº‹
)

1713 
	`PRINT_ERR
("PaOSX_O≥nComm⁄Devi˚: PAOSX_Devi˚Pr›îtyLi°íî faûed.\n", 
îr
);

1714 
sSavedHo°Eº‹
 = 
îr
;

1715  
∑Ho°Eº‹
;

1719 #i‡
SET_DEVICE_BUFFER_SIZE


1722 
Flﬂt64
 
øtio
;

1723 
devi˚R©e
 = 
	`PaOSX_GëDevi˚Sam∂eR©e
–
öOut
->
audioDevi˚ID
, 
isI≈ut
 );

1724 if–
devi˚R©e
 <0.0 ) devi˚R©ê
∑°
->
∑°_Sam∂eR©e
;

1725 
øtio
 = 
devi˚R©e
 / 
∑°
->
∑°_Sam∂eR©e
 ;

1726 
îr
 = 
	`PaOSX_SëDevi˚Buf„rSize
–
öOut
->
audioDevi˚ID
, 
isI≈ut
,

1727 
∑°
->
∑°_FømesPîU£rBuf„r
, 
øtio
 );

1728 if–
îr
 !
noEº
 )

1730 
	`DBUG
(("PaOSX_OpenCommonDevice: CouldÇot set I/O buffer size.\n"));

1736 
öOut
->
c⁄vîãrBuf„r
 = 
	`PaHo°_AŒoˇãFa°Mem‹y
–öOut->
byãsPîU£rN©iveBuf„r
 );

1737 if–
öOut
->
c⁄vîãrBuf„r
 =
NULL
 )

1739  
∑Insufficõ¡Mem‹y
;

1742  
ªsu…
;

1743 
	}
}

1746 
PaEº‹
 
	$PaOSX_O≥nI≈utDevi˚
–
öã∫ÆP‹tAudioSåóm
 *
∑°
 )

1748 
PaHo°SoundC⁄åﬁ
 *
∑hsc
 = (PaHo°SoundC⁄åﬁ *Ë
∑°
->
∑°_Devi˚D©a
;

1749 c⁄° 
PaHo°Devi˚Info
 *
ho°Devi˚Info
;

1750 
PaEº‹
 
ªsu…
 = 
∑NoEº‹
;

1752 
	`DBUG
(("PaOSX_OpenInputDevice: -------------\n"));

1754 if–(
∑°
->
∑°_I≈utDevi˚ID
 < 
LOWEST_INPUT_DEVID
) ||

1755 (
∑°
->
∑°_I≈utDevi˚ID
 > 
HIGHEST_INPUT_DEVID
) )

1757  
∑InvÆidDevi˚Id
;

1759 
ho°Devi˚Info
 = &
sDevi˚Infos
[
∑°
->
∑°_I≈utDevi˚ID
];

1761 if–
∑°
->
∑°_NumI≈utCh™√ls
 > 
ho°Devi˚Info
->
∑Info
.
maxI≈utCh™√ls
 )

1763 
	`DBUG
(("Too many channels!Ñequested: %d max: %d\n",

1764 
∑°
->
∑°_NumI≈utCh™√ls
,

1765 
ho°Devi˚Info
->
∑Info
.
maxI≈utCh™√ls
));

1766  
∑InvÆidCh™√lCou¡
;

1768 
∑hsc
->
öput
.
numCh™√ls
 = 
∑°
->
∑°_NumI≈utCh™√ls
;

1771 
ªsu…
 = 
	`PaC⁄vît_SëupI≈ut
–
∑°
, 
∑Flﬂt32
 );

1773 
ªsu…
 = 
	`PaOSX_O≥nComm⁄Devi˚
–
∑°
, &
∑hsc
->
öput
, 
IS_INPUT
 );

1774 if–
ªsu…
 !
∑NoEº‹
 ) 
îr‹
;

1777 
ªsu…
 = 
	`PaOSX_Cª©eI≈utRögBuf„r
–
∑°
 );

1778 if–
ªsu…
 !
∑NoEº‹
 ) 
îr‹
;

1780 
îr‹
:

1781  
ªsu…
;

1782 
	}
}

1785 
PaEº‹
 
	$PaOSX_O≥nOuçutDevi˚
–
öã∫ÆP‹tAudioSåóm
 *
∑°
 )

1787 
PaHo°SoundC⁄åﬁ
 *
∑hsc
;

1788 c⁄° 
PaHo°Devi˚Info
 *
ho°Devi˚Info
;

1789 
PaEº‹
 
ªsu…
 = 
∑NoEº‹
;

1791 
	`DBUG
(("PaOSX_OpenOutputDevice: -------------\n"));

1792 
∑hsc
 = (
PaHo°SoundC⁄åﬁ
 *Ë
∑°
->
∑°_Devi˚D©a
;

1795 
	`DBUG
(("PaOSX_O≥nOuçutDevi˚: devi˚ID = 0x%x\n", 
∑°
->
∑°_OuçutDevi˚ID
));

1796 if–(
∑°
->
∑°_OuçutDevi˚ID
 < 
LOWEST_OUTPUT_DEVID
) ||

1797 (
∑°
->
∑°_OuçutDevi˚ID
 > 
HIGHEST_OUTPUT_DEVID
) )

1799  
∑InvÆidDevi˚Id
;

1801 
ho°Devi˚Info
 = &
sDevi˚Infos
[
∑°
->
∑°_OuçutDevi˚ID
];

1804 if–
∑°
->
∑°_NumOuçutCh™√ls
 > 
ho°Devi˚Info
->
∑Info
.
maxOuçutCh™√ls
 )

1806 
	`DBUG
(("Too many channels!Ñequested: %d max: %d\n",

1807 
∑°
->
∑°_NumOuçutCh™√ls
,

1808 
ho°Devi˚Info
->
∑Info
.
maxOuçutCh™√ls
));

1809  
∑InvÆidCh™√lCou¡
;

1811 
∑hsc
->
ouçut
.
numCh™√ls
 = 
∑°
->
∑°_NumOuçutCh™√ls
;

1814 
ªsu…
 = 
	`PaC⁄vît_SëupOuçut
–
∑°
, 
∑Flﬂt32
 );

1815 if–
ªsu…
 !
∑NoEº‹
 ) 
îr‹
;

1817 
ªsu…
 = 
	`PaOSX_O≥nComm⁄Devi˚
–
∑°
, &
∑hsc
->
ouçut
, 
IS_OUTPUT
 );

1818 if–
ªsu…
 !
∑NoEº‹
 ) 
îr‹
;

1820 
îr‹
:

1821  
ªsu…
;

1822 
	}
}

1833 
	$PaOSX_CÆcHo°Buf„rSize
–
öã∫ÆP‹tAudioSåóm
 *
∑°
 )

1835 
PaHo°SoundC⁄åﬁ
 *
∑hsc
 = ( PaHo°SoundC⁄åﬁ *)
∑°
->
∑°_Devi˚D©a
;

1840 
∑°
->
∑°_NumU£rBuf„rs
 = 
	`Pa_GëMöNumBuf„rs
–∑°->
∑°_FømesPîU£rBuf„r
,Öa°->
∑°_Sam∂eR©e
 );

1843 
∑hsc
->
öput
.
byãsPîU£rN©iveBuf„r
 = 
∑°
->
∑°_FømesPîU£rBuf„r
 *

1844 
	`Pa_GëSam∂eSize
(
∑Flﬂt32
Ë* 
∑°
->
∑°_NumI≈utCh™√ls
;

1845 
∑hsc
->
ouçut
.
byãsPîU£rN©iveBuf„r
 = 
∑°
->
∑°_FømesPîU£rBuf„r
 *

1846 
	`Pa_GëSam∂eSize
(
∑Flﬂt32
Ë* 
∑°
->
∑°_NumOuçutCh™√ls
;

1848 
	`DBUG
(("PaOSX_CÆcNumHo°Buf„rs:Öa°_NumU£rBuf„r†%ld\n", 
∑°
->
∑°_NumU£rBuf„rs
 ));

1849 
	`DBUG
(("PaOSX_CÆcNumHo°Buf„rs: i≈ut.byãsPîU£rN©iveBuf„∏%d\n", 
∑hsc
->
öput
.
byãsPîU£rN©iveBuf„r
 ));

1850 
	`DBUG
(("PaOSX_CÆcNumHo°Buf„rs: ouçut.byãsPîU£rN©iveBuf„∏%d\n", 
∑hsc
->
ouçut
.
byãsPîU£rN©iveBuf„r
 ));

1851 
	}
}

1856 
PaEº‹
 
	$PaHo°_O≥nSåóm
–
öã∫ÆP‹tAudioSåóm
 *
∑°
 )

1858 
PaEº‹
 
ªsu…
 = 
∑NoEº‹
;

1859 
PaHo°SoundC⁄åﬁ
 *
∑hsc
;

1860 
Boﬁón
 
u£I≈ut
;

1861 
Boﬁón
 
u£Ouçut
;

1863 
	`as£π
–
∑°
->
∑°_Magic
 =
PA_MAGIC
 );

1866 
∑hsc
 = (
PaHo°SoundC⁄åﬁ
 *Ë
	`mÆloc
((PaHostSoundControl));

1867 if–
∑hsc
 =
NULL
 )

1869 
ªsu…
 = 
∑Insufficõ¡Mem‹y
;

1870 
îr‹
;

1872 
	`mem£t
–
∑hsc
, 0, (
PaHo°SoundC⁄åﬁ
) );

1873 
∑°
->
∑°_Devi˚D©a
 = (*Ë
∑hsc
;

1874 
∑hsc
->
¥im¨yDevi˚ID
 = 
kAudioDevi˚Unknown
;

1875 
∑hsc
->
öput
.
audioDevi˚ID
 = 
kAudioDevi˚Unknown
;

1876 
∑hsc
->
ouçut
.
audioDevi˚ID
 = 
kAudioDevi˚Unknown
;

1878 
	`PaOSX_CÆcHo°Buf„rSize
–
∑°
 );

1880 
u£Ouçut
 = (
∑°
->
∑°_OuçutDevi˚ID
 !
∑NoDevi˚
Ë&& (∑°->
∑°_NumOuçutCh™√ls
 > 0);

1881 
u£I≈ut
 = (
∑°
->
∑°_I≈utDevi˚ID
 !
∑NoDevi˚
Ë&& (∑°->
∑°_NumI≈utCh™√ls
 > 0);

1884 if–
u£Ouçut
 )

1886 
∑hsc
->
ouçut
.
audioDevi˚ID
 = 
sDevi˚Infos
[
∑°
->
∑°_OuçutDevi˚ID
].audioDeviceID;

1887 
∑hsc
->
¥im¨yDevi˚ID
 =Öahsc->
ouçut
.
audioDevi˚ID
;

1888 if–
u£I≈ut
 )

1890 
∑hsc
->
öput
.
audioDevi˚ID
 = 
sDevi˚Infos
[
∑°
->
∑°_I≈utDevi˚ID
].audioDeviceID;

1891 
∑hsc
->
mode
 = (Öahsc->
öput
.
audioDevi˚ID
 !∑hsc->
¥im¨yDevi˚ID
 ) ?

1892 
PA_MODE_IO_TWO_DEVICES
 : 
PA_MODE_IO_ONE_DEVICE
;

1896 
∑hsc
->
mode
 = 
PA_MODE_OUTPUT_ONLY
;

1902 
∑hsc
->
öput
.
audioDevi˚ID
 = 
sDevi˚Infos
[
∑°
->
∑°_I≈utDevi˚ID
].audioDeviceID;

1903 
∑hsc
->
¥im¨yDevi˚ID
 =Öahsc->
öput
.
audioDevi˚ID
;

1904 
∑hsc
->
mode
 = 
PA_MODE_INPUT_ONLY
;

1907 
	`DBUG
(("ouçutDevi˚ID = %ld\n", 
∑hsc
->
ouçut
.
audioDevi˚ID
 ));

1908 
	`DBUG
(("öputDevi˚ID = %ld\n", 
∑hsc
->
öput
.
audioDevi˚ID
 ));

1909 
	`DBUG
(("¥im¨yDevi˚ID = %ld\n", 
∑hsc
->
¥im¨yDevi˚ID
 ));

1912 if–
u£Ouçut
 )

1914 
ªsu…
 = 
	`PaOSX_O≥nOuçutDevi˚
–
∑°
 );

1915 if–
ªsu…
 < 0 ) 
îr‹
;

1919 if–
u£I≈ut
 )

1921 
ªsu…
 = 
	`PaOSX_O≥nI≈utDevi˚
–
∑°
 );

1922 if–
ªsu…
 < 0 ) 
îr‹
;

1925  
ªsu…
;

1927 
îr‹
:

1928 
	`PaHo°_Clo£Såóm
–
∑°
 );

1929  
ªsu…
;

1930 
	}
}

1933 
PaEº‹
 
	$PaHo°_SèπOuçut
–
öã∫ÆP‹tAudioSåóm
 *
∑°
 )

1936 
	}
}

1939 
PaEº‹
 
	$PaHo°_SèπI≈ut
–
öã∫ÆP‹tAudioSåóm
 *
∑°
 )

1942 
	}
}

1945 
PaEº‹
 
	$PaHo°_SèπEngöe
–
öã∫ÆP‹tAudioSåóm
 *
∑°
 )

1947 
OSSètus
 
îr
 = 
noEº
;

1948 
PaEº‹
 
ªsu…
 = 
∑NoEº‹
;

1949 
PaHo°SoundC⁄åﬁ
 *
∑hsc
 = (PaHo°SoundC⁄åﬁ *Ë
∑°
->
∑°_Devi˚D©a
;

1951 
∑°
->
∑°_St›So⁄
 = 0;

1952 
∑°
->
∑°_St›Now
 = 0;

1953 
∑°
->
∑°_IsA˘ive
 = 1;

1955 
∑°
->
∑°_FømeCou¡
 = 0;

1958 if–
∑hsc
->
mode
 =
PA_MODE_IO_TWO_DEVICES
 )

1961 
îr
 = 
	`AudioDevi˚AddIOProc
(
∑hsc
->
öput
.
audioDevi˚ID
, (
AudioDevi˚IOProc
)
PaOSX_C‹eAudioI≈utCÆlback
, 
∑°
);

1962 i‡(
îr
 !
noEº
)

1964 
	`PRINT_ERR
("PaHo°_SèπEngöe: AudioDevi˚AddIOPro¯£c⁄d¨y faûed", 
îr
 );

1965 
îr‹
;

1969 
îr
 = 
	`AudioDevi˚Sèπ
(
∑hsc
->
öput
.
audioDevi˚ID
, (
AudioDevi˚IOProc
)
PaOSX_C‹eAudioI≈utCÆlback
);

1970 i‡(
îr
 !
noEº
)

1972 
	`PRINT_ERR
("PaHo°_SèπEngöe: AudioDevi˚Sèπ sec⁄d¨y faûed", 
îr
 );

1973 
	`PRINT
(("TheÖrogram may succeed if youÑun itágain!\n"));

1974 
îr‹
;

1979 
îr
 = 
	`AudioDevi˚AddIOProc
(
∑hsc
->
¥im¨yDevi˚ID
, (
AudioDevi˚IOProc
)
PaOSX_C‹eAudioIOCÆlback
, 
∑°
);

1980 i‡(
îr
 !
noEº
)

1982 
	`PRINT_ERR
("PaHo°_SèπEngöe: AudioDevi˚AddIOPro¯¥im¨y faûed", 
îr
 );

1983 
îr‹
;

1987 
îr
 = 
	`AudioDevi˚Sèπ
(
∑hsc
->
¥im¨yDevi˚ID
, (
AudioDevi˚IOProc
)
PaOSX_C‹eAudioIOCÆlback
);

1988 i‡(
îr
 !
noEº
)

1990 
	`PRINT_ERR
("PaHo°_SèπEngöe: AudioDevi˚SèπÖrim¨y faûed", 
îr
 );

1991 
	`PRINT
(("TheÖrogram may succeed if youÑun itágain!\n"));

1992 
îr‹
;

1995  
ªsu…
;

1997 
îr‹
:

1998 
sSavedHo°Eº‹
 = 
îr
;

1999  
∑Ho°Eº‹
;

2000 
	}
}

2003 
PaEº‹
 
	$PaHo°_St›Engöe
–
öã∫ÆP‹tAudioSåóm
 *
∑°
, 
ab‹t
 )

2005 
OSSètus
 
îr
 = 
noEº
;

2006 
PaHo°SoundC⁄åﬁ
 *
∑hsc
 = (PaHo°SoundC⁄åﬁ *Ë
∑°
->
∑°_Devi˚D©a
;

2007 if–
∑hsc
 =
NULL
 )  
∑NoEº‹
;

2008 (Ë
ab‹t
;

2011 
∑°
->
∑°_St›So⁄
 = 1;

2013 if–
ab‹t
 ) 
∑°
->
∑°_St›Now
 = 1;

2014 
∑°
->
∑°_IsA˘ive
 = 0;

2016 #i‡
PA_TRACE_START_STOP


2017 
	`AddTø˚Mesßge
–"PaHo°_St›Ouçut:Öahsc_HWaveOuà", (Ë
∑hsc
->
∑hsc_HWaveOut
 );

2021 
îr
 = 
	`AudioDevi˚St›
(
∑hsc
->
¥im¨yDevi˚ID
, (
AudioDevi˚IOProc
)
PaOSX_C‹eAudioIOCÆlback
);

2022 i‡(
îr
 !
noEº
)

2024 
îr‹
;

2027 
îr
 = 
	`AudioDevi˚RemoveIOProc
(
∑hsc
->
¥im¨yDevi˚ID
, (
AudioDevi˚IOProc
)
PaOSX_C‹eAudioIOCÆlback
);

2028 i‡(
îr
 !
noEº
Ë
îr‹
;

2031 if–
∑hsc
->
mode
 =
PA_MODE_IO_TWO_DEVICES
 )

2033 
îr
 = 
	`AudioDevi˚St›
(
∑hsc
->
öput
.
audioDevi˚ID
, (
AudioDevi˚IOProc
)
PaOSX_C‹eAudioI≈utCÆlback
);

2034 i‡(
îr
 !
noEº
Ë
îr‹
;

2035 
îr
 = 
	`AudioDevi˚RemoveIOProc
(
∑hsc
->
öput
.
audioDevi˚ID
, (
AudioDevi˚IOProc
)
PaOSX_C‹eAudioI≈utCÆlback
);

2036 i‡(
îr
 !
noEº
Ë
îr‹
;

2039  
∑NoEº‹
;

2041 
îr‹
:

2042 
sSavedHo°Eº‹
 = 
îr
;

2043  
∑Ho°Eº‹
;

2044 
	}
}

2047 
PaEº‹
 
	$PaHo°_St›I≈ut
–
öã∫ÆP‹tAudioSåóm
 *
∑°
, 
ab‹t
 )

2049  
∑NoEº‹
;

2050 
	}
}

2053 
PaEº‹
 
	$PaHo°_St›Ouçut
–
öã∫ÆP‹tAudioSåóm
 *
∑°
, 
ab‹t
 )

2055  
∑NoEº‹
;

2056 
	}
}

2059 
PaEº‹
 
	$PaHo°_Clo£Såóm
–
öã∫ÆP‹tAudioSåóm
 *
∑°
 )

2061 
PaHo°SoundC⁄åﬁ
 *
∑hsc
;

2063 if–
∑°
 =
NULL
 )  
∑BadSåómPå
;

2064 
∑hsc
 = (
PaHo°SoundC⁄åﬁ
 *Ë
∑°
->
∑°_Devi˚D©a
;

2065 if–
∑hsc
 =
NULL
 )  
∑NoEº‹
;

2069 #i‡
PA_TRACE_START_STOP


2070 
	`AddTø˚Mesßge
–"PaHo°_Clo£Såóm:Öahsc_HWaveOuà", (Ë
∑hsc
->
∑hsc_HWaveOut
 );

2073 if–
PA_USING_INPUT
 )

2075 
	`AudioDevi˚RemovePr›îtyLi°íî
–
∑hsc
->
öput
.
audioDevi˚ID
, 0, 
IS_INPUT
,

2076 
kAudioDevi˚Pr›îtySåómF‹m©
,

2077 (
AudioDevi˚Pr›îtyLi°íîProc
Ë
PAOSX_Devi˚Pr›îtyLi°íî
 );

2080 if–
PA_USING_OUTPUT
 )

2082 
	`AudioDevi˚RemovePr›îtyLi°íî
–
∑hsc
->
ouçut
.
audioDevi˚ID
, 0, 
IS_OUTPUT
,

2083 
kAudioDevi˚Pr›îtySåómF‹m©
,

2084 (
AudioDevi˚Pr›îtyLi°íîProc
Ë
PAOSX_Devi˚Pr›îtyLi°íî
 );

2087 if–
∑hsc
->
ouçut
.
c⁄vîãrBuf„r
 !
NULL
 )

2089 
	`PaHo°_FªeFa°Mem‹y
–
∑hsc
->
ouçut
.
c⁄vîãrBuf„r
,Öahsc->ouçut.
byãsPîU£rN©iveBuf„r
 );

2091 if–
∑hsc
->
öput
.
c⁄vîãrBuf„r
 !
NULL
 )

2093 
	`PaHo°_FªeFa°Mem‹y
–
∑hsc
->
öput
.
c⁄vîãrBuf„r
,Öahsc->öput.
byãsPîU£rN©iveBuf„r
 );

2095 if–
∑hsc
->
rögBuf„rD©a
 !
NULL
 )

2097 
	`PaHo°_FªeFa°Mem‹y
–
∑hsc
->
rögBuf„rD©a
,Öahsc->
rögBuf„r
.
buf„rSize
 );

2099 if–
∑hsc
->
ouçut
.
c⁄vîãr
 !
NULL
 )

2101 
	`vîify_n€º
(
	`AudioC⁄vîãrDi•o£
 (
∑hsc
->
ouçut
.
c⁄vîãr
));

2103 if–
∑hsc
->
öput
.
c⁄vîãr
 !
NULL
 )

2105 
	`vîify_n€º
(
	`AudioC⁄vîãrDi•o£
 (
∑hsc
->
öput
.
c⁄vîãr
));

2108 
	`‰ì
–
∑hsc
 );

2109 
∑°
->
∑°_Devi˚D©a
 = 
NULL
;

2111  
∑NoEº‹
;

2112 
	}
}

2117 
PaEº‹
 
	$PaHo°_Inô
( )

2119  
	`PaOSX_MaybeQuîyDevi˚s
();

2120 
	}
}

2125 
PaEº‹
 
	$PaHo°_Tîm
( )

2127 
i
;

2129 if–
sDevi˚Infos
 !
NULL
 )

2131  
i
=0; i<
sNumPaDevi˚s
; i++ )

2133 if–
sDevi˚Infos
[
i
].
∑Info
.
«me
 !
NULL
 )

2135 
	`‰ì
–(*)
sDevi˚Infos
[
i
].
∑Info
.
«me
 );

2138 
	`‰ì
–
sDevi˚Infos
 );

2139 
sDevi˚Infos
 = 
NULL
;

2142 
sNumPaDevi˚s
 = 0;

2143  
∑NoEº‹
;

2144 
	}
}

2152 *
	$PaHo°_AŒoˇãFa°Mem‹y
–
numByãs
 )

2154 *
addr
 = 
	`mÆloc
–
numByãs
 );

2155 if–
addr
 !
NULL
 ) 
	`mem£t
–addr, 0, 
numByãs
 );

2156  
addr
;

2157 
	}
}

2163 
	$PaHo°_FªeFa°Mem‹y
–*
addr
, 
numByãs
 )

2165 if–
addr
 !
NULL
 ) 
	`‰ì
(áddr );

2166 
	}
}

2170 
PaEº‹
 
	$PaHo°_SåómA˘ive
–
öã∫ÆP‹tAudioSåóm
 *
∑°
 )

2172 
PaHo°SoundC⁄åﬁ
 *
∑hsc
;

2173 if–
∑°
 =
NULL
 )  
∑BadSåómPå
;

2174 
∑hsc
 = (
PaHo°SoundC⁄åﬁ
 *Ë
∑°
->
∑°_Devi˚D©a
;

2175 if–
∑hsc
 =
NULL
 )  
∑I¡î«lEº‹
;

2176  (
PaEº‹
Ë
∑°
->
∑°_IsA˘ive
;

2177 
	}
}

2186 
PaDevi˚ID
 
	$Pa_GëDeÁu…I≈utDevi˚ID
( )

2188 
PaEº‹
 
ªsu…
 = 
	`PaOSX_MaybeQuîyDevi˚s
();

2189 if–
ªsu…
 < 0 ) Ñesult;

2190  
sDeÁu…I≈utDevi˚ID
;

2191 
	}
}

2193 
PaDevi˚ID
 
	$Pa_GëDeÁu…OuçutDevi˚ID
( )

2195 
PaEº‹
 
ªsu…
 = 
	`PaOSX_MaybeQuîyDevi˚s
();

2196 if–
ªsu…
 < 0 ) Ñesult;

2197  
sDeÁu…OuçutDevi˚ID
;

2198 
	}
}

2206 
	$Pa_GëMöNumBuf„rs
–
‰amesPîBuf„r
, 
‰amesPîSec⁄d
 )

2208 
möBuf„rs
;

2209 
díomö©‹
;

2210 
möL©ícyM£c
 = 
PA_MIN_LATENCY_MSEC
;

2211 
díomö©‹
 = 1000.0 * 
‰amesPîBuf„r
;

2212 
möBuf„rs
 = (Ë(((
möL©ícyM£c
 * 
‰amesPîSec⁄d
Ë+ 
díomö©‹
 - 1) / denominator );

2213 if–
möBuf„rs
 < 1 ) minBuffers = 1;

2214  
möBuf„rs
;

2215 
	}
}

2218 
	$Pa_SÀï
–
m£c
 )

2220 
	`u¶ìp
–
m£c
 * 1000 );

2221 
	}
}

2224 
PaTime°amp
 
	$Pa_SåómTime
–
P‹tAudioSåóm
 *
°ªam
 )

2226 
AudioTimeSèmp
 
timeSèmp
;

2227 
PaTime°amp
 
°ªamTime
;

2228 
PaHo°SoundC⁄åﬁ
 *
∑hsc
;

2229 
öã∫ÆP‹tAudioSåóm
 *
∑°
 = (öã∫ÆP‹tAudioSåóm *Ë
°ªam
;

2230 if–
∑°
 =
NULL
 )  
∑BadSåómPå
;

2231 
∑hsc
 = (
PaHo°SoundC⁄åﬁ
 *Ë
∑°
->
∑°_Devi˚D©a
;

2239  
∑°
->
∑°_FømeCou¡
;

2241  
°ªamTime
;

2242 
	}
}

2245 
	$Pa_GëHo°Eº‹
()

2247  
sSavedHo°Eº‹
;

2248 
	}
}

2251 
	$Pa_Cou¡Devi˚s
()

2253 if–
sNumPaDevi˚s
 <0 ) 
	`Pa_Inôülize
();

2254  
sNumPaDevi˚s
;

2255 
	}
}

2262 c⁄° 
PaDevi˚Info
* 
	$Pa_GëDevi˚Info
–
PaDevi˚ID
 
id
 )

2264 if–
id
 < 0 || id >
sNumPaDevi˚s
 )

2265  
NULL
;

2267  &
sDevi˚Infos
[
id
].
∑Info
;

2268 
	}
}

	@portaudio/pa_tests/debug_dual.c

38 
	~<°dio.h
>

39 
	~<m©h.h
>

40 
	~"p‹èudio.h
"

41 
	#DEV_ID_1
 (13)

	)

42 
	#DEV_ID_2
 (15)

	)

43 
	#NUM_SECONDS
 (8)

	)

44 
	#SLEEP_DUR
 (800)

	)

45 
	#SAMPLE_RATE
 (44100)

	)

46 
	#FRAMES_PER_BUFFER
 (256)

	)

48 
	#MIN_LATENCY_MSEC
 (200)

	)

49 
	#NUM_BUFFERS
 ((
MIN_LATENCY_MSEC
 * 
SAMPLE_RATE
Ë/ (
FRAMES_PER_BUFFER
 * 1000))

	)

51 
	#NUM_BUFFERS
 (0)

	)

53 
	#MIN_FREQ
 (100.0f)

	)

54 
	#MAX_FREQ
 (4000.0f)

	)

55 
	#FREQ_SCALAR
 (1.00002f)

	)

56 
	#CÆcPha£In¸emít
(
‰eq
Ë(‰eq/
SAMPLE_RATE
)

	)

57 #i‚de‡
M_PI


58 
	#M_PI
 (3.14159265)

	)

60 
	#TABLE_SIZE
 (400)

	)

63 
	msöe
[
TABLE_SIZE
 + 1];

64 
	mpha£_ö¸emít
;

65 
	mÀ·_pha£
;

66 
	mright_pha£
;

68 
	t∑Te°D©a
;

72 
LookupSöe
–
∑Te°D©a
 *
d©a
, 
pha£
 );

73 
	$LookupSöe
–
∑Te°D©a
 *
d©a
, 
pha£
 )

75 
fIndex
 = 
pha£
*
TABLE_SIZE
;

76 
ödex
 = (Ë
fIndex
;

77 
‰a˘
 = 
fIndex
 - 
ödex
;

78 
lo
 = 
d©a
->
söe
[
ödex
];

79 
hi
 = 
d©a
->
söe
[
ödex
+1];

80 
vÆ
 = 
lo
 + 
‰a˘
*(
hi
-lo);

81  
vÆ
;

82 
	}
}

87 
	$∑ã°CÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

88 
‰amesPîBuf„r
,

89 
PaTime°amp
 
outTime
, *
u£rD©a
 )

91 
∑Te°D©a
 *
d©a
 = (∑Te°D©a*)
u£rD©a
;

92 *
out
 = (*)
ouçutBuf„r
;

93 
i
;

94 
föished
 = 0;

95 (Ë
outTime
;

96 (Ë
öputBuf„r
;

99  
i
=0; i<
‰amesPîBuf„r
; i++ )

101 *
out
++ = 
	`LookupSöe
(
d©a
, d©a->
À·_pha£
);

102 *
out
++ = 
	`LookupSöe
(
d©a
, d©a->
right_pha£
);

103 
d©a
->
À·_pha£
 +d©a->
pha£_ö¸emít
;

104 if–
d©a
->
À·_pha£
 >= 1.0f ) data->left_phase -= 1.0f;

105 
d©a
->
right_pha£
 +(d©a->
pha£_ö¸emít
 * 1.5f);

106 if–
d©a
->
right_pha£
 >= 1.0f ) data->right_phase -= 1.0f;

108 
d©a
->
pha£_ö¸emít
 *
FREQ_SCALAR
;

109 if–
d©a
->
pha£_ö¸emít
 > 
	`CÆcPha£In¸emít
(
MAX_FREQ
ËËd©a->pha£_ö¸emíàCÆcPha£In¸emít(
MIN_FREQ
);

112 
	}
}

114 
PaEº‹
 
Te°Sèπ
–
P‹tAudioSåóm
 **
°ªamPå
, 
PaDevi˚ID
 
devID
,

115 
∑Te°D©a
 *
d©a
 );

117 
maö
();

118 
	$maö
()

120 
P‹tAudioSåóm
 *
°ªam1
, *
°ªam2
;

121 
PaEº‹
 
îr
;

122 
∑Te°D©a
 
DATA1
, 
DATA2
;

123 
	`¥ötf
("P‹tAudiÿTe°: DUAL söêswìp.ásk f‹ %d buf„rs\n", 
NUM_BUFFERS
 );

124 
îr
 = 
	`Pa_Inôülize
();

125 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

126 
îr
 = 
	`Te°Sèπ
–&
°ªam1
, 
DEV_ID_1
, &
DATA1
 );

127 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

128 
îr
 = 
	`Te°Sèπ
–&
°ªam2
, 
DEV_ID_2
, &
DATA2
 );

129 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

130 
	`¥ötf
("Hit ENTER\n");

131 
	`gëch¨
();

132 
îr
 = 
	`Pa_St›Såóm
–
°ªam1
 );

133 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

134 
îr
 = 
	`Pa_St›Såóm
–
°ªam2
 );

135 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

136 
	`Pa_Tîmö©e
();

137 
	`¥ötf
("Test finished.\n");

138  
îr
;

139 
îr‹
:

140 
	`Pa_Tîmö©e
();

141 
	`Ârötf
–
°dîr
, "AnÉrror occured while usingÅheÖortaudio stream\n" );

142 
	`Ârötf
–
°dîr
, "Eº‹Çumbî: %d\n", 
îr
 );

143 
	`Ârötf
–
°dîr
, "Eº‹ mesßge: %s\n", 
	`Pa_GëEº‹Text
–
îr
 ) );

144  
îr
;

145 
	}
}

146 
PaEº‹
 
	$Te°Sèπ
–
P‹tAudioSåóm
 **
°ªamPå
, 
PaDevi˚ID
 
devID
, 
∑Te°D©a
 *
d©a
 )

148 
P‹tAudioSåóm
 *
°ªam
;

149 
PaEº‹
 
îr
;

150 
i
;

152  
i
=0; i<
TABLE_SIZE
; i++ )

154 
d©a
->
söe
[
i
] = (Ë
	`sö
–(()i/()
TABLE_SIZE
Ë* 
M_PI
 * 2. );

156 
d©a
->
söe
[
TABLE_SIZE
] = data->sine[0];

157 
d©a
->
À·_pha£
 = d©a->
right_pha£
 = 0.0;

158 
d©a
->
pha£_ö¸emít
 = 
	`CÆcPha£In¸emít
(
MIN_FREQ
);

159 
	`¥ötf
("P‹tAudiÿTe°: ouçuàdevi˚ = %d\n", 
devID
 );

160 
îr
 = 
	`Pa_O≥nSåóm
(

161 &
°ªam
,

162 
∑NoDevi˚
,

164 
∑Flﬂt32
,

165 
NULL
,

166 
devID
,

168 
∑Flﬂt32
,

169 
NULL
,

170 
SAMPLE_RATE
,

171 
FRAMES_PER_BUFFER
,

172 
NUM_BUFFERS
,

173 
∑ClùOff
|
∑DôhîOff
,

174 
∑ã°CÆlback
,

175 
d©a
 );

176 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

177 
îr
 = 
	`Pa_SèπSåóm
–
°ªam
 );

178 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

179 *
°ªamPå
 = 
°ªam
;

181 
îr‹
:

182  
îr
;

183 
	}
}

	@portaudio/pa_tests/debug_multi_in.c

38 
	~<°dio.h
>

39 
	~<m©h.h
>

40 
	~<°rög.h
>

41 
	~"p‹èudio.h
"

43 
	#OUTPUT_DEVICE
 (
	`Pa_GëDeÁu…OuçutDevi˚ID
())

	)

45 
	#SAMPLE_RATE
 (22050)

	)

46 
	#FRAMES_PER_BUFFER
 (256)

	)

47 
	#MIN_LATENCY_MSEC
 (400)

	)

48 
	#NUM_BUFFERS
 ((
MIN_LATENCY_MSEC
 * 
SAMPLE_RATE
Ë/ (
FRAMES_PER_BUFFER
 * 1000))

	)

49 #i‚de‡
M_PI


50 
	#M_PI
 (3.14159265)

	)

54 
	mliveCh™√l
;

55 
	mnumCh™√ls
;

57 
	t∑Te°D©a
;

62 
	$∑ã°CÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

63 
‰amesPîBuf„r
,

64 
PaTime°amp
 
outTime
, *
u£rD©a
 )

66 
∑Te°D©a
 *
d©a
 = (∑Te°D©a*)
u£rD©a
;

67 *
out
 = (*)
ouçutBuf„r
;

68 *
ö
 = (*)
öputBuf„r
;

69 
i
;

70 
föished
 = 0;

71 (Ë
outTime
;

72 (Ë
öputBuf„r
;

74 if–
ö
 =
NULL
 )  0;

75  
i
=0; i<()
‰amesPîBuf„r
; i++ )

78 *
out
++ = 
ö
[
d©a
->
liveCh™√l
];

79 *
out
++ = 
ö
[
d©a
->
liveCh™√l
];

80 
ö
 +
d©a
->
numCh™√ls
;

83 
	}
}

85 
	$PaFödDevi˚ByName
–c⁄° *
«me
 )

87 
i
;

88 
numDevi˚s
;

89 c⁄° 
PaDevi˚Info
 *
pdi
;

90 
Àn
 = 
	`°æí
–
«me
 );

91 
PaDevi˚ID
 
ªsu…
 = 
∑NoDevi˚
;

92 
numDevi˚s
 = 
	`Pa_Cou¡Devi˚s
();

93  
i
=0; i<
numDevi˚s
; i++ )

95 
pdi
 = 
	`Pa_GëDevi˚Info
–
i
 );

96 if–
	`°∫cmp
–
«me
, 
pdi
->«me, 
Àn
 ) == 0 )

98 
ªsu…
 = 
i
;

102  
ªsu…
;

103 
	}
}

105 
maö
();

106 
	$maö
()

108 
P‹tAudioSåóm
 *
°ªam
;

109 
PaEº‹
 
îr
;

110 
∑Te°D©a
 
d©a
;

111 
i
;

112 
PaDevi˚ID
 
öputDevi˚
;

113 c⁄° 
PaDevi˚Info
 *
pdi
;

114 
	`¥ötf
("P‹tAudiÿTe°: i≈uàsig«»‰omÉach ch™√l. %d buf„rs\n", 
NUM_BUFFERS
 );

115 
d©a
.
liveCh™√l
 = 0;

116 
îr
 = 
	`Pa_Inôülize
();

117 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

118 #ifde‡
INPUT_DEVICE_NAME


119 
	`¥ötf
("TryÅÿu£ devi˚: %s\n", 
INPUT_DEVICE_NAME
 );

120 
öputDevi˚
 = 
	`PaFödDevi˚ByName
(
INPUT_DEVICE_NAME
);

121 if–
öputDevi˚
 =
∑NoDevi˚
 )

123 
	`¥ötf
("CouldÇŸ föd %s. Usög deÁu… in°ód.\n", 
INPUT_DEVICE_NAME
 );

124 
öputDevi˚
 = 
	`Pa_GëDeÁu…I≈utDevi˚ID
();

127 
	`¥ötf
("Using default input device.\n");

128 
öputDevi˚
 = 
	`Pa_GëDeÁu…I≈utDevi˚ID
();

130 
pdi
 = 
	`Pa_GëDevi˚Info
–
öputDevi˚
 );

131 if–
pdi
 =
NULL
 )

133 
	`¥ötf
("CouldÇot get device info!\n");

134 
îr‹
;

136 
d©a
.
numCh™√ls
 = 
pdi
->
maxI≈utCh™√ls
;

137 
	`¥ötf
("I≈uàDevi˚Çamêi†%s\n", 
pdi
->
«me
 );

138 
	`¥ötf
("I≈uàDevi˚ ha†%d ch™√ls.\n", 
pdi
->
maxI≈utCh™√ls
);

139 
îr
 = 
	`Pa_O≥nSåóm
(

140 &
°ªam
,

141 
öputDevi˚
,

142 
pdi
->
maxI≈utCh™√ls
,

143 
∑Flﬂt32
,

144 
NULL
,

145 
OUTPUT_DEVICE
,

147 
∑Flﬂt32
,

148 
NULL
,

149 
SAMPLE_RATE
,

150 
FRAMES_PER_BUFFER
,

151 
NUM_BUFFERS
,

152 
∑ClùOff
,

153 
∑ã°CÆlback
,

154 &
d©a
 );

155 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

156 
d©a
.
liveCh™√l
 = 0;

157 
îr
 = 
	`Pa_SèπSåóm
–
°ªam
 );

158 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

159  
i
=0; i<
d©a
.
numCh™√ls
; i++ )

161 
d©a
.
liveCh™√l
 = 
i
;

162 
	`¥ötf
("Ch™√»%d beög síàtÿouçut. Hô ENTER f‹Çexàch™√l.", 
i
 );

163 
	`fÊush
(
°dout
);

164 
	`gëch¨
();

166 
îr
 = 
	`Pa_St›Såóm
–
°ªam
 );

167 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

169 
îr
 = 
	`Pa_Clo£Såóm
–
°ªam
 );

170 
	`Pa_Tîmö©e
();

171 
	`¥ötf
("Test finished.\n");

172  
îr
;

173 
îr‹
:

174 
	`Pa_Tîmö©e
();

175 
	`Ârötf
–
°dîr
, "AnÉrror occured while usingÅheÖortaudio stream\n" );

176 
	`Ârötf
–
°dîr
, "Eº‹Çumbî: %d\n", 
îr
 );

177 
	`Ârötf
–
°dîr
, "Eº‹ mesßge: %s\n", 
	`Pa_GëEº‹Text
–
îr
 ) );

178  
îr
;

179 
	}
}

	@portaudio/pa_tests/debug_multi_out.c

37 
	~<°dio.h
>

38 
	~<m©h.h
>

39 
	~"p‹èudio.h
"

41 
	#OUTPUT_DEVICE
 (
	`Pa_GëDeÁu…OuçutDevi˚ID
())

	)

42 
	#SAMPLE_RATE
 (44100)

	)

43 
	#FRAMES_PER_BUFFER
 (256)

	)

44 
	#FREQ_INCR
 (300.0 / 
SAMPLE_RATE
)

	)

45 
	#MAX_CHANNELS
 (64)

	)

47 #i‚de‡
M_PI


48 
	#M_PI
 (3.14159265)

	)

53 
	mnumCh™√ls
;

54 
	mpha£s
[
MAX_CHANNELS
];

56 
	t∑Te°D©a
;

62 
	$∑ã°CÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

63 
‰amesPîBuf„r
,

64 
PaTime°amp
 
outTime
, *
u£rD©a
 )

66 
∑Te°D©a
 *
d©a
 = (∑Te°D©a*)
u£rD©a
;

67 *
out
 = (*)
ouçutBuf„r
;

68 
‰ameIndex
, 
ch™√lIndex
;

69 
föished
 = 0;

70 (Ë
outTime
;

71 (Ë
öputBuf„r
;

73  
‰ameIndex
=0; fømeIndex<()
‰amesPîBuf„r
; frameIndex++ )

75  
ch™√lIndex
=0; ch™√lIndex<
d©a
->
numCh™√ls
; channelIndex++ )

78 *
out
++ = (Ë
	`sö
(
d©a
->
pha£s
[
ch™√lIndex
]);

81 
d©a
->
pha£s
[
ch™√lIndex
] +
FREQ_INCR
 * (4 + channelIndex);

82 if–
d©a
->
pha£s
[
ch™√lIndex
] >(2.0 * 
M_PI
) ) data->phases[channelIndex] -= (2.0 * M_PI);

87 
	}
}

89 
maö
();

90 
	$maö
()

92 
P‹tAudioSåóm
 *
°ªam
;

93 
PaEº‹
 
îr
;

94 c⁄° 
PaDevi˚Info
 *
pdi
;

95 
∑Te°D©a
 
d©a
 = {0};

96 
	`¥ötf
("PortAudio Test: output sine wave onÉach channel.\n" );

98 
îr
 = 
	`Pa_Inôülize
();

99 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

101 
pdi
 = 
	`Pa_GëDevi˚Info
–
OUTPUT_DEVICE
 );

102 
d©a
.
numCh™√ls
 = 
pdi
->
maxOuçutCh™√ls
;

103 if–
d©a
.
numCh™√ls
 > 
MAX_CHANNELS
 ) data.numChannels = MAX_CHANNELS;

104 
	`¥ötf
("Numbî o‡Ch™√l†%d\n", 
d©a
.
numCh™√ls
 );

106 
îr
 = 
	`Pa_O≥nSåóm
(

107 &
°ªam
,

108 
∑NoDevi˚
,

110 
∑Flﬂt32
,

111 
NULL
,

112 
OUTPUT_DEVICE
,

113 
d©a
.
numCh™√ls
,

114 
∑Flﬂt32
,

115 
NULL
,

116 
SAMPLE_RATE
,

117 
FRAMES_PER_BUFFER
,

119 
∑ClùOff
,

120 
∑ã°CÆlback
,

121 &
d©a
 );

122 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

124 
îr
 = 
	`Pa_SèπSåóm
–
°ªam
 );

125 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

127 
	`¥ötf
("Hit ENTERÅo stop sound.\n");

128 
	`fÊush
(
°dout
);

129 
	`gëch¨
();

131 
îr
 = 
	`Pa_St›Såóm
–
°ªam
 );

132 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

134 
	`Pa_Clo£Såóm
–
°ªam
 );

135 
	`Pa_Tîmö©e
();

136 
	`¥ötf
("Test finished.\n");

137  
îr
;

138 
îr‹
:

139 
	`Pa_Tîmö©e
();

140 
	`Ârötf
–
°dîr
, "AnÉrror occured while usingÅheÖortaudio stream\n" );

141 
	`Ârötf
–
°dîr
, "Eº‹Çumbî: %d\n", 
îr
 );

142 
	`Ârötf
–
°dîr
, "Eº‹ mesßge: %s\n", 
	`Pa_GëEº‹Text
–
îr
 ) );

143  
îr
;

144 
	}
}

	@portaudio/pa_tests/debug_record.c

38 
	~<°dio.h
>

39 
	~<°dlib.h
>

40 
	~"p‹èudio.h
"

42 
	#SAMPLE_RATE
 (22050)

	)

43 
	#NUM_SECONDS
 (6)

	)

44 
	#NUM_CHANNELS
 (2)

	)

45 
	#FRAMES_PER_BUFFER
 (64)

	)

47 
	#DITHER_FLAG
 (0)

	)

51 
	#PA_SAMPLE_TYPE
 
∑Flﬂt32


	)

52 
	tSAMPLE
;

53 
	#SAMPLE_SILENCE
 (0.0f)

	)

56 
	#PA_SAMPLE_TYPE
 
∑I¡32


	)

57 
	tSAMPLE
;

58 
	#SAMPLE_SILENCE
 (0)

	)

61 
	#PA_SAMPLE_TYPE
 
∑I¡16


	)

62 
	tSAMPLE
;

63 
	#SAMPLE_SILENCE
 (0)

	)

66 
	#PA_SAMPLE_TYPE
 
∑I¡8


	)

67 
	tSAMPLE
;

68 
	#SAMPLE_SILENCE
 (0)

	)

71 
	#PA_SAMPLE_TYPE
 
∑UI¡8


	)

72 
	tSAMPLE
;

73 
	#SAMPLE_SILENCE
 (128)

	)

79 
	m‰ameIndex
;

80 
	mmaxFømeIndex
;

81 
SAMPLE
 *
	mªc‹dedSam∂es
;

83 
	t∑Te°D©a
;

88 
	$ªc‹dCÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

89 
‰amesPîBuf„r
,

90 
PaTime°amp
 
outTime
, *
u£rD©a
 )

92 
∑Te°D©a
 *
d©a
 = (∑Te°D©a*)
u£rD©a
;

93 
SAMPLE
 *
Ωå
 = (SAMPLE*)
öputBuf„r
;

94 
SAMPLE
 *
w±r
 = &
d©a
->
ªc‹dedSam∂es
[d©a->
‰ameIndex
 * 
NUM_CHANNELS
];

95 
‰amesToCÆc
;

96 
i
;

97 
föished
;

98 
‰amesLe·
 = 
d©a
->
maxFømeIndex
 - d©a->
‰ameIndex
;

100 (Ë
ouçutBuf„r
;

101 (Ë
outTime
;

103 if–
‰amesLe·
 < 
‰amesPîBuf„r
 )

105 
‰amesToCÆc
 = 
‰amesLe·
;

106 
föished
 = 1;

110 
‰amesToCÆc
 = 
‰amesPîBuf„r
;

111 
föished
 = 0;

113 if–
öputBuf„r
 =
NULL
 )

115  
i
=0; i<
‰amesToCÆc
; i++ )

117 *
w±r
++ = 
SAMPLE_SILENCE
;

118 if–
NUM_CHANNELS
 =2 ) *
w±r
++ = 
SAMPLE_SILENCE
;

123  
i
=0; i<
‰amesToCÆc
; i++ )

125 *
w±r
++ = *
Ωå
++;

126 if–
NUM_CHANNELS
 =2 ) *
w±r
++ = *
Ωå
++;

129 
d©a
->
‰ameIndex
 +
‰amesToCÆc
;

130  
föished
;

131 
	}
}

137 
	$∂ayCÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

138 
‰amesPîBuf„r
,

139 
PaTime°amp
 
outTime
, *
u£rD©a
 )

141 
∑Te°D©a
 *
d©a
 = (∑Te°D©a*)
u£rD©a
;

142 
SAMPLE
 *
Ωå
 = &
d©a
->
ªc‹dedSam∂es
[d©a->
‰ameIndex
 * 
NUM_CHANNELS
];

143 
SAMPLE
 *
w±r
 = (SAMPLE*)
ouçutBuf„r
;

144 
i
;

145 
föished
;

146 
‰amesLe·
 = 
d©a
->
maxFømeIndex
 - d©a->
‰ameIndex
;

147 (Ë
öputBuf„r
;

148 (Ë
outTime
;

150 if–
‰amesLe·
 < 
‰amesPîBuf„r
 )

153  
i
=0; i<
‰amesLe·
; i++ )

155 *
w±r
++ = *
Ωå
++;

156 if–
NUM_CHANNELS
 =2 ) *
w±r
++ = *
Ωå
++;

158  ; 
i
<
‰amesPîBuf„r
; i++ )

160 *
w±r
++ = 0;

161 if–
NUM_CHANNELS
 =2 ) *
w±r
++ = 0;

163 
d©a
->
‰ameIndex
 +
‰amesLe·
;

164 
föished
 = 1;

168  
i
=0; i<
‰amesPîBuf„r
; i++ )

170 *
w±r
++ = *
Ωå
++;

171 if–
NUM_CHANNELS
 =2 ) *
w±r
++ = *
Ωå
++;

173 
d©a
->
‰ameIndex
 +
‰amesPîBuf„r
;

174 
föished
 = 0;

176  
föished
;

177 
	}
}

180 
maö
();

181 
	$maö
()

183 
P‹tAudioSåóm
 *
°ªam
;

184 
PaEº‹
 
îr
;

185 
∑Te°D©a
 
d©a
;

186 
i
;

187 
tŸÆFømes
;

188 
numSam∂es
;

189 
numByãs
;

190 
SAMPLE
 
max
, 
avîage
, 
vÆ
;

192 
	`¥ötf
("debug_record.c, sampleRate = %d,ÇumChannels = %d\n",

193 
SAMPLE_RATE
, 
NUM_CHANNELS
 );

194 
	`fÊush
(
°dout
);

196 
d©a
.
maxFømeIndex
 = 
tŸÆFømes
 = 
NUM_SECONDS
 * 
SAMPLE_RATE
;

197 
d©a
.
‰ameIndex
 = 0;

198 
numSam∂es
 = 
tŸÆFømes
 * 
NUM_CHANNELS
;

200 
numByãs
 = 
numSam∂es
 * (
SAMPLE
);

201 
d©a
.
ªc‹dedSam∂es
 = (
SAMPLE
 *Ë
	`mÆloc
–
numByãs
 );

202 if–
d©a
.
ªc‹dedSam∂es
 =
NULL
 )

204 
	`¥ötf
("CouldÇotállocateÑecordárray.\n");

205 
	`exô
(1);

207  
i
=0; i<
numSam∂es
; i++ ) 
d©a
.
ªc‹dedSam∂es
[i] = 0;

209 
îr
 = 
	`Pa_Inôülize
();

210 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

213 
îr
 = 
	`Pa_O≥nSåóm
(

214 &
°ªam
,

215 
	`Pa_GëDeÁu…I≈utDevi˚ID
(),

216 
NUM_CHANNELS
,

217 
PA_SAMPLE_TYPE
,

218 
NULL
,

219 
∑NoDevi˚
,

221 
PA_SAMPLE_TYPE
,

222 
NULL
,

223 
SAMPLE_RATE
,

224 
FRAMES_PER_BUFFER
,

227 
ªc‹dCÆlback
,

228 &
d©a
 );

229 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

231 
îr
 = 
	`Pa_SèπSåóm
–
°ªam
 );

232 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

233 
	`¥ötf
("SèπÑec‹dög!!\n"); 
	`fÊush
(
°dout
);

235  
	`Pa_SåómA˘ive
–
°ªam
 ) )

237 
	`Pa_SÀï
(1000);

238 
	`¥ötf
("ödex = %d\n", 
d©a
.
‰ameIndex
 ); 
	`fÊush
(
°dout
);

240 
	`¥ötf
("St›Ñec‹dög!!\n"); 
	`fÊush
(
°dout
);

241 
îr
 = 
	`Pa_Clo£Såóm
–
°ªam
 );

242 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

245 
max
 = 0;

246 
avîage
 = 0;

247  
i
=0; i<
numSam∂es
; i++ )

249 
vÆ
 = 
d©a
.
ªc‹dedSam∂es
[
i
];

250 if–
vÆ
 < 0 ) val = -val;

251 if–
vÆ
 > 
max
 )

253 
max
 = 
vÆ
;

255 
avîage
 +
vÆ
;

258 
avîage
 =ávîagê/ 
numSam∂es
;

260 if–
PA_SAMPLE_TYPE
 =
∑Flﬂt32
 )

262 
	`¥ötf
("ßm∂êmaxám∂ôudê%f\n", (Ë
max
 );

263 
	`¥ötf
("ßm∂êavîagê%f\n", (Ë
avîage
 );

267 
	`¥ötf
("ßm∂êmaxám∂ôudê%d\n", (Ë
max
 );

268 
	`¥ötf
("ßm∂êavîagê%d\n", (Ë
avîage
 );

274 
FILE
 *
fid
;

275 
fid
 = 
	`f›í
("recorded.raw", "wb");

276 if–
fid
 =
NULL
 )

278 
	`¥ötf
("CouldÇot open file.");

282 
	`fwrôe
–
d©a
.
ªc‹dedSam∂es
, 
NUM_CHANNELS
 * (
SAMPLE
), 
tŸÆFømes
, 
fid
 );

283 
	`f˛o£
–
fid
 );

284 
	`¥ötf
("Wrote dataÅo 'recorded.raw'\n");

290 
d©a
.
‰ameIndex
 = 0;

291 
	`¥ötf
("BegöÖœyback.\n"); 
	`fÊush
(
°dout
);

292 
îr
 = 
	`Pa_O≥nSåóm
(

293 &
°ªam
,

294 
∑NoDevi˚
,

296 
PA_SAMPLE_TYPE
,

297 
NULL
,

298 
	`Pa_GëDeÁu…OuçutDevi˚ID
(),

299 
NUM_CHANNELS
,

300 
PA_SAMPLE_TYPE
,

301 
NULL
,

302 
SAMPLE_RATE
,

303 
FRAMES_PER_BUFFER
,

305 
∑ClùOff
,

306 
∂ayCÆlback
,

307 &
d©a
 );

308 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

310 if–
°ªam
 )

312 
îr
 = 
	`Pa_SèπSåóm
–
°ªam
 );

313 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

314 
	`¥ötf
("SèπÖœyback!!\n"); 
	`fÊush
(
°dout
);

316  
	`Pa_SåómA˘ive
–
°ªam
 ) )

318 
	`Pa_SÀï
(1000);

319 
	`¥ötf
("ödex = %d\n", 
d©a
.
‰ameIndex
 ); 
	`fÊush
(
°dout
);

322 
	`¥ötf
("St›Öœyback!!\n"); 
	`fÊush
(
°dout
);

323 
îr
 = 
	`Pa_Clo£Såóm
–
°ªam
 );

324 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

325 
	`¥ötf
("D⁄e.\n"); 
	`fÊush
(
°dout
);

327 
	`‰ì
–
d©a
.
ªc‹dedSam∂es
 );

329 
	`Pa_Tîmö©e
();

332 
îr‹
:

333 
	`Pa_Tîmö©e
();

334 
	`Ârötf
–
°dîr
, "AnÉrror occured while usingÅheÖortaudio stream\n" );

335 
	`Ârötf
–
°dîr
, "Eº‹Çumbî: %d\n", 
îr
 );

336 
	`Ârötf
–
°dîr
, "Eº‹ mesßge: %s\n", 
	`Pa_GëEº‹Text
–
îr
 ) );

338 
	}
}

	@portaudio/pa_tests/debug_sine.c

37 
	~<°dio.h
>

38 
	~<m©h.h
>

39 
	~"p‹èudio.h
"

40 
	#OUTPUT_DEVICE
 (
	`Pa_GëDeÁu…OuçutDevi˚ID
())

	)

42 
	#NUM_SECONDS
 (8)

	)

43 
	#SLEEP_DUR
 (800)

	)

44 
	#SAMPLE_RATE
 (44100)

	)

45 
	#FRAMES_PER_BUFFER
 (4096)

	)

47 
	#MSEC_PER_BUFFER
 (1000 * 
FRAMES_PER_BUFFER
 / 
SAMPLE_RATE
)

	)

50 
	#MIN_LATENCY_MSEC
 (200)

	)

51 
	#NUM_BUFFERS
 ((
MIN_LATENCY_MSEC
 * 
SAMPLE_RATE
Ë/ (
FRAMES_PER_BUFFER
 * 1000))

	)

53 
	#NUM_BUFFERS
 (0)

	)

56 
	#MIN_FREQ
 (100.0f)

	)

57 
	#MAX_FREQ
 (4000.0f)

	)

58 
	#FREQ_SCALAR
 (1.00002f)

	)

59 
	#CÆcPha£In¸emít
(
‰eq
Ë(‰eq/
SAMPLE_RATE
)

	)

60 #i‚de‡
M_PI


61 
	#M_PI
 (3.14159265)

	)

63 
	#TABLE_SIZE
 (400)

	)

66 
	msöe
[
TABLE_SIZE
 + 1];

67 
	mpha£_ö¸emít
;

68 
	mÀ·_pha£
;

69 
	mright_pha£
;

70 
	m‰amesToGo
;

72 
	t∑Te°D©a
;

76 
LookupSöe
–
∑Te°D©a
 *
d©a
, 
pha£
 );

77 
	$LookupSöe
–
∑Te°D©a
 *
d©a
, 
pha£
 )

79 
fIndex
 = 
pha£
*
TABLE_SIZE
;

80 
ödex
 = (Ë
fIndex
;

81 
‰a˘
 = 
fIndex
 - 
ödex
;

82 
lo
 = 
d©a
->
söe
[
ödex
];

83 
hi
 = 
d©a
->
söe
[
ödex
+1];

84 
vÆ
 = 
lo
 + 
‰a˘
*(
hi
-lo);

85  
vÆ
;

86 
	}
}

91 
	$∑ã°CÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

92 
‰amesPîBuf„r
,

93 
PaTime°amp
 
outTime
, *
u£rD©a
 )

95 
∑Te°D©a
 *
d©a
 = (∑Te°D©a*)
u£rD©a
;

96 *
out
 = (*)
ouçutBuf„r
;

97 
‰amesToCÆc
;

98 
i
;

99 
föished
 = 0;

100 (Ë
outTime
;

101 (Ë
öputBuf„r
;

103 if–
d©a
->
‰amesToGo
 < 
‰amesPîBuf„r
 )

105 
‰amesToCÆc
 = 
d©a
->
‰amesToGo
;

106 
d©a
->
‰amesToGo
 = 0;

107 
föished
 = 1;

111 
‰amesToCÆc
 = 
‰amesPîBuf„r
;

112 
d©a
->
‰amesToGo
 -
‰amesPîBuf„r
;

115  
i
=0; i<
‰amesToCÆc
; i++ )

117 *
out
++ = 
	`LookupSöe
(
d©a
, d©a->
À·_pha£
);

118 *
out
++ = 
	`LookupSöe
(
d©a
, d©a->
right_pha£
);

119 
d©a
->
À·_pha£
 +d©a->
pha£_ö¸emít
;

120 if–
d©a
->
À·_pha£
 >= 1.0f ) data->left_phase -= 1.0f;

121 
d©a
->
right_pha£
 +(d©a->
pha£_ö¸emít
 * 1.5f);

122 if–
d©a
->
right_pha£
 >= 1.0f ) data->right_phase -= 1.0f;

124 
d©a
->
pha£_ö¸emít
 *
FREQ_SCALAR
;

125 if–
d©a
->
pha£_ö¸emít
 > 
	`CÆcPha£In¸emít
(
MAX_FREQ
ËËd©a->pha£_ö¸emíàCÆcPha£In¸emít(
MIN_FREQ
);

128  ; 
i
<()
‰amesPîBuf„r
; i++ )

130 *
out
++ = 0;

131 *
out
++ = 0;

136  
föished
;

137 
	}
}

139 
maö
();

140 
	$maö
()

142 
P‹tAudioSåóm
 *
°ªam
;

143 
PaEº‹
 
îr
;

144 
∑Te°D©a
 
d©a
;

145 
i
;

146 
tŸÆSamps
;

147 
	`¥ötf
("P‹tAudiÿTe°: ouçuàsöêswìp.ásk f‹ %d buf„rs\n", 
NUM_BUFFERS
 );

148 
	`¥ötf
("MSEC_PER_BUFFER = %d\n", 
MSEC_PER_BUFFER
 );

151  
i
=0; i<
TABLE_SIZE
; i++ )

153 
d©a
.
söe
[
i
] = (Ë
	`sö
–(()i/()
TABLE_SIZE
Ë* 
M_PI
 * 2. );

155 
d©a
.
söe
[
TABLE_SIZE
] = data.sine[0];

156 
d©a
.
À·_pha£
 = d©a.
right_pha£
 = 0.0;

157 
d©a
.
pha£_ö¸emít
 = 
	`CÆcPha£In¸emít
(
MIN_FREQ
);

158 
d©a
.
‰amesToGo
 = 
tŸÆSamps
 = 
NUM_SECONDS
 * 
SAMPLE_RATE
;

159 
	`¥ötf
("tŸÆSamp†%d\n", 
tŸÆSamps
 );

160 
îr
 = 
	`Pa_Inôülize
();

161 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

162 
	`¥ötf
("P‹tAudiÿTe°: ouçuàdevi˚ = %d\n", 
OUTPUT_DEVICE
 );

163 
îr
 = 
	`Pa_O≥nSåóm
(

164 &
°ªam
,

165 
∑NoDevi˚
,

167 
∑Flﬂt32
,

168 
NULL
,

169 
OUTPUT_DEVICE
,

171 
∑Flﬂt32
,

172 
NULL
,

173 
SAMPLE_RATE
,

174 
FRAMES_PER_BUFFER
,

175 
NUM_BUFFERS
,

176 
∑ClùOff
|
∑DôhîOff
,

177 
∑ã°CÆlback
,

178 &
d©a
 );

179 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

180 
îr
 = 
	`Pa_SèπSåóm
–
°ªam
 );

181 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

182 
	`¥ötf
("Is callback being called?\n");

183  
i
=0; i<((
NUM_SECONDS
+1)*1000); i+=
SLEEP_DUR
 )

185 
	`¥ötf
("d©a.‰amesToGÿ%d\n", 
d©a
.
‰amesToGo
 ); 
	`fÊush
(
°dout
);

186 
	`Pa_SÀï
–
SLEEP_DUR
 );

189 
	`¥ötf
("Call Pa_StopStream()\n");

190 
îr
 = 
	`Pa_St›Såóm
–
°ªam
 );

191 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

192 
	`Pa_Tîmö©e
();

193 
	`¥ötf
("Test finished.\n");

194  
îr
;

195 
îr‹
:

196 
	`Pa_Tîmö©e
();

197 
	`Ârötf
–
°dîr
, "AnÉrror occured while usingÅheÖortaudio stream\n" );

198 
	`Ârötf
–
°dîr
, "Eº‹Çumbî: %d\n", 
îr
 );

199 
	`Ârötf
–
°dîr
, "Eº‹ mesßge: %s\n", 
	`Pa_GëEº‹Text
–
îr
 ) );

200  
îr
;

201 
	}
}

	@portaudio/pa_tests/debug_test1.c

10 
	~<°dio.h
>

11 
	~<m©h.h
>

12 
	~"p‹èudio.h
"

13 #i‚de‡
M_PI


14 
	#M_PI
 (3.14159265)

	)

18 
	msöe
[100];

19 
	mpha£
;

20 
	mßmpsToGo
;

22 
	t∑ã°1d©a
;

23 
	$∑ã°1CÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

24 
buf„rFømes
,

25 
PaTime°amp
 
outTime
, *
u£rD©a
 )

27 
∑ã°1d©a
 *
d©a
 = (∑ã°1d©a*)
u£rD©a
;

28 *
ö
 = (*)
öputBuf„r
;

29 *
out
 = (*)
ouçutBuf„r
;

30 
‰amesToCÆc
 = 
buf„rFømes
;

31 
i
;

32 
föished
 = 0;

33 if(
öputBuf„r
 =
NULL
)  0;

34 if–
d©a
->
ßmpsToGo
 < 
buf„rFømes
 )

36 
föished
 = 1;

38  
i
=0; i<
buf„rFømes
; i++ )

40 *
out
++ = *
ö
++;

41 *
out
++ = *
ö
++;

42 if–
d©a
->
pha£
 >= 100 )

43 
d©a
->
pha£
 = 0;

45 
d©a
->
ßmpsToGo
 -
buf„rFømes
;

47  ; 
i
<
buf„rFømes
; i++ )

49 *
out
++ = 0;

50 *
out
++ = 0;

52  
föished
;

53 
	}
}

54 
maö
(
¨gc
, * 
¨gv
[]);

55 
	$maö
(
¨gc
, * 
¨gv
[])

57 
PaSåóm
 *
°ªam
;

58 
PaEº‹
 
îr
;

59 
∑ã°1d©a
 
d©a
;

60 
i
;

61 
öputDevi˚
 = 
	`Pa_GëDeÁu…I≈utDevi˚ID
();

62 
ouçutDevi˚
 = 
	`Pa_GëDeÁu…OuçutDevi˚ID
();

64  
i
=0; i<100; i++ )

65 
d©a
.
söe
[
i
] = 
	`sö
–(()i/100.Ë* 
M_PI
 * 2. );

66 
d©a
.
pha£
 = 0;

67 
d©a
.
ßmpsToGo
 = 44100 * 4;

69 
	`Pa_Inôülize
();

70 
îr
 = 
	`Pa_O≥nSåóm
(

71 &
°ªam
,

72 
öputDevi˚
,

74 
∑Flﬂt32
,

75 
NULL
,

76 
ouçutDevi˚
,

78 
∑Flﬂt32
,

79 
NULL
,

85 
∑ClùOff
,

86 
∑ã°1CÆlback
,

87 &
d©a
 );

88 if–
îr
 =
∑NoEº‹
 )

90 
îr
 = 
	`Pa_SèπSåóm
–
°ªam
 );

95 
	`¥ötf
( "Waiting for streamÅo complete...\n" );

97  
	`Pa_SåómA˘ive
–
°ªam
 ) )

98 
	`Pa_SÀï
(1000);

100 
îr
 = 
	`Pa_Clo£Såóm
–
°ªam
 );

104 
	`Ârötf
–
°dîr
, "AnÉrror occured while openingÅheÖortaudio stream\n" );

105 if–
îr
 =
∑Ho°Eº‹
 )

106 
	`Ârötf
–
°dîr
, "Ho°Éº‹Çumbî: %d\n", 
	`Pa_GëHo°Eº‹
() );

108 
	`Ârötf
–
°dîr
, "Eº‹Çumbî: %d\n", 
îr
 );

110 
	`Pa_Tîmö©e
();

111 
	`¥ötf
( "bye\n" );

114 
	}
}

	@portaudio/pa_tests/pa_devs.c

36 
	~<°dio.h
>

37 
	~<m©h.h
>

38 
	~"p‹èudio.h
"

41 
maö
();

42 
	$maö
()

44 
i
,
j
;

45 
numDevi˚s
;

46 c⁄° 
PaDevi˚Info
 *
pdi
;

47 
PaEº‹
 
îr
;

48 
	`Pa_Inôülize
();

49 
numDevi˚s
 = 
	`Pa_Cou¡Devi˚s
();

50 if–
numDevi˚s
 < 0 )

52 
	`¥ötf
("ERROR: Pa_Cou¡Devi˚†ªtu∫ed 0x%x\n", 
numDevi˚s
 );

53 
îr
 = 
numDevi˚s
;

54 
îr‹
;

56 
	`¥ötf
("Numbî o‡devi˚†%d\n", 
numDevi˚s
 );

57  
i
=0; i<
numDevi˚s
; i++ )

59 
pdi
 = 
	`Pa_GëDevi˚Info
–
i
 );

60 
	`¥ötf
("---------------------------------------------- #%d", 
i
 );

61 if–
i
 =
	`Pa_GëDeÁu…I≈utDevi˚ID
(ËË
	`¥ötf
(" DefaultInput");

62 if–
i
 =
	`Pa_GëDeÁu…OuçutDevi˚ID
(ËË
	`¥ötf
(" DefaultOutput");

63 
	`¥ötf
("\nNamê = %s\n", 
pdi
->
«me
 );

64 
	`¥ötf
("Max I≈ut† = %d", 
pdi
->
maxI≈utCh™√ls
 );

65 
	`¥ötf
(", Max Ouçut†%d\n", 
pdi
->
maxOuçutCh™√ls
 );

66 if–
pdi
->
numSam∂eR©es
 == -1 )

68 
	`¥ötf
("Sam∂êR©êR™gê%‡tÿ%f\n", 
pdi
->
ßm∂eR©es
[0],Ödi->sampleRates[1] );

72 
	`¥ötf
("Sample Rates =");

73  
j
=0; j<
pdi
->
numSam∂eR©es
; j++ )

75 
	`¥ötf
(" %8.2f,", 
pdi
->
ßm∂eR©es
[
j
] );

77 
	`¥ötf
("\n");

79 
	`¥ötf
("Native Sample Formats = ");

80 if–
pdi
->
«tiveSam∂eF‹m©s
 & 
∑I¡8
 ) 
	`¥ötf
("paInt8, ");

81 if–
pdi
->
«tiveSam∂eF‹m©s
 & 
∑UI¡8
 ) 
	`¥ötf
("paUInt8, ");

82 if–
pdi
->
«tiveSam∂eF‹m©s
 & 
∑I¡16
 ) 
	`¥ötf
("paInt16, ");

83 if–
pdi
->
«tiveSam∂eF‹m©s
 & 
∑I¡32
 ) 
	`¥ötf
("paInt32, ");

84 if–
pdi
->
«tiveSam∂eF‹m©s
 & 
∑Flﬂt32
 ) 
	`¥ötf
("paFloat32, ");

85 if–
pdi
->
«tiveSam∂eF‹m©s
 & 
∑I¡24
 ) 
	`¥ötf
("paInt24, ");

86 if–
pdi
->
«tiveSam∂eF‹m©s
 & 
∑PackedI¡24
 ) 
	`¥ötf
("paPackedInt24, ");

87 
	`¥ötf
("\n");

89 
	`Pa_Tîmö©e
();

91 
	`¥ötf
("----------------------------------------------\n");

93 
îr‹
:

94 
	`Pa_Tîmö©e
();

95 
	`Ârötf
–
°dîr
, "AnÉrror occured while usingÅheÖortaudio stream\n" );

96 
	`Ârötf
–
°dîr
, "Eº‹Çumbî: %d\n", 
îr
 );

97 
	`Ârötf
–
°dîr
, "Eº‹ mesßge: %s\n", 
	`Pa_GëEº‹Text
–
îr
 ) );

98  
îr
;

99 
	}
}

	@portaudio/pa_tests/pa_fuzz.c

36 
	~<°dio.h
>

37 
	~<m©h.h
>

38 
	~"p‹èudio.h
"

44 
	#SAMPLE_RATE
 (44100)

	)

45 
	#PA_SAMPLE_TYPE
 
∑Flﬂt32


	)

46 
	#FRAMES_PER_BUFFER
 (64)

	)

48 
	tSAMPLE
;

50 
CubicAm∂ifõr
–
öput
 );

51 
fuzzCÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

52 
‰amesPîBuf„r
,

53 
PaTime°amp
 
outTime
, *
u£rD©a
 );

56 
	$CubicAm∂ifõr
–
öput
 )

58 
ouçut
, 
ãmp
;

59 if–
öput
 < 0.0 )

61 
ãmp
 = 
öput
 + 1.0f;

62 
ouçut
 = (
ãmp
 *Åemp *Åemp) - 1.0f;

66 
ãmp
 = 
öput
 - 1.0f;

67 
ouçut
 = (
ãmp
 *Åemp *Åemp) + 1.0f;

70  
ouçut
;

71 
	}
}

72 
	#FUZZ
(
x
Ë
	`CubicAm∂ifõr
(CubicAm∂ifõr(CubicAm∂ifõr(CubicAm∂ifõr(x))))

	)

74 
	ggNumNoI≈uts
 = 0;

79 
	$fuzzCÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

80 
‰amesPîBuf„r
,

81 
PaTime°amp
 
outTime
, *
u£rD©a
 )

83 
SAMPLE
 *
out
 = (SAMPLE*)
ouçutBuf„r
;

84 
SAMPLE
 *
ö
 = (SAMPLE*)
öputBuf„r
;

85 
i
;

86 (Ë
outTime
;

87 (Ë
u£rD©a
;

89 if–
öputBuf„r
 =
NULL
 )

91  
i
=0; i<
‰amesPîBuf„r
; i++ )

93 *
out
++ = 0;

94 *
out
++ = 0;

96 
gNumNoI≈uts
 += 1;

100  
i
=0; i<
‰amesPîBuf„r
; i++ )

102 *
out
++ = 
	`FUZZ
(*
ö
++);

103 *
out
++ = *
ö
++;

107 
	}
}

110 
maö
();

111 
	$maö
()

113 
P‹tAudioSåóm
 *
°ªam
;

114 
PaEº‹
 
îr
;

116 
îr
 = 
	`Pa_Inôülize
();

117 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

119 
îr
 = 
	`Pa_O≥nSåóm
(

120 &
°ªam
,

121 
	`Pa_GëDeÁu…I≈utDevi˚ID
(),

123 
PA_SAMPLE_TYPE
,

124 
NULL
,

125 
	`Pa_GëDeÁu…OuçutDevi˚ID
(),

127 
PA_SAMPLE_TYPE
,

128 
NULL
,

129 
SAMPLE_RATE
,

130 
FRAMES_PER_BUFFER
,

133 
fuzzCÆlback
,

134 
NULL
 );

135 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

137 
îr
 = 
	`Pa_SèπSåóm
–
°ªam
 );

138 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

140 
	`¥ötf
("Hit ENTERÅo stopÖrogram.\n");

141 
	`fÊush
(
°dout
);

142 
	`gëch¨
();

143 
îr
 = 
	`Pa_Clo£Såóm
–
°ªam
 );

144 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

146 
	`¥ötf
("Föished. gNumNoI≈ut†%d\n", 
gNumNoI≈uts
 );

147 
	`Pa_Tîmö©e
();

150 
îr‹
:

151 
	`Pa_Tîmö©e
();

152 
	`Ârötf
–
°dîr
, "AnÉrror occured while usingÅheÖortaudio stream\n" );

153 
	`Ârötf
–
°dîr
, "Eº‹Çumbî: %d\n", 
îr
 );

154 
	`Ârötf
–
°dîr
, "Eº‹ mesßge: %s\n", 
	`Pa_GëEº‹Text
–
îr
 ) );

156 
	}
}

	@portaudio/pa_tests/pa_minlat.c

37 
	~<°dio.h
>

38 
	~<°dlib.h
>

39 
	~<m©h.h
>

40 
	~"p‹èudio.h
"

42 #i‚de‡
M_PI


43 
	#M_PI
 (3.14159265)

	)

45 
	#TWOPI
 (
M_PI
 * 2.0)

	)

47 
	#DEFAULT_BUFFER_SIZE
 (64)

	)

51 
	mÀ·_pha£
;

52 
	mright_pha£
;

54 
	t∑Te°D©a
;

57 
	$∑möœtCÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

58 
‰amesPîBuf„r
,

59 
PaTime°amp
 
outTime
, *
u£rD©a
 )

61 
∑Te°D©a
 *
d©a
 = (∑Te°D©a*)
u£rD©a
;

62 *
out
 = (*)
ouçutBuf„r
;

63 
i
;

64 
À·_pha£Inc
 = 0.02;

65 
right_pha£Inc
 = 0.06;

67 
À·_pha£
 = 
d©a
->left_phase;

68 
right_pha£
 = 
d©a
->right_phase;

70  
i
=0; i<
‰amesPîBuf„r
; i++ )

72 
À·_pha£
 +
À·_pha£Inc
;

73 if–
À·_pha£
 > 
TWOPI
 )Üeft_phase -= TWOPI;

74 *
out
++ = (Ë
	`sö
–
À·_pha£
 );

76 
right_pha£
 +
right_pha£Inc
;

77 if–
right_pha£
 > 
TWOPI
 )Ñight_phase -= TWOPI;

78 *
out
++ = (Ë
	`sö
–
right_pha£
 );

81 
d©a
->
À·_pha£
 =Üeft_phase;

82 
d©a
->
right_pha£
 =Ñight_phase;

84 
	}
}

85 
maö
–
¨gc
, **
¨gv
 );

86 
	$maö
–
¨gc
, **
¨gv
 )

88 
P‹tAudioSåóm
 *
°ªam
;

89 
PaEº‹
 
îr
;

90 
∑Te°D©a
 
d©a
;

91 
go
;

92 
numBuf„rs
 = 0;

93 
möBuf„rs
 = 0;

94 
‰amesPîBuf„r
;

95 
ßm∂eR©e
 = 44100.0;

96 
°r
[256];

97 
	`¥ötf
("paminlat - Determine minimumÜatency for your computer.\n");

98 
	`¥ötf
(" usage:Öaminlat {framesPerBuffer}\n");

99 
	`¥ötf
(" forÉxample:Öaminlat 256\n");

100 
	`¥ötf
("Adjust your stereo until you heará smoothÅone inÉach speaker.\n");

101 
	`¥ötf
("ThenÅryÅo findÅhe smallestÇumber of buffersÅhat still sounds smooth.\n");

102 
	`¥ötf
("NoteÅhatÅhe sound will stop momentarily when you changeÅheÇumber of buffers.\n");

104 
‰amesPîBuf„r
 = ( 
¨gc
 > 1 ) ? 
	`©ﬁ
–
¨gv
[1] ) : 
DEFAULT_BUFFER_SIZE
;

105 
	`¥ötf
("Føme†≥∏buf„∏%d\n", 
‰amesPîBuf„r
 );

107 
d©a
.
À·_pha£
 = d©a.
right_pha£
 = 0.0;

108 
îr
 = 
	`Pa_Inôülize
();

109 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

111 
numBuf„rs
 = 
möBuf„rs
 = 
	`Pa_GëMöNumBuf„rs
–
‰amesPîBuf„r
, 
ßm∂eR©e
 );

112 
	`¥ötf
("NumBuf„r†£àtÿ%d ba£d o¿®ˇŒÅÿPa_GëMöNumBuf„rs()\n", 
numBuf„rs
 );

114 
go
 = 1;

115  
go
 )

118 
	`¥ötf
("Latency = framesPerBuffer *ÇumBuffers = %d * %d = %d frames = %d msecs.\n",

119 
‰amesPîBuf„r
, 
numBuf„rs
, framesPerBuffer*numBuffers,

120 ()((1000 * 
‰amesPîBuf„r
 * 
numBuf„rs
Ë/ 
ßm∂eR©e
) );

121 
îr
 = 
	`Pa_O≥nSåóm
(

122 &
°ªam
,

123 
∑NoDevi˚
,

125 
∑Flﬂt32
,

126 
NULL
,

127 
	`Pa_GëDeÁu…OuçutDevi˚ID
(),

129 
∑Flﬂt32
,

130 
NULL
,

131 
ßm∂eR©e
,

132 
‰amesPîBuf„r
,

133 
numBuf„rs
,

134 
∑ClùOff
,

135 
∑möœtCÆlback
,

136 &
d©a
 );

137 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

138 if–
°ªam
 =
NULL
 ) 
îr‹
;

140 
îr
 = 
	`Pa_SèπSåóm
–
°ªam
 );

141 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

143 
	`¥ötf
("\nMove windowsároundÅo see ifÅhe sound glitches.\n");

144 
	`¥ötf
("NumBuf„r†cuºíéy %d,É¡îÇewÇumbî, o∏'q'Åÿquô: ", 
numBuf„rs
 );

145 
	`gës
–
°r
 );

146 if–
°r
[0] ='q' ) 
go
 = 0;

149 
numBuf„rs
 = 
	`©ﬁ
–
°r
 );

150 if–
numBuf„rs
 < 
möBuf„rs
 )

152 
	`¥ötf
–"numBuf„r†bñow möimum o‡%d! SëÅÿmöimum!!!\n", 
möBuf„rs
 );

153 
numBuf„rs
 = 
möBuf„rs
;

157 
îr
 = 
	`Pa_St›Såóm
–
°ªam
 );

158 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

159 
îr
 = 
	`Pa_Clo£Såóm
–
°ªam
 );

160 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

162 
	`¥ötf
("A good setting forÜatency would be somewhat higherÅhan\n");

163 
	`¥ötf
("the minimumÜatencyÅhat worked.\n");

164 
	`¥ötf
("PortAudio: Test finished.\n");

165 
	`Pa_Tîmö©e
();

167 
îr‹
:

168 
	`Pa_Tîmö©e
();

169 
	`Ârötf
–
°dîr
, "AnÉrror occured while usingÅheÖortaudio stream\n" );

170 
	`Ârötf
–
°dîr
, "Eº‹Çumbî: %d\n", 
îr
 );

171 
	`Ârötf
–
°dîr
, "Eº‹ mesßge: %s\n", 
	`Pa_GëEº‹Text
–
îr
 ) );

172 
	}
}

	@portaudio/pa_tests/paqa_devs.c

38 
	~<°dio.h
>

39 
	~<m©h.h
>

40 
	~"p‹èudio.h
"

41 
	~"∑_åa˚.h
"

43 
	#MODE_INPUT
 (0)

	)

44 
	#MODE_OUTPUT
 (1)

	)

45 
	sPaQaD©a


47 
	m‰amesLe·
;

48 
	mnumCh™√ls
;

49 
	mbyãsPîSam∂e
;

50 
	mmode
;

51 
	mßwPha£
;

52 
PaSam∂eF‹m©
 
	mf‹m©
;

53 } 
	tPaQaD©a
;

56 
Te°Devi˚s
–
mode
 );

57 
Te°F‹m©s
–
mode
, 
PaDevi˚ID
 
devi˚ID
, 
ßm∂eR©e
,

58 
numCh™√ls
 );

59 
Te°Adv™˚
–
mode
, 
PaDevi˚ID
 
devi˚ID
, 
ßm∂eR©e
,

60 
numCh™√ls
, 
PaSam∂eF‹m©
 
f‹m©
 );

61 
QaCÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

62 
‰amesPîBuf„r
,

63 
PaTime°amp
 
outTime
, *
u£rD©a
 );

66 
	ggNumPas£d
 = 0;

67 
	ggNumFaûed
 = 0;

72 
	#EXPECT
(
_exp
) \

75 i‡((
_exp
)) {\

77 
gNumPas£d
++; \

80 
	`¥ötf
("ERROR - 0x%x - %†f‹ %s\n", 
ªsu…
, \

81 ((
ªsu…
 =0Ë? "-" : 
	`Pa_GëEº‹Text
(result)), \

83 
gNumFaûed
++; \

84 
îr‹
; \

86 } 0)

	)

92 
	$QaCÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

93 
‰amesPîBuf„r
,

94 
PaTime°amp
 
outTime
, *
u£rD©a
 )

96 
i
;

97 
pha£
;

98 
PaQaD©a
 *
d©a
 = (PaQaD©®*Ë
u£rD©a
;

99 (Ë
öputBuf„r
;

100 (Ë
outTime
;

103 if–
d©a
->
mode
 =
MODE_OUTPUT
 )

105 
pha£
 = 
d©a
->
ßwPha£
;

106  
d©a
->
f‹m©
 )

108 
∑Flﬂt32
:

110 *
out
 = (*Ë
ouçutBuf„r
;

111  
i
=0; i<
‰amesPîBuf„r
; i++ )

113 
pha£
 += 0x123;

114 *
out
++ = (Ë(
pha£
 * (1.0 / 32768.0));

115 if–
d©a
->
numCh™√ls
 == 2 )

117 *
out
++ = (Ë(
pha£
 * (1.0 / 32768.0));

123 
∑I¡32
:

125 *
out
 = (*Ë
ouçutBuf„r
;

126  
i
=0; i<
‰amesPîBuf„r
; i++ )

128 
pha£
 += 0x123;

129 *
out
++ = ((Ë
pha£
 ) << 16;

130 if–
d©a
->
numCh™√ls
 == 2 )

132 *
out
++ = ((Ë
pha£
 ) << 16;

137 
∑I¡16
:

139 *
out
 = (*Ë
ouçutBuf„r
;

140  
i
=0; i<
‰amesPîBuf„r
; i++ )

142 
pha£
 += 0x123;

143 *
out
++ = 
pha£
;

144 if–
d©a
->
numCh™√ls
 == 2 )

146 *
out
++ = 
pha£
;

154 *
out
 = (*Ë
ouçutBuf„r
;

155 
numByãs
 = 
‰amesPîBuf„r
 * 
d©a
->
numCh™√ls
 * d©a->
byãsPîSam∂e
;

156  
i
=0; i<
numByãs
; i++ )

158 *
out
++ = 0;

163 
d©a
->
ßwPha£
 = 
pha£
;

166 if–
d©a
->
‰amesLe·
 > 
‰amesPîBuf„r
 )

168 
	`AddTø˚Mesßge
("QaCÆlback:Ñu¬ög. fømesLe·", 
d©a
->
‰amesLe·
 );

169 
d©a
->
‰amesLe·
 -
‰amesPîBuf„r
;

174 
	`AddTø˚Mesßge
("QaCÆlback: DONE! fømesLe·", 
d©a
->
‰amesLe·
 );

175 
d©a
->
‰amesLe·
 = 0;

178 
	}
}

180 
maö
();

181 
	$maö
()

183 
PaEº‹
 
ªsu…
;

184 
	`EXPECT
–((
ªsu…
=
	`Pa_Inôülize
()) == 0) );

185 
	`¥ötf
("Test OUTPUT ---------------\n");

186 
	`Te°Devi˚s
–
MODE_OUTPUT
 );

187 
	`¥ötf
("Test INPUT ---------------\n");

188 
	`Te°Devi˚s
–
MODE_INPUT
 );

189 
îr‹
:

190 
	`Pa_Tîmö©e
();

191 
	`¥ötf
("QA Rï‹t: %dÖas£d, %d faûed.\n", 
gNumPas£d
, 
gNumFaûed
 );

192 
	}
}

195 
	$Te°Devi˚s
–
mode
 )

197 
id
,
jc
,
kr
;

198 
maxCh™√ls
;

199 c⁄° 
PaDevi˚Info
 *
pdi
;

200 
numDevi˚s
 = 
	`Pa_Cou¡Devi˚s
();

202  
id
=0; id<
numDevi˚s
; id++ )

204 
pdi
 = 
	`Pa_GëDevi˚Info
–
id
 );

206 
maxCh™√ls
 = ( 
mode
 =
MODE_INPUT
 ) ? 
pdi
->
maxI≈utCh™√ls
 :Ödi->
maxOuçutCh™√ls
;

207  
jc
=1; jc<=
maxCh™√ls
; jc++ )

209 
	`¥ötf
("Namê = %s\n", 
pdi
->
«me
 );

211 if–
pdi
->
numSam∂eR©es
 == -1 )

213 
low
, 
high
;

214 
low
 = 
pdi
->
ßm∂eR©es
[0];

215 
high
 = 
pdi
->
ßm∂eR©es
[1];

216 if–
low
 < 8000.0 )Üow = 8000.0;

217 
	`Te°F‹m©s
–
mode
, 
id
, 
low
, 
jc
 );

218 
	#TESTSR
(
§
Ë{if(((§)>=
low
Ë&& ((§)<=
high
)Ë
	`Te°F‹m©s
–
mode
, 
id
, (§), 
jc
 ); }

	)

220 
	`TESTSR
(11025.0);

221 
	`TESTSR
(22050.0);

222 
	`TESTSR
(34567.0);

223 
	`TESTSR
(44100.0);

224 
	`Te°F‹m©s
–
mode
, 
id
, 
high
, 
jc
 );

228  
kr
=0; kr<
pdi
->
numSam∂eR©es
; kr++ )

230 
	`Te°F‹m©s
–
mode
, 
id
, 
pdi
->
ßm∂eR©es
[
kr
], 
jc
 );

235 
	}
}

237 
	$Te°F‹m©s
–
mode
, 
PaDevi˚ID
 
devi˚ID
, 
ßm∂eR©e
,

238 
numCh™√ls
 )

240 
	`Te°Adv™˚
–
mode
, 
devi˚ID
, 
ßm∂eR©e
, 
numCh™√ls
, 
∑Flﬂt32
 );

241 
	`Te°Adv™˚
–
mode
, 
devi˚ID
, 
ßm∂eR©e
, 
numCh™√ls
, 
∑I¡16
 );

242 
	`Te°Adv™˚
–
mode
, 
devi˚ID
, 
ßm∂eR©e
, 
numCh™√ls
, 
∑I¡32
 );

243 
	}
}

245 
	$Te°Adv™˚
–
mode
, 
PaDevi˚ID
 
devi˚ID
, 
ßm∂eR©e
,

246 
numCh™√ls
, 
PaSam∂eF‹m©
 
f‹m©
 )

248 
P‹tAudioSåóm
 *
°ªam
 = 
NULL
;

249 
PaEº‹
 
ªsu…
;

250 
PaQaD©a
 
myD©a
;

251 
	#FRAMES_PER_BUFFER
 (64)

	)

252 
	`¥ötf
("------ TestAdvance: %s, device = %d,Ñate = %g,ÇumChannels = %d, format = %d -------\n",

253 –
mode
 =
MODE_INPUT
 ) ? "INPUT" : "OUTPUT",

254 
devi˚ID
, 
ßm∂eR©e
, 
numCh™√ls
, 
f‹m©
);

255 
	`fÊush
(
°dout
);

257 
myD©a
.
‰amesLe·
 = (Ë(
ßm∂eR©e
 * 100);

258 
myD©a
.
numCh™√ls
 =ÇumChannels;

259 
myD©a
.
mode
 = mode;

260 
myD©a
.
f‹m©
 = format;

261  
f‹m©
 )

263 
∑Flﬂt32
:

264 
∑I¡32
:

265 
∑I¡24
:

266 
myD©a
.
byãsPîSam∂e
 = 4;

268 
∑PackedI¡24
:

269 
myD©a
.
byãsPîSam∂e
 = 3;

272 
myD©a
.
byãsPîSam∂e
 = 2;

275 
	`EXPECT
–((
ªsu…
 = 
	`Pa_O≥nSåóm
(

276 &
°ªam
,

277 –
mode
 =
MODE_INPUT
 ) ? 
devi˚ID
 : 
∑NoDevi˚
,

278 –
mode
 =
MODE_INPUT
 ) ? 
numCh™√ls
 : 0,

279 
f‹m©
,

280 
NULL
,

281 –
mode
 =
MODE_OUTPUT
 ) ? 
devi˚ID
 : 
∑NoDevi˚
,

282 –
mode
 =
MODE_OUTPUT
 ) ? 
numCh™√ls
 : 0,

283 
f‹m©
,

284 
NULL
,

285 
ßm∂eR©e
,

286 
FRAMES_PER_BUFFER
,

288 
∑ClùOff
,

289 
QaCÆlback
,

290 &
myD©a
 )

292 if–
°ªam
 )

294 
PaTime°amp
 
ﬁdSèmp
, 
√wSèmp
;

295 
ﬁdFømes
;

296 
möDñay
 = ( 
mode
 =
MODE_INPUT
 ) ? 1000 : 400;

297 
möNumBuf„rs
 = 
	`Pa_GëMöNumBuf„rs
–
FRAMES_PER_BUFFER
, 
ßm∂eR©e
 );

298 
m£c
 = (Ë((
möNumBuf„rs
 * 3 * 1000.0 * 
FRAMES_PER_BUFFER
Ë/ 
ßm∂eR©e
);

299 if–
m£c
 < 
möDñay
 ) msec = minDelay;

300 
	`¥ötf
("m£¯%d\n", 
m£c
);

301 
	`EXPECT
–((
ªsu…
=
	`Pa_SèπSåóm
–
°ªam
 )) == 0) );

303 
ªsu…
 = 
∑NoEº‹
;

304 
ﬁdSèmp
 = 
	`Pa_SåómTime
(
°ªam
);

305 
	`fÊush
(
°dout
);

306 
	`Pa_SÀï
(
m£c
);

307 
√wSèmp
 = 
	`Pa_SåómTime
(
°ªam
);

308 
	`¥ötf
("ﬁdSèm∞%g,√wSèm∞%g\n", 
ﬁdSèmp
, 
√wSèmp
 );

309 
	`EXPECT
–(
ﬁdSèmp
 < 
√wSèmp
) );

311 
ﬁdFømes
 = 
myD©a
.
‰amesLe·
;

312 
	`Pa_SÀï
(
m£c
);

313 
	`¥ötf
("ﬁdFøme†%d, myD©a.‰amesLe· = %d\n", 
ﬁdFømes
, 
myD©a
.
‰amesLe·
 );

314 
	`EXPECT
–(
ﬁdFømes
 > 
myD©a
.
‰amesLe·
) );

315 
	`EXPECT
–((
ªsu…
=
	`Pa_Clo£Såóm
–
°ªam
 )) == 0) );

316 
°ªam
 = 
NULL
;

318 
îr‹
:

319 if–
°ªam
 !
NULL
 ) 
	`Pa_Clo£Såóm
( stream );

320 
	`fÊush
(
°dout
);

321  
ªsu…
;

322 
	}
}

	@portaudio/pa_tests/paqa_errs.c

37 
	~<°dio.h
>

38 
	~<m©h.h
>

39 
	~"p‹èudio.h
"

41 
	#MODE_INPUT
 (0)

	)

42 
	#MODE_OUTPUT
 (1)

	)

43 
	#FRAMES_PER_BUFFER
 (64)

	)

44 
	#SAMPLE_RATE
 (44100.0)

	)

45 
	#NUM_BUFFERS
 (0)

	)

46 
	sPaQaD©a


48 
	m‰amesLe·
;

49 
	mnumCh™√ls
;

50 
	mbyãsPîSam∂e
;

51 
	mmode
;

53 
	tPaQaD©a
;

55 
Te°Devi˚s
–
mode
 );

56 
Te°F‹m©s
–
mode
, 
PaDevi˚ID
 
devi˚ID
, 
ßm∂eR©e
,

57 
numCh™√ls
 );

58 
Te°BadO≥ns
( );

59 
Te°BadA˘i⁄s
( );

60 
QaCÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

61 
‰amesPîBuf„r
,

62 
PaTime°amp
 
outTime
, *
u£rD©a
 );

64 
	ggNumPas£d
 = 0;

65 
	ggNumFaûed
 = 0;

69 
	#EXPECT
–
msg
, 
_exp
) \

72 i‡((
_exp
)) {\

73 
gNumPas£d
++; \

76 
	`¥ötf
("\nERROR %s\¿ - 0x%x - %†f‹ %s\n", (
msg
), 
ªsu…
, 
	`Pa_GëEº‹Text
(result), #_exp ); \

77 
gNumFaûed
++; \

78 
îr‹
; \

80 } 0)

	)

81 
	#HOPEFOR
–
msg
, 
_exp
) \

84 i‡((
_exp
)) {\

85 
gNumPas£d
++; \

88 
	`¥ötf
("\nERROR %s\¿ - 0x%x - %†f‹ %s\n", (
msg
), 
ªsu…
, 
	`Pa_GëEº‹Text
(result), #_exp ); \

89 
gNumFaûed
++; \

91 } 0)

	)

97 
	$QaCÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

98 
‰amesPîBuf„r
,

99 
PaTime°amp
 
outTime
, *
u£rD©a
 )

101 
i
;

102 *
out
 = (*Ë
ouçutBuf„r
;

103 
PaQaD©a
 *
d©a
 = (PaQaD©®*Ë
u£rD©a
;

104 (Ë
öputBuf„r
;

105 (Ë
outTime
;

108 if–
d©a
->
mode
 =
MODE_OUTPUT
 )

110 
numByãs
 = 
‰amesPîBuf„r
 * 
d©a
->
numCh™√ls
 * d©a->
byãsPîSam∂e
;

111  
i
=0; i<
numByãs
; i++ )

113 *
out
++ = 0;

117 if–
d©a
->
‰amesLe·
 > 
‰amesPîBuf„r
 )

119 
d©a
->
‰amesLe·
 -
‰amesPîBuf„r
;

124 
d©a
->
‰amesLe·
 = 0;

127 
	}
}

129 
maö
();

130 
	$maö
()

132 
PaEº‹
 
ªsu…
;

133 
	`EXPECT
–"öô", ((
ªsu…
=
	`Pa_Inôülize
()) == 0) );

134 
	`Te°BadA˘i⁄s
();

135 
	`Te°BadO≥ns
();

136 
îr‹
:

137 
	`Pa_Tîmö©e
();

138 
	`¥ötf
("QA Rï‹t: %dÖas£d, %d faûed.\n", 
gNumPas£d
, 
gNumFaûed
 );

140 
	}
}

142 
	$Te°BadO≥ns
( )

144 
P‹tAudioSåóm
 *
°ªam
 = 
NULL
;

145 
PaEº‹
 
ªsu…
;

146 
PaQaD©a
 
myD©a
;

148 
myD©a
.
‰amesLe·
 = (Ë(
SAMPLE_RATE
 * 100);

149 
myD©a
.
numCh™√ls
 = 1;

150 
myD©a
.
mode
 = 
MODE_OUTPUT
;

151 
	`HOPEFOR
( "No devices specified.",(

152 (
ªsu…
 = 
	`Pa_O≥nSåóm
(

153 &
°ªam
,

154 
∑NoDevi˚
, 0, 
∑Flﬂt32
, 
NULL
,

155 
∑NoDevi˚
, 0, 
∑Flﬂt32
, 
NULL
,

156 
SAMPLE_RATE
, 
FRAMES_PER_BUFFER
, 
NUM_BUFFERS
,

157 
∑ClùOff
,

158 
QaCÆlback
,

159 &
myD©a
 )

160 Ë=
∑InvÆidDevi˚Id
) );

161 
	`HOPEFOR
( "Out ofÑange input device specified.",(

162 (
ªsu…
 = 
	`Pa_O≥nSåóm
(

163 &
°ªam
,

164 
	`Pa_Cou¡Devi˚s
(), 0, 
∑Flﬂt32
, 
NULL
,

165 
∑NoDevi˚
, 0, 
∑Flﬂt32
, 
NULL
,

166 
SAMPLE_RATE
, 
FRAMES_PER_BUFFER
, 
NUM_BUFFERS
,

167 
∑ClùOff
,

168 
QaCÆlback
,

169 &
myD©a
 )

170 Ë=
∑InvÆidDevi˚Id
) );

172 
	`HOPEFOR
( "Out ofÑange output device specified.",(

173 (
ªsu…
 = 
	`Pa_O≥nSåóm
(

174 &
°ªam
,

175 
∑NoDevi˚
, 0, 
∑Flﬂt32
, 
NULL
,

176 
	`Pa_Cou¡Devi˚s
(), 0, 
∑Flﬂt32
, 
NULL
,

177 
SAMPLE_RATE
, 
FRAMES_PER_BUFFER
, 
NUM_BUFFERS
,

178 
∑ClùOff
,

179 
QaCÆlback
,

180 &
myD©a
 )

181 Ë=
∑InvÆidDevi˚Id
) );

182 
	`HOPEFOR
( "Zero input channels.",(

183 (
ªsu…
 = 
	`Pa_O≥nSåóm
(

184 &
°ªam
,

185 
	`Pa_GëDeÁu…I≈utDevi˚ID
(), 0, 
∑Flﬂt32
, 
NULL
,

186 
∑NoDevi˚
, 0, 
∑Flﬂt32
, 
NULL
,

187 
SAMPLE_RATE
, 
FRAMES_PER_BUFFER
, 
NUM_BUFFERS
,

188 
∑ClùOff
,

189 
QaCÆlback
,

190 &
myD©a
 )

191 Ë=
∑InvÆidCh™√lCou¡
) );

192 
	`HOPEFOR
( "Zero output channels.",(

193 (
ªsu…
 = 
	`Pa_O≥nSåóm
(

194 &
°ªam
,

195 
∑NoDevi˚
, 0, 
∑Flﬂt32
, 
NULL
,

196 
	`Pa_GëDeÁu…OuçutDevi˚ID
(), 0, 
∑Flﬂt32
, 
NULL
,

197 
SAMPLE_RATE
, 
FRAMES_PER_BUFFER
, 
NUM_BUFFERS
,

198 
∑ClùOff
,

199 
QaCÆlback
,

200 &
myD©a
 )

201 Ë=
∑InvÆidCh™√lCou¡
) );

202 
	`HOPEFOR
( "Nonzero input channels butÇo device.",(

203 (
ªsu…
 = 
	`Pa_O≥nSåóm
(

204 &
°ªam
,

205 
	`Pa_GëDeÁu…I≈utDevi˚ID
(), 2, 
∑Flﬂt32
, 
NULL
,

206 
∑NoDevi˚
, 2, 
∑Flﬂt32
, 
NULL
,

207 
SAMPLE_RATE
, 
FRAMES_PER_BUFFER
, 
NUM_BUFFERS
,

208 
∑ClùOff
,

209 
QaCÆlback
,

210 &
myD©a
 )

211 Ë=
∑InvÆidCh™√lCou¡
) );

213 
	`HOPEFOR
( "Nonzero output channels butÇo device.",(

214 (
ªsu…
 = 
	`Pa_O≥nSåóm
(

215 &
°ªam
,

216 
∑NoDevi˚
, 2, 
∑Flﬂt32
, 
NULL
,

217 
	`Pa_GëDeÁu…OuçutDevi˚ID
(), 2, 
∑Flﬂt32
, 
NULL
,

218 
SAMPLE_RATE
, 
FRAMES_PER_BUFFER
, 
NUM_BUFFERS
,

219 
∑ClùOff
,

220 
QaCÆlback
,

221 &
myD©a
 )

222 Ë=
∑InvÆidCh™√lCou¡
) );

223 
	`HOPEFOR
( "NULL streamÖointer.",(

224 (
ªsu…
 = 
	`Pa_O≥nSåóm
(

225 
NULL
,

226 
∑NoDevi˚
, 0, 
∑Flﬂt32
, 
NULL
,

227 
	`Pa_GëDeÁu…OuçutDevi˚ID
(), 2, 
∑Flﬂt32
, 
NULL
,

228 
SAMPLE_RATE
, 
FRAMES_PER_BUFFER
, 
NUM_BUFFERS
,

229 
∑ClùOff
,

230 
QaCÆlback
,

231 &
myD©a
 )

232 Ë=
∑BadSåómPå
) );

233 
	`HOPEFOR
( "Low sampleÑate.",(

234 (
ªsu…
 = 
	`Pa_O≥nSåóm
(

235 &
°ªam
,

236 
∑NoDevi˚
, 0, 
∑Flﬂt32
, 
NULL
,

237 
	`Pa_GëDeÁu…OuçutDevi˚ID
(), 2, 
∑Flﬂt32
, 
NULL
,

238 1.0, 
FRAMES_PER_BUFFER
, 
NUM_BUFFERS
,

239 
∑ClùOff
,

240 
QaCÆlback
,

241 &
myD©a
 )

242 Ë=
∑InvÆidSam∂eR©e
) );

243 
	`HOPEFOR
( "High sampleÑate.",(

244 (
ªsu…
 = 
	`Pa_O≥nSåóm
(

245 &
°ªam
,

246 
∑NoDevi˚
, 0, 
∑Flﬂt32
, 
NULL
,

247 
	`Pa_GëDeÁu…OuçutDevi˚ID
(), 2, 
∑Flﬂt32
, 
NULL
,

248 10000000.0, 
FRAMES_PER_BUFFER
, 
NUM_BUFFERS
,

249 
∑ClùOff
,

250 
QaCÆlback
,

251 &
myD©a
 )

252 Ë=
∑InvÆidSam∂eR©e
) );

253 
	`HOPEFOR
( "NULL callback.",(

254 (
ªsu…
 = 
	`Pa_O≥nSåóm
(

255 &
°ªam
,

256 
∑NoDevi˚
, 0, 
∑Flﬂt32
, 
NULL
,

257 
	`Pa_GëDeÁu…OuçutDevi˚ID
(), 2, 
∑Flﬂt32
, 
NULL
,

258 
SAMPLE_RATE
, 
FRAMES_PER_BUFFER
, 
NUM_BUFFERS
,

259 
∑ClùOff
,

260 
NULL
,

261 &
myD©a
 )

262 Ë=
∑NuŒCÆlback
) );

263 
	`HOPEFOR
( "Bad flag.",(

264 (
ªsu…
 = 
	`Pa_O≥nSåóm
(

265 &
°ªam
,

266 
∑NoDevi˚
, 0, 
∑Flﬂt32
, 
NULL
,

267 
	`Pa_GëDeÁu…OuçutDevi˚ID
(), 2, 
∑Flﬂt32
, 
NULL
,

268 
SAMPLE_RATE
, 
FRAMES_PER_BUFFER
, 
NUM_BUFFERS
,

270 
QaCÆlback
,

271 &
myD©a
 )

272 Ë=
∑InvÆidFœg
) );

275 
	`HOPEFOR
( "Use input deviceás output device.",(

276 (
ªsu…
 = 
	`Pa_O≥nSåóm
(

277 &
°ªam
,

278 
∑NoDevi˚
, 0, 
∑Flﬂt32
, 
NULL
,

279 
	`Pa_GëDeÁu…I≈utDevi˚ID
(), 2, 
∑Flﬂt32
, 
NULL
,

280 
SAMPLE_RATE
, 
FRAMES_PER_BUFFER
, 
NUM_BUFFERS
,

281 
∑ClùOff
,

282 
QaCÆlback
,

283 &
myD©a
 )

284 Ë=
∑InvÆidDevi˚Id
) );

286 
	`HOPEFOR
( "Use output deviceás input device.",(

287 (
ªsu…
 = 
	`Pa_O≥nSåóm
(

288 &
°ªam
,

289 
	`Pa_GëDeÁu…OuçutDevi˚ID
(), 2, 
∑Flﬂt32
, 
NULL
,

290 
∑NoDevi˚
, 0, 
∑Flﬂt32
, 
NULL
,

291 
SAMPLE_RATE
, 
FRAMES_PER_BUFFER
, 
NUM_BUFFERS
,

292 
∑ClùOff
,

293 
QaCÆlback
,

294 &
myD©a
 )

295 Ë=
∑InvÆidDevi˚Id
) );

298 if–
°ªam
 !
NULL
 ) 
	`Pa_Clo£Såóm
( stream );

299  
ªsu…
;

300 
	}
}

302 
	$Te°BadA˘i⁄s
( )

304 
P‹tAudioSåóm
 *
°ªam
 = 
NULL
;

305 
PaEº‹
 
ªsu…
;

306 
PaQaD©a
 
myD©a
;

308 
myD©a
.
‰amesLe·
 = (Ë(
SAMPLE_RATE
 * 100);

309 
myD©a
.
numCh™√ls
 = 1;

310 
myD©a
.
mode
 = 
MODE_OUTPUT
;

312 
	`EXPECT
–"Te°BadA˘i⁄s", ((
ªsu…
 = 
	`Pa_O≥nSåóm
(

313 &
°ªam
,

314 
∑NoDevi˚
, 0, 
∑Flﬂt32
, 
NULL
,

315 
	`Pa_GëDeÁu…OuçutDevi˚ID
(), 2, 
∑Flﬂt32
, 
NULL
,

316 
SAMPLE_RATE
, 
FRAMES_PER_BUFFER
, 
NUM_BUFFERS
,

317 
∑ClùOff
,

318 
QaCÆlback
,

319 &
myD©a
 )

321 
	`HOPEFOR
–"°¨t", ((
ªsu…
 = 
	`Pa_SèπSåóm
–
NULL
 )Ë=
∑BadSåómPå
) );

322 
	`HOPEFOR
–"°›", ((
ªsu…
 = 
	`Pa_St›Såóm
–
NULL
 )Ë=
∑BadSåómPå
) );

323 
	`HOPEFOR
–"a˘ive?", ((
ªsu…
 = 
	`Pa_SåómA˘ive
–
NULL
 )Ë=
∑BadSåómPå
) );

324 
	`HOPEFOR
–"˛o£", ((
ªsu…
 = 
	`Pa_Clo£Såóm
–
NULL
 )Ë=
∑BadSåómPå
) );

325 
	`HOPEFOR
–"time?", ((
ªsu…
 = (
PaEº‹
)
	`Pa_SåómTime
–
NULL
 )) != 0) );

326 
	`HOPEFOR
–"CPULﬂd?", ((
ªsu…
 = (
PaEº‹
)
	`Pa_GëCPULﬂd
–
NULL
 )) != 0) );

327 
îr‹
:

328 if–
°ªam
 !
NULL
 ) 
	`Pa_Clo£Såóm
( stream );

329  
ªsu…
;

330 
	}
}

	@portaudio/pa_tests/patest1.c

10 
	~<°dio.h
>

11 
	~<m©h.h
>

12 
	~"p‹èudio.h
"

13 #i‚de‡
M_PI


14 
	#M_PI
 (3.14159265)

	)

18 
	msöe
[100];

19 
	mpha£
;

20 
	mßmpsToGo
;

22 
	t∑ã°1d©a
;

23 
	$∑ã°1CÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

24 
buf„rFømes
,

25 
PaTime°amp
 
outTime
, *
u£rD©a
 )

27 
∑ã°1d©a
 *
d©a
 = (∑ã°1d©a*)
u£rD©a
;

28 *
ö
 = (*)
öputBuf„r
;

29 *
out
 = (*)
ouçutBuf„r
;

30 
‰amesToCÆc
 = 
buf„rFømes
;

31 
i
;

32 
föished
 = 0;

34 if(
öputBuf„r
 =
NULL
)  0;

35 if–
d©a
->
ßmpsToGo
 < 
buf„rFømes
 )

37 
‰amesToCÆc
 = 
d©a
->
ßmpsToGo
;

38 
föished
 = 1;

40  
i
=0; i<
‰amesToCÆc
; i++ )

42 *
out
++ = *
ö
++ * 
d©a
->
söe
[d©a->
pha£
];

43 *
out
++ = *
ö
++ * 
d©a
->
söe
[d©a->
pha£
++];

44 if–
d©a
->
pha£
 >= 100 )

45 
d©a
->
pha£
 = 0;

47 
d©a
->
ßmpsToGo
 -
‰amesToCÆc
;

49  ; 
i
<
buf„rFømes
; i++ )

51 *
out
++ = 0;

52 *
out
++ = 0;

54  
föished
;

55 
	}
}

56 
maö
(
¨gc
, * 
¨gv
[]);

57 
	$maö
(
¨gc
, * 
¨gv
[])

59 
PaSåóm
 *
°ªam
;

60 
PaEº‹
 
îr
;

61 
∑ã°1d©a
 
d©a
;

62 
i
;

63 
öputDevi˚
 = 
	`Pa_GëDeÁu…I≈utDevi˚ID
();

64 
ouçutDevi˚
 = 
	`Pa_GëDeÁu…OuçutDevi˚ID
();

66  
i
=0; i<100; i++ )

67 
d©a
.
söe
[
i
] = 
	`sö
–(()i/100.Ë* 
M_PI
 * 2. );

68 
d©a
.
pha£
 = 0;

69 
d©a
.
ßmpsToGo
 = 44100 * 20;

71 
	`Pa_Inôülize
();

72 
îr
 = 
	`Pa_O≥nSåóm
(

73 &
°ªam
,

74 
öputDevi˚
,

76 
∑Flﬂt32
,

77 
NULL
,

78 
ouçutDevi˚
,

80 
∑Flﬂt32
,

81 
NULL
,

85 
∑ClùOff
,

86 
∑ã°1CÆlback
,

87 &
d©a
 );

88 if–
îr
 =
∑NoEº‹
 )

90 
îr
 = 
	`Pa_SèπSåóm
–
°ªam
 );

91 
	`¥ötf
( "Pressány keyÅoÉnd.\n" );

92 
	`gëc
–
°dö
 );

93 
	`Pa_Ab‹tSåóm
–
°ªam
 );

95 
	`¥ötf
( "Waiting for streamÅo complete...\n" );

97  
	`Pa_SåómA˘ive
–
°ªam
 ) )

98 
	`Pa_SÀï
(1000);

100 
îr
 = 
	`Pa_Clo£Såóm
–
°ªam
 );

104 
	`Ârötf
–
°dîr
, "AnÉrror occured while openingÅheÖortaudio stream\n" );

105 if–
îr
 =
∑Ho°Eº‹
 )

106 
	`Ârötf
–
°dîr
, "Ho°Éº‹Çumbî: %d\n", 
	`Pa_GëHo°Eº‹
() );

108 
	`Ârötf
–
°dîr
, "Eº‹Çumbî: %d\n", 
îr
 );

110 
	`Pa_Tîmö©e
();

111 
	`¥ötf
( "bye\n" );

114 
	}
}

	@portaudio/pa_tests/patest_clip.c

37 
	~<°dio.h
>

38 
	~<m©h.h
>

39 
	~"p‹èudio.h
"

40 
	#NUM_SECONDS
 (4)

	)

41 
	#SAMPLE_RATE
 (44100)

	)

42 #i‚de‡
M_PI


43 
	#M_PI
 (3.14159265)

	)

45 
	#TABLE_SIZE
 (200)

	)

46 
	s∑Te°D©a


48 
	msöe
[
TABLE_SIZE
];

49 
	mam∂ôude
;

50 
	mÀ·_pha£
;

51 
	mright_pha£
;

53 
	t∑Te°D©a
;

54 
PaEº‹
 
PœySöe
–
∑Te°D©a
 *
d©a
, 
Êags
, 
am∂ôude
 );

59 
	$söeCÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

60 
‰amesPîBuf„r
,

61 
PaTime°amp
 
outTime
, *
u£rD©a
 )

63 
∑Te°D©a
 *
d©a
 = (∑Te°D©a*)
u£rD©a
;

64 *
out
 = (*)
ouçutBuf„r
;

65 
am∂ôude
 = 
d©a
->amplitude;

66 
i
;

67 (Ë
öputBuf„r
;

68 (Ë
outTime
;

70  
i
=0; i<
‰amesPîBuf„r
; i++ )

72 *
out
++ = 
am∂ôude
 * 
d©a
->
söe
[d©a->
À·_pha£
];

73 *
out
++ = 
am∂ôude
 * 
d©a
->
söe
[d©a->
right_pha£
];

74 
d©a
->
À·_pha£
 += 1;

75 if–
d©a
->
À·_pha£
 >
TABLE_SIZE
 ) data->left_phase -= TABLE_SIZE;

76 
d©a
->
right_pha£
 += 3;

77 if–
d©a
->
right_pha£
 >
TABLE_SIZE
 ) data->right_phase -= TABLE_SIZE;

80 
	}
}

82 
maö
();

83 
	$maö
()

85 
PaEº‹
 
îr
;

86 
∑Te°D©a
 
DATA
;

87 
i
;

88 
	`¥ötf
("PortAudio Test: output sine wave withánd without clipping.\n");

90  
i
=0; i<
TABLE_SIZE
; i++ )

92 
DATA
.
söe
[
i
] = (Ë
	`sö
–(()i/()
TABLE_SIZE
Ë* 
M_PI
 * 2. );

94 
	`¥ötf
("\nHÆ‡am∂ôude. Should soundÜikêsöêwave.\n"); 
	`fÊush
(
°dout
);

95 
îr
 = 
	`PœySöe
–&
DATA
, 
∑ClùOff
 | 
∑DôhîOff
, 0.5f );

96 if–
îr
 < 0 ) 
îr‹
;

97 
	`¥ötf
("\nFuŒám∂ôude. Should soundÜikêsöêwave.\n"); 
	`fÊush
(
°dout
);

98 
îr
 = 
	`PœySöe
–&
DATA
, 
∑ClùOff
 | 
∑DôhîOff
, 0.999f );

99 if–
îr
 < 0 ) 
îr‹
;

100 
	`¥ötf
("\nOverÑange with clippingánd ditheringÅurned OFF. Should sound veryÇasty.\n");

101 
	`fÊush
(
°dout
);

102 
îr
 = 
	`PœySöe
–&
DATA
, 
∑ClùOff
 | 
∑DôhîOff
, 1.1f );

103 if–
îr
 < 0 ) 
îr‹
;

104 
	`¥ötf
("\nOverÑange with clippingánd ditheringÅurned ON. Should sound smootherÅhanÖrevious.\n");

105 
	`fÊush
(
°dout
);

106 
îr
 = 
	`PœySöe
–&
DATA
, 
∑NoFœg
, 1.1f );

107 if–
îr
 < 0 ) 
îr‹
;

108 
	`¥ötf
("\nOverÑange withÖaClipOff but dithering ON.\n"

110 
	`fÊush
(
°dout
);

111 
îr
 = 
	`PœySöe
–&
DATA
, 
∑ClùOff
, 1.1f );

112 if–
îr
 < 0 ) 
îr‹
;

114 
îr‹
:

115 
	`Ârötf
–
°dîr
, "AnÉrror occured while usingÅheÖortaudio stream\n" );

116 
	`Ârötf
–
°dîr
, "Eº‹Çumbî: %d\n", 
îr
 );

117 
	`Ârötf
–
°dîr
, "Eº‹ mesßge: %s\n", 
	`Pa_GëEº‹Text
–
îr
 ) );

119 
	}
}

121 
PaEº‹
 
	$PœySöe
–
∑Te°D©a
 *
d©a
, 
Êags
, 
am∂ôude
 )

123 
P‹tAudioSåóm
 *
°ªam
;

124 
PaEº‹
 
îr
;

125 
d©a
->
À·_pha£
 = d©a->
right_pha£
 = 0;

126 
d©a
->
am∂ôude
 =ámplitude;

127 
îr
 = 
	`Pa_Inôülize
();

128 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

129 
îr
 = 
	`Pa_O≥nSåóm
(

130 &
°ªam
,

131 
∑NoDevi˚
,

133 
∑Flﬂt32
,

134 
NULL
,

135 
	`Pa_GëDeÁu…OuçutDevi˚ID
(),

137 
∑Flﬂt32
,

138 
NULL
,

139 
SAMPLE_RATE
,

142 
Êags
,

143 
söeCÆlback
,

144 
d©a
 );

145 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

146 
îr
 = 
	`Pa_SèπSåóm
–
°ªam
 );

147 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

148 
	`Pa_SÀï
–
NUM_SECONDS
 * 1000 );

149 
	`¥ötf
("CPULﬂd = %8.6f\n", 
	`Pa_GëCPULﬂd
–
°ªam
 ) );

150 
îr
 = 
	`Pa_Clo£Såóm
–
°ªam
 );

151 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

152 
	`Pa_Tîmö©e
();

153  
∑NoEº‹
;

154 
îr‹
:

155  
îr
;

156 
	}
}

	@portaudio/pa_tests/patest_dither.c

37 
	~<°dio.h
>

38 
	~<m©h.h
>

39 
	~"p‹èudio.h
"

40 
	#NUM_SECONDS
 (4)

	)

41 
	#SAMPLE_RATE
 (44100)

	)

42 #i‚de‡
M_PI


43 
	#M_PI
 (3.14159265)

	)

45 
	#TABLE_SIZE
 (200)

	)

46 
	s∑Te°D©a


48 
	msöe
[
TABLE_SIZE
];

49 
	mam∂ôude
;

50 
	mÀ·_pha£
;

51 
	mright_pha£
;

53 
	t∑Te°D©a
;

54 
PaEº‹
 
PœySöe
–
∑Te°D©a
 *
d©a
, 
PaSåómFœgs
 
Êags
, 
am∂ôude
 );

55 
söeCÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

56 
‰amesPîBuf„r
,

57 
PaTime°amp
 
outTime
, *
u£rD©a
 );

62 
	$söeCÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

63 
‰amesPîBuf„r
,

64 
PaTime°amp
 
outTime
, *
u£rD©a
 )

66 
∑Te°D©a
 *
d©a
 = (∑Te°D©a*)
u£rD©a
;

67 *
out
 = (*)
ouçutBuf„r
;

68 
am∂ôude
 = 
d©a
->amplitude;

69 
i
;

70 (Ë
outTime
;

71 (Ë
öputBuf„r
;

72  
i
=0; i<
‰amesPîBuf„r
; i++ )

74 *
out
++ = 
am∂ôude
 * 
d©a
->
söe
[d©a->
À·_pha£
];

75 *
out
++ = 
am∂ôude
 * 
d©a
->
söe
[d©a->
right_pha£
];

76 
d©a
->
À·_pha£
 += 1;

77 if–
d©a
->
À·_pha£
 >
TABLE_SIZE
 ) data->left_phase -= TABLE_SIZE;

78 
d©a
->
right_pha£
 += 3;

79 if–
d©a
->
right_pha£
 >
TABLE_SIZE
 ) data->right_phase -= TABLE_SIZE;

82 
	}
}

84 
maö
();

85 
	$maö
()

87 
PaEº‹
 
îr
;

88 
∑Te°D©a
 
DATA
;

89 
i
;

90 
am∂ôude
 = 32.0 / (1<<15);

91 
	`¥ötf
("PortAudio Test: output EXTREMELY QUIET sine wave withánd without dithering.\n");

93  
i
=0; i<
TABLE_SIZE
; i++ )

95 
DATA
.
söe
[
i
] = (Ë
	`sö
–(()i/()
TABLE_SIZE
Ë* 
M_PI
 * 2. );

97 
	`¥ötf
("\nNÿåótmít..\n"); 
	`fÊush
(
°dout
);

98 
îr
 = 
	`PœySöe
–&
DATA
, 
∑ClùOff
 | 
∑DôhîOff
, 
am∂ôude
 );

99 if–
îr
 < 0 ) 
îr‹
;

100 
	`¥ötf
("\nClip.\n");

101 
	`fÊush
(
°dout
);

102 
îr
 = 
	`PœySöe
–&
DATA
, 
∑DôhîOff
, 
am∂ôude
 );

103 if–
îr
 < 0 ) 
îr‹
;

104 
	`¥ötf
("\nClipánd Dither.\n");

105 
	`fÊush
(
°dout
);

106 
îr
 = 
	`PœySöe
–&
DATA
, 
∑NoFœg
, 
am∂ôude
 );

107 if–
îr
 < 0 ) 
îr‹
;

109 
îr‹
:

110 
	`Ârötf
–
°dîr
, "AnÉrror occured while usingÅheÖortaudio stream\n" );

111 
	`Ârötf
–
°dîr
, "Eº‹Çumbî: %d\n", 
îr
 );

112 
	`Ârötf
–
°dîr
, "Eº‹ mesßge: %s\n", 
	`Pa_GëEº‹Text
–
îr
 ) );

114 
	}
}

116 
PaEº‹
 
	$PœySöe
–
∑Te°D©a
 *
d©a
, 
PaSåómFœgs
 
Êags
, 
am∂ôude
 )

118 
P‹tAudioSåóm
 *
°ªam
;

119 
PaEº‹
 
îr
;

120 
d©a
->
À·_pha£
 = d©a->
right_pha£
 = 0;

121 
d©a
->
am∂ôude
 =ámplitude;

122 
îr
 = 
	`Pa_Inôülize
();

123 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

124 
îr
 = 
	`Pa_O≥nSåóm
(

125 &
°ªam
,

126 
∑NoDevi˚
,

128 
∑Flﬂt32
,

129 
NULL
,

130 
	`Pa_GëDeÁu…OuçutDevi˚ID
(),

132 
∑Flﬂt32
,

133 
NULL
,

134 
SAMPLE_RATE
,

137 
Êags
,

138 
söeCÆlback
,

139 (*)
d©a
 );

140 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

142 
îr
 = 
	`Pa_SèπSåóm
–
°ªam
 );

143 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

144 
	`Pa_SÀï
–
NUM_SECONDS
 * 1000 );

145 
	`¥ötf
("CPULﬂd = %8.6f\n", 
	`Pa_GëCPULﬂd
–
°ªam
 ) );

146 
îr
 = 
	`Pa_Clo£Såóm
–
°ªam
 );

147 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

148 
	`Pa_Tîmö©e
();

149  
∑NoEº‹
;

150 
îr‹
:

151  
îr
;

152 
	}
}

	@portaudio/pa_tests/patest_latency.c

36 
	~<°dio.h
>

37 
	~<m©h.h
>

38 
	~"p‹èudio.h
"

40 
	#OUTPUT_DEVICE
 (
	`Pa_GëDeÁu…OuçutDevi˚ID
())

	)

41 
	#SAMPLE_RATE
 (44100)

	)

42 
	#FRAMES_PER_BUFFER
 (64)

	)

45 
	#MIN_LATENCY_MSEC
 (2000)

	)

46 
	#NUM_BUFFERS
 ((
MIN_LATENCY_MSEC
 * 
SAMPLE_RATE
Ë/ (
FRAMES_PER_BUFFER
 * 1000))

	)

48 
	#NUM_BUFFERS
 (0)

	)

51 
	#MIN_FREQ
 (100.0f)

	)

52 
	#CÆcPha£In¸emít
(
‰eq
Ë((‰eq)/
SAMPLE_RATE
)

	)

53 #i‚de‡
M_PI


54 
	#M_PI
 (3.14159265)

	)

56 
	#TABLE_SIZE
 (400)

	)

59 
	msöe
[
TABLE_SIZE
 + 1];

60 
	mpha£_ö¸emít
;

61 
	mÀ·_pha£
;

62 
	mright_pha£
;

64 
	t∑Te°D©a
;

65 
LookupSöe
–
∑Te°D©a
 *
d©a
, 
pha£
 );

69 
	$LookupSöe
–
∑Te°D©a
 *
d©a
, 
pha£
 )

71 
fIndex
 = 
pha£
*
TABLE_SIZE
;

72 
ödex
 = (Ë
fIndex
;

73 
‰a˘
 = 
fIndex
 - 
ödex
;

74 
lo
 = 
d©a
->
söe
[
ödex
];

75 
hi
 = 
d©a
->
söe
[
ödex
+1];

76 
vÆ
 = 
lo
 + 
‰a˘
*(
hi
-lo);

77  
vÆ
;

78 
	}
}

83 
	$∑ã°CÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

84 
‰amesPîBuf„r
,

85 
PaTime°amp
 
outTime
, *
u£rD©a
 )

87 
∑Te°D©a
 *
d©a
 = (∑Te°D©a*)
u£rD©a
;

88 *
out
 = (*)
ouçutBuf„r
;

89 
i
;

90 
föished
 = 0;

91 (Ë
outTime
;

92 (Ë
öputBuf„r
;

94  
i
=0; i<
‰amesPîBuf„r
; i++ )

96 *
out
++ = 
	`LookupSöe
(
d©a
, d©a->
À·_pha£
);

97 *
out
++ = 
	`LookupSöe
(
d©a
, d©a->
right_pha£
);

98 
d©a
->
À·_pha£
 +d©a->
pha£_ö¸emít
;

99 if–
d©a
->
À·_pha£
 >= 1.0f ) data->left_phase -= 1.0f;

100 
d©a
->
right_pha£
 +(d©a->
pha£_ö¸emít
 * 1.5f);

101 if–
d©a
->
right_pha£
 >= 1.0f ) data->right_phase -= 1.0f;

104 
	}
}

106 
maö
();

107 
	$maö
()

109 
P‹tAudioSåóm
 *
°ªam
;

110 
PaEº‹
 
îr
;

111 
∑Te°D©a
 
d©a
;

112 
i
;

113 
d⁄e
 = 0;

114 
	`¥ötf
("P‹tAudiÿTe°:É¡îÜëã∏thí hô ENTER.ÇumBuf„r†%d\n", 
NUM_BUFFERS
 );

116  
i
=0; i<
TABLE_SIZE
; i++ )

118 
d©a
.
söe
[
i
] = 0.90‡* (Ë
	`sö
–(()i/()
TABLE_SIZE
Ë* 
M_PI
 * 2. );

120 
d©a
.
söe
[
TABLE_SIZE
] = data.sine[0];

121 
d©a
.
À·_pha£
 = d©a.
right_pha£
 = 0.0;

122 
d©a
.
pha£_ö¸emít
 = 
	`CÆcPha£In¸emít
(
MIN_FREQ
);

124 
îr
 = 
	`Pa_Inôülize
();

125 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

126 
	`¥ötf
("P‹tAudiÿTe°: ouçuàdevi˚ = %d\n", 
OUTPUT_DEVICE
 );

127 
îr
 = 
	`Pa_O≥nSåóm
(

128 &
°ªam
,

129 
∑NoDevi˚
,

131 
∑Flﬂt32
,

132 
NULL
,

133 
OUTPUT_DEVICE
,

135 
∑Flﬂt32
,

136 
NULL
,

137 
SAMPLE_RATE
,

138 
FRAMES_PER_BUFFER
,

139 
NUM_BUFFERS
,

140 
∑ClùOff
|
∑DôhîOff
,

141 
∑ã°CÆlback
,

142 &
d©a
 );

143 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

144 
îr
 = 
	`Pa_SèπSåóm
–
°ªam
 );

145 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

146 
	`¥ötf
("Play ASCII keyboard. Hit 'q'Åo stop. (Use RETURN key on Mac)\n");

147 
	`fÊush
(
°dout
);

148  !
d⁄e
 )

150 
‰eq
;

151 
ödex
;

152 
c
;

155 
c
 = 
	`gëch¨
();

157  
c
 < ' ');

159 if–
c
 ='q' ) 
d⁄e
 = 1;

160 
ödex
 = 
c
 % 26;

161 
‰eq
 = 
MIN_FREQ
 + (
ödex
 * 40.0);

162 
d©a
.
pha£_ö¸emít
 = 
	`CÆcPha£In¸emít
(
‰eq
);

164 
	`¥ötf
("Call Pa_StopStream()\n");

165 
îr
 = 
	`Pa_St›Såóm
–
°ªam
 );

166 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

167 
	`Pa_Tîmö©e
();

168 
	`¥ötf
("Test finished.\n");

169  
îr
;

170 
îr‹
:

171 
	`Pa_Tîmö©e
();

172 
	`Ârötf
–
°dîr
, "AnÉrror occured while usingÅheÖortaudio stream\n" );

173 
	`Ârötf
–
°dîr
, "Eº‹Çumbî: %d\n", 
îr
 );

174 
	`Ârötf
–
°dîr
, "Eº‹ mesßge: %s\n", 
	`Pa_GëEº‹Text
–
îr
 ) );

175  
îr
;

176 
	}
}

	@portaudio/pa_tests/patest_leftright.c

39 
	~<°dio.h
>

40 
	~<m©h.h
>

41 
	~"p‹èudio.h
"

42 
	#NUM_SECONDS
 (8)

	)

43 
	#SAMPLE_RATE
 (44100)

	)

44 
	#FRAMES_PER_BUFFER
 (512)

	)

45 #i‚de‡
M_PI


46 
	#M_PI
 (3.14159265)

	)

48 
	#TABLE_SIZE
 (200)

	)

51 
	msöe
[
TABLE_SIZE
];

52 
	mÀ·_pha£
;

53 
	mright_pha£
;

54 
	mtoggÀ
;

55 
	mcou¡Down
;

57 
	t∑Te°D©a
;

62 
	$∑ã°CÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

63 
‰amesPîBuf„r
,

64 
PaTime°amp
 
outTime
, *
u£rD©a
 )

66 
∑Te°D©a
 *
d©a
 = (∑Te°D©a*)
u£rD©a
;

67 *
out
 = (*)
ouçutBuf„r
;

68 
i
;

69 
föished
 = 0;

70 (Ë
outTime
;

71 (Ë
öputBuf„r
;

73  
i
=0; i<
‰amesPîBuf„r
; i++ )

75 if–
d©a
->
toggÀ
 )

77 *
out
++ = 
d©a
->
söe
[d©a->
À·_pha£
];

78 *
out
++ = 0;

82 *
out
++ = 0;

83 *
out
++ = 
d©a
->
söe
[d©a->
right_pha£
];

86 
d©a
->
À·_pha£
 += 1;

87 if–
d©a
->
À·_pha£
 >
TABLE_SIZE
 ) data->left_phase -= TABLE_SIZE;

88 
d©a
->
right_pha£
 += 3;

89 if–
d©a
->
right_pha£
 >
TABLE_SIZE
 ) data->right_phase -= TABLE_SIZE;

92 if–
d©a
->
cou¡Down
 < 0 )

94 
d©a
->
cou¡Down
 = 
SAMPLE_RATE
;

95 
d©a
->
toggÀ
 = !data->toggle;

97 
d©a
->
cou¡Down
 -
‰amesPîBuf„r
;

99  
föished
;

100 
	}
}

103 
maö
();

104 
	$maö
()

106 
P‹tAudioSåóm
 *
°ªam
;

107 
PaEº‹
 
îr
;

108 
∑Te°D©a
 
d©a
;

109 
i
;

110 
timeout
;

112 
	`¥ötf
("Play differentÅone sine wavesÅhatálternate betweenÜeftándÑight channel.\n");

113 
	`¥ötf
("TheÜowÅone should be onÅheÜeft channel.\n");

116  
i
=0; i<
TABLE_SIZE
; i++ )

118 
d©a
.
söe
[
i
] = (Ë
	`sö
–(()i/()
TABLE_SIZE
Ë* 
M_PI
 * 2. );

120 
d©a
.
À·_pha£
 = d©a.
right_pha£
 = d©a.
toggÀ
 = 0;

121 
d©a
.
cou¡Down
 = 
SAMPLE_RATE
;

123 
îr
 = 
	`Pa_Inôülize
();

124 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

126 
îr
 = 
	`Pa_O≥nSåóm
(

127 &
°ªam
,

128 
∑NoDevi˚
,

130 
∑Flﬂt32
,

131 
NULL
,

132 
	`Pa_GëDeÁu…OuçutDevi˚ID
(),

134 
∑Flﬂt32
,

135 
NULL
,

136 
SAMPLE_RATE
,

137 
FRAMES_PER_BUFFER
,

139 
∑ClùOff
,

140 
∑ã°CÆlback
,

141 &
d©a
 );

142 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

144 
îr
 = 
	`Pa_SèπSåóm
–
°ªam
 );

145 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

147 
	`¥ötf
("Play for several seconds.\n");

148 
timeout
 = 
NUM_SECONDS
 * 4;

149  
timeout
 > 0 )

151 
	`Pa_SÀï
( 300 );

152 
timeout
 -= 1;

155 
îr
 = 
	`Pa_St›Såóm
–
°ªam
 );

156 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

157 
îr
 = 
	`Pa_Clo£Såóm
–
°ªam
 );

158 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

159 
	`Pa_Tîmö©e
();

160 
	`¥ötf
("Test finished.\n");

161  
îr
;

162 
îr‹
:

163 
	`Pa_Tîmö©e
();

164 
	`Ârötf
–
°dîr
, "AnÉrror occured while usingÅheÖortaudio stream\n" );

165 
	`Ârötf
–
°dîr
, "Eº‹Çumbî: %d\n", 
îr
 );

166 
	`Ârötf
–
°dîr
, "Eº‹ mesßge: %s\n", 
	`Pa_GëEº‹Text
–
îr
 ) );

167  
îr
;

168 
	}
}

	@portaudio/pa_tests/patest_longsine.c

36 
	~<°dio.h
>

37 
	~<m©h.h
>

38 
	~"p‹èudio.h
"

40 
	#SAMPLE_RATE
 (44100)

	)

42 #i‚de‡
M_PI


43 
	#M_PI
 (3.14159265)

	)

46 
	#TABLE_SIZE
 (200)

	)

49 
	msöe
[
TABLE_SIZE
];

50 
	mÀ·_pha£
;

51 
	mright_pha£
;

53 
	t∑Te°D©a
;

59 
	$∑ã°CÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

60 
‰amesPîBuf„r
,

61 
PaTime°amp
 
outTime
, *
u£rD©a
 )

63 
∑Te°D©a
 *
d©a
 = (∑Te°D©a*)
u£rD©a
;

64 *
out
 = (*)
ouçutBuf„r
;

65 
i
;

66 (Ë
outTime
;

67 (Ë
öputBuf„r
;

68  
i
=0; i<
‰amesPîBuf„r
; i++ )

70 *
out
++ = 
d©a
->
söe
[d©a->
À·_pha£
];

71 *
out
++ = 
d©a
->
söe
[d©a->
right_pha£
];

72 
d©a
->
À·_pha£
 += 1;

73 if–
d©a
->
À·_pha£
 >
TABLE_SIZE
 ) data->left_phase -= TABLE_SIZE;

74 
d©a
->
right_pha£
 += 3;

75 if–
d©a
->
right_pha£
 >
TABLE_SIZE
 ) data->right_phase -= TABLE_SIZE;

78 
	}
}

81 
maö
();

82 
	$maö
()

84 
P‹tAudioSåóm
 *
°ªam
;

85 
PaEº‹
 
îr
;

86 
∑Te°D©a
 
d©a
;

87 
i
;

88 
	`¥ötf
("PortAudio Test: output sine wave.\n");

91  
i
=0; i<
TABLE_SIZE
; i++ )

93 
d©a
.
söe
[
i
] = (Ë
	`sö
–(()i/()
TABLE_SIZE
Ë* 
M_PI
 * 2. );

95 
d©a
.
À·_pha£
 = d©a.
right_pha£
 = 0;

97 
îr
 = 
	`Pa_Inôülize
();

98 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

100 
îr
 = 
	`Pa_O≥nSåóm
(

101 &
°ªam
,

102 
∑NoDevi˚
,

104 
∑Flﬂt32
,

105 
NULL
,

106 
	`Pa_GëDeÁu…OuçutDevi˚ID
(),

108 
∑Flﬂt32
,

109 
NULL
,

110 
SAMPLE_RATE
,

113 
∑ClùOff
,

114 
∑ã°CÆlback
,

115 &
d©a
 );

116 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

118 
îr
 = 
	`Pa_SèπSåóm
–
°ªam
 );

119 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

121 
	`¥ötf
("Hit ENTERÅo stopÖrogram.\n");

122 
	`gëch¨
();

124 
îr
 = 
	`Pa_Clo£Såóm
–
°ªam
 );

125 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

126 
	`Pa_Tîmö©e
();

128 
	`¥ötf
("Test finished.\n");

129  
îr
;

131 
îr‹
:

132 
	`Pa_Tîmö©e
();

133 
	`Ârötf
–
°dîr
, "AnÉrror occured while usingÅheÖortaudio stream\n" );

134 
	`Ârötf
–
°dîr
, "Eº‹Çumbî: %d\n", 
îr
 );

135 
	`Ârötf
–
°dîr
, "Eº‹ mesßge: %s\n", 
	`Pa_GëEº‹Text
–
îr
 ) );

136  
îr
;

137 
	}
}

	@portaudio/pa_tests/patest_many.c

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<m©h.h
>

39 
	~"p‹èudio.h
"

40 
	#NUM_SECONDS
 (1)

	)

41 
	#SAMPLE_RATE
 (44100)

	)

42 #i‚de‡
M_PI


43 
	#M_PI
 (3.14159265)

	)

45 
	#TABLE_SIZE
 (200)

	)

48 
	msöe
[
TABLE_SIZE
];

49 
	mÀ·_pha£
;

50 
	mright_pha£
;

51 
	mßmpsToGo
;

53 
	t∑Te°D©a
;

54 
PaEº‹
 
Te°On˚
( );

55 
∑ã°1CÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

56 
‰amesPîBuf„r
,

57 
PaTime°amp
 
outTime
, *
u£rD©a
 );

62 
	$∑ã°1CÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

63 
‰amesPîBuf„r
,

64 
PaTime°amp
 
outTime
, *
u£rD©a
 )

66 
∑Te°D©a
 *
d©a
 = (∑Te°D©a*)
u£rD©a
;

67 *
out
 = (*)
ouçutBuf„r
;

68 
i
;

69 
föished
 = 0;

70 (Ë
öputBuf„r
;

71 (Ë
outTime
;

73 if–
d©a
->
ßmpsToGo
 < 
‰amesPîBuf„r
 )

77  
i
=0; i<
d©a
->
ßmpsToGo
; i++ )

79 *
out
++ = 
d©a
->
söe
[d©a->
À·_pha£
];

80 *
out
++ = 
d©a
->
söe
[d©a->
right_pha£
];

81 
d©a
->
À·_pha£
 += 1;

82 if–
d©a
->
À·_pha£
 >
TABLE_SIZE
 ) data->left_phase -= TABLE_SIZE;

83 
d©a
->
right_pha£
 += 3;

84 if–
d©a
->
right_pha£
 >
TABLE_SIZE
 ) data->right_phase -= TABLE_SIZE;

87  ; 
i
<
‰amesPîBuf„r
; i++ )

89 *
out
++ = 0;

90 *
out
++ = 0;

93 
föished
 = 1;

97  
i
=0; i<
‰amesPîBuf„r
; i++ )

99 *
out
++ = 
d©a
->
söe
[d©a->
À·_pha£
];

100 *
out
++ = 
d©a
->
söe
[d©a->
right_pha£
];

101 
d©a
->
À·_pha£
 += 1;

102 if–
d©a
->
À·_pha£
 >
TABLE_SIZE
 ) data->left_phase -= TABLE_SIZE;

103 
d©a
->
right_pha£
 += 3;

104 if–
d©a
->
right_pha£
 >
TABLE_SIZE
 ) data->right_phase -= TABLE_SIZE;

106 
d©a
->
ßmpsToGo
 -
‰amesPîBuf„r
;

108  
föished
;

109 
	}
}

111 #ifde‡
MACINTOSH


112 
maö
();

113 
	$maö
()

115 
i
;

116 
PaEº‹
 
îr
;

117 
numLo›s
 = 10;

118 
	`¥ötf
("Lo› %dÅimes.\n", 
numLo›s
 );

119  
i
=0; i<
numLo›s
; i++ )

121 
	`¥ötf
("Lo› %d ouào‡%d.\n", 
i
+1, 
numLo›s
 );

122 
îr
 = 
	`Te°On˚
();

123 if–
îr
 < 0 )  0;

125 
	}
}

127 
maö
(
¨gc
, **
¨gv
);

128 
	$maö
(
¨gc
, **
¨gv
)

130 
PaEº‹
 
îr
;

131 
i
, 
numLo›s
 = 10;

132 if–
¨gc
 > 1 )

134 
numLo›s
 = 
	`©oi
(
¨gv
[1]);

136  
i
=0; i<
numLo›s
; i++ )

138 
	`¥ötf
("Lo› %d ouào‡%d.\n", 
i
+1, 
numLo›s
 );

139 
îr
 = 
	`Te°On˚
();

140 if–
îr
 < 0 )  1;

142 
	`¥ötf
("Test complete.\n");

144 
	}
}

146 
PaEº‹
 
	$Te°On˚
( )

148 
P‹tAudioSåóm
 *
°ªam
;

149 
PaEº‹
 
îr
;

150 
∑Te°D©a
 
d©a
;

151 
i
;

152 
tŸÆSamps
;

154  
i
=0; i<
TABLE_SIZE
; i++ )

156 
d©a
.
söe
[
i
] = (Ë(32767.0 * 
	`sö
–(()i/()
TABLE_SIZE
Ë* 
M_PI
 * 2. ));

158 
d©a
.
À·_pha£
 = d©a.
right_pha£
 = 0;

159 
d©a
.
ßmpsToGo
 = 
tŸÆSamps
 = 
NUM_SECONDS
 * 
SAMPLE_RATE
;

160 
îr
 = 
	`Pa_Inôülize
();

161 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

162 
îr
 = 
	`Pa_O≥nSåóm
(

163 &
°ªam
,

164 
∑NoDevi˚
,

166 
∑I¡16
,

167 
NULL
,

168 
	`Pa_GëDeÁu…OuçutDevi˚ID
(),

170 
∑I¡16
,

171 
NULL
,

172 
SAMPLE_RATE
,

175 
∑ClùOff
,

176 
∑ã°1CÆlback
,

177 &
d©a
 );

178 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

180 
îr
 = 
	`Pa_SèπSåóm
–
°ªam
 );

181 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

182 
	`¥ötf
("Waiting for soundÅo finish.\n");

183 
	`fÊush
(
°dout
);

184 
	`Pa_SÀï
(1000);

185 
îr
 = 
	`Pa_Clo£Såóm
–
°ªam
 );

186 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

187 
	`Pa_Tîmö©e
();

188  
∑NoEº‹
;

189 
îr‹
:

190 
	`Pa_Tîmö©e
();

191 
	`Ârötf
–
°dîr
, "AnÉrror occured while usingÅheÖortaudio stream\n" );

192 
	`Ârötf
–
°dîr
, "Eº‹Çumbî: %d\n", 
îr
 );

193 
	`Ârötf
–
°dîr
, "Eº‹ mesßge: %s\n", 
	`Pa_GëEº‹Text
–
îr
 ) );

194  
îr
;

195 
	}
}

	@portaudio/pa_tests/patest_maxsines.c

38 
	~<°dio.h
>

39 
	~<m©h.h
>

40 
	~"p‹èudio.h
"

42 
	#MAX_SINES
 (500)

	)

43 
	#MAX_USAGE
 (0.8)

	)

44 
	#SAMPLE_RATE
 (44100)

	)

45 
	#FREQ_TO_PHASE_INC
(
‰eq
Ë(‰eq/()
SAMPLE_RATE
)

	)

47 
	#MIN_PHASE_INC
 
	`FREQ_TO_PHASE_INC
(200.0f)

	)

48 
	#MAX_PHASE_INC
 (
MIN_PHASE_INC
 * (1 << 5))

	)

50 
	#FRAMES_PER_BUFFER
 (512)

	)

51 #i‚de‡
M_PI


52 
	#M_PI
 (3.14159265)

	)

54 
	#TWOPI
 (
M_PI
 * 2.0)

	)

56 
	#TABLE_SIZE
 (512)

	)

58 
	s∑Te°D©a


60 
	mnumSöes
;

61 
	msöe
[
TABLE_SIZE
 + 1];

62 
	mpha£s
[
MAX_SINES
];

64 
	t∑Te°D©a
;

69 
LookupSöe
–
∑Te°D©a
 *
d©a
, 
pha£
 );

70 
	$LookupSöe
–
∑Te°D©a
 *
d©a
, 
pha£
 )

72 
fIndex
 = 
pha£
*
TABLE_SIZE
;

73 
ödex
 = (Ë
fIndex
;

74 
‰a˘
 = 
fIndex
 - 
ödex
;

75 
lo
 = 
d©a
->
söe
[
ödex
];

76 
hi
 = 
d©a
->
söe
[
ödex
+1];

77 
vÆ
 = 
lo
 + 
‰a˘
*(
hi
-lo);

78  
vÆ
;

79 
	}
}

85 
	$∑ã°CÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

86 
‰amesPîBuf„r
,

87 
PaTime°amp
 
outTime
, *
u£rD©a
 )

89 
∑Te°D©a
 *
d©a
 = (∑Te°D©a*)
u£rD©a
;

90 *
out
 = (*)
ouçutBuf„r
;

91 
outSam∂e
;

92 
sˇÀr
;

93 
numF‹SˇÀ
;

94 
i
;

95 
j
;

96 
föished
 = 0;

97 (Ë
outTime
;

98 (Ë
öputBuf„r
;

101 
numF‹SˇÀ
 = 
d©a
->
numSöes
;

102 if–
numF‹SˇÀ
 < 8 )ÇumForScale = 8;

103 
sˇÀr
 = 1.0‡/ 
numF‹SˇÀ
;

105  
i
=0; i<
‰amesPîBuf„r
; i++ )

107 
ouçut
 = 0.0;

108 
pha£Inc
 = 
MIN_PHASE_INC
;

109 
pha£
;

110  
j
=0; j<
d©a
->
numSöes
; j++ )

113 
pha£
 = 
d©a
->
pha£s
[
j
];

114 
pha£
 +
pha£Inc
;

115 if–
pha£
 >= 1.0 )Öhase -= 1.0;

117 
ouçut
 +
	`LookupSöe
(
d©a
, 
pha£
);

118 
d©a
->
pha£s
[
j
] = 
pha£
;

120 
pha£Inc
 *= 1.02f;

121 if–
pha£Inc
 > 
MAX_PHASE_INC
 )Öha£In¯
MIN_PHASE_INC
;

124 
outSam∂e
 = (Ë(
ouçut
 * 
sˇÀr
);

125 *
out
++ = 
outSam∂e
;

126 *
out
++ = 
outSam∂e
;

128  
föished
;

129 
	}
}

132 
maö
();

133 
	$maö
()

135 
i
;

136 
P‹tAudioSåóm
 *
°ªam
;

137 
PaEº‹
 
îr
;

138 
∑Te°D©a
 
d©a
 = {0};

139 
lﬂd
;

140 
	`¥ötf
("P‹tAudiÿTe°: ouçuàsöêwave. SR = %d, BufSizê%d\n", 
SAMPLE_RATE
, 
FRAMES_PER_BUFFER
);

143  
i
=0; i<
TABLE_SIZE
; i++ )

145 
d©a
.
söe
[
i
] = (Ë
	`sö
–(()i/()
TABLE_SIZE
Ë* 
M_PI
 * 2. );

147 
d©a
.
söe
[
TABLE_SIZE
] = data.sine[0];

149 
îr
 = 
	`Pa_Inôülize
();

150 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

151 
îr
 = 
	`Pa_O≥nSåóm
(

152 &
°ªam
,

153 
∑NoDevi˚
,

155 
∑Flﬂt32
,

156 
NULL
,

157 
	`Pa_GëDeÁu…OuçutDevi˚ID
(),

159 
∑Flﬂt32
,

160 
NULL
,

161 
SAMPLE_RATE
,

162 
FRAMES_PER_BUFFER
,

164 
∑ClùOff
,

165 
∑ã°CÆlback
,

166 &
d©a
 );

167 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

168 
îr
 = 
	`Pa_SèπSåóm
–
°ªam
 );

169 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

174 
d©a
.
numSöes
++;

175 
	`Pa_SÀï
( 200 );

177 
lﬂd
 = 
	`Pa_GëCPULﬂd
–
°ªam
 );

178 
	`¥ötf
("numSöe†%d, CPUÜﬂd = %f\n", 
d©a
.
numSöes
, 
lﬂd
 );

179 
	`fÊush
–
°dout
 );

181  (
lﬂd
 < 
MAX_USAGE
Ë&& (
d©a
.
numSöes
 < 
MAX_SINES
) );

183 
îr
 = 
	`Pa_St›Såóm
–
°ªam
 );

184 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

185 
îr
 = 
	`Pa_Clo£Såóm
–
°ªam
 );

186 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

187 
	`Pa_Tîmö©e
();

188 
	`¥ötf
("Test finished.\n");

189  
îr
;

190 
îr‹
:

191 
	`Pa_Tîmö©e
();

192 
	`Ârötf
–
°dîr
, "AnÉrror occured while usingÅheÖortaudio stream\n" );

193 
	`Ârötf
–
°dîr
, "Eº‹Çumbî: %d\n", 
îr
 );

194 
	`Ârötf
–
°dîr
, "Eº‹ mesßge: %s\n", 
	`Pa_GëEº‹Text
–
îr
 ) );

195  
îr
;

196 
	}
}

	@portaudio/pa_tests/patest_pink.c

45 
	~<°dio.h
>

46 
	~<m©h.h
>

47 
	~"p‹èudio.h
"

48 
	#PINK_MAX_RANDOM_ROWS
 (30)

	)

49 
	#PINK_RANDOM_BITS
 (24)

	)

50 
	#PINK_RANDOM_SHIFT
 ((()*8)-
PINK_RANDOM_BITS
)

	)

53 
	mpök_Rows
[
PINK_MAX_RANDOM_ROWS
];

54 
	mpök_Ru¬ögSum
;

55 
	mpök_Index
;

56 
	mpök_IndexMask
;

57 
	mpök_Sˇœr
;

59 
	tPökNoi£
;

61 
Gíî©eR™domNumbî
( );

62 
InôülizePökNoi£
–
PökNoi£
 *
pök
, 
numRows
 );

63 
Gíî©ePökNoi£
–
PökNoi£
 *
pök
 );

66 
	$Gíî©eR™domNumbî
( )

69 
øndSìd
 = 22222;

70 
øndSìd
 = (randSeed * 196314165) + 907633515;

71  
øndSìd
;

72 
	}
}

75 
	$InôülizePökNoi£
–
PökNoi£
 *
pök
, 
numRows
 )

77 
i
;

78 
pmax
;

79 
pök
->
pök_Index
 = 0;

80 
pök
->
pök_IndexMask
 = (1<<
numRows
) - 1;

82 
pmax
 = (
numRows
 + 1Ë* (1<<(
PINK_RANDOM_BITS
-1));

83 
pök
->
pök_Sˇœr
 = 1.0‡/ 
pmax
;

85  
i
=0; i<
numRows
; i++ ) 
pök
->
pök_Rows
[i] = 0;

86 
pök
->
pök_Ru¬ögSum
 = 0;

87 
	}
}

88 
	#PINK_MEASURE


	)

89 #ifde‡
PINK_MEASURE


90 
	gpökMax
 = -999.0;

91 
	gpökMö
 = 999.0;

94 
	$Gíî©ePökNoi£
–
PökNoi£
 *
pök
 )

96 
√wR™dom
;

97 
sum
;

98 
ouçut
;

100 
pök
->
pök_Index
 = (pök->pök_Index + 1Ë&Öök->
pök_IndexMask
;

102 if–
pök
->
pök_Index
 != 0 )

106 
numZîos
 = 0;

107 
n
 = 
pök
->
pök_Index
;

108  (
n
 & 1) == 0 )

110 
n
 =Ç >> 1;

111 
numZîos
++;

117 
pök
->
pök_Ru¬ögSum
 -pök->
pök_Rows
[
numZîos
];

118 
√wR™dom
 = (()
	`Gíî©eR™domNumbî
()Ë>> 
PINK_RANDOM_SHIFT
;

119 
pök
->
pök_Ru¬ögSum
 +
√wR™dom
;

120 
pök
->
pök_Rows
[
numZîos
] = 
√wR™dom
;

124 
√wR™dom
 = (()
	`Gíî©eR™domNumbî
()Ë>> 
PINK_RANDOM_SHIFT
;

125 
sum
 = 
pök
->
pök_Ru¬ögSum
 + 
√wR™dom
;

127 
ouçut
 = 
pök
->
pök_Sˇœr
 * 
sum
;

128 #ifde‡
PINK_MEASURE


130 if–
ouçut
 > 
pökMax
 )ÖinkMax = output;

131 if–
ouçut
 < 
pökMö
 )ÖinkMin = output;

133  
ouçut
;

134 
	}
}

136 
	#PINK_TEST


	)

137 #ifde‡
PINK_TEST


141 
PökNoi£
 
	mÀ·Pök
;

142 
PökNoi£
 
	mrightPök
;

143 
	mßmpsToGo
;

145 
	t∑Te°D©a
;

150 
	$∑ã°CÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

151 
‰amesPîBuf„r
,

152 
PaTime°amp
 
outTime
, *
u£rD©a
 )

154 
föished
;

155 
i
;

156 
numFømes
;

157 
∑Te°D©a
 *
d©a
 = (∑Te°D©a*)
u£rD©a
;

158 *
out
 = (*)
ouçutBuf„r
;

159 (Ë
öputBuf„r
;

160 (Ë
outTime
;

163 if–
d©a
->
ßmpsToGo
 < 
‰amesPîBuf„r
 )

165 
numFømes
 = 
d©a
->
ßmpsToGo
;

166 
föished
 = 1;

170 
numFømes
 = 
‰amesPîBuf„r
;

171 
föished
 = 0;

173  
i
=0; i<
numFømes
; i++ )

175 *
out
++ = 
	`Gíî©ePökNoi£
–&
d©a
->
À·Pök
 );

176 *
out
++ = 
	`Gíî©ePökNoi£
–&
d©a
->
rightPök
 );

178 
d©a
->
ßmpsToGo
 -
numFømes
;

179  
föished
;

180 
	}
}

182 
maö
();

183 
	$maö
()

185 
P‹tAudioSåóm
 *
°ªam
;

186 
PaEº‹
 
îr
;

187 
∑Te°D©a
 
d©a
;

188 
tŸÆSamps
;

190 
	`InôülizePökNoi£
–&
d©a
.
À·Pök
, 12 );

191 
	`InôülizePökNoi£
–&
d©a
.
rightPök
, 16 );

194 
i
;

195 
pök
;

196  
i
=0; i<20; i++ )

198 
pök
 = 
	`Gíî©ePökNoi£
–&
d©a
.
À·Pök
 );

199 
	`¥ötf
("Pök = %f\n", 
pök
 );

202 
d©a
.
ßmpsToGo
 = 
tŸÆSamps
 = 8*44100;

203 
îr
 = 
	`Pa_Inôülize
();

204 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

206 
îr
 = 
	`Pa_O≥nSåóm
(

207 &
°ªam
,

208 
∑NoDevi˚
,

210 
∑Flﬂt32
,

211 
NULL
,

212 
	`Pa_GëDeÁu…OuçutDevi˚ID
(),

214 
∑Flﬂt32
,

215 
NULL
,

219 
∑ClùOff
,

220 
∑ã°CÆlback
,

221 &
d©a
 );

222 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

224 
îr
 = 
	`Pa_SèπSåóm
–
°ªam
 );

225 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

226 
	`¥ötf
("Waiting for soundÅo finish.\n");

227  
	`Pa_SåómA˘ive
–
°ªam
 ) )

229 
	`Pa_SÀï
(100);

231 
îr
 = 
	`Pa_Clo£Såóm
–
°ªam
 );

232 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

233 #ifde‡
PINK_MEASURE


234 
	`¥ötf
("Pök mö = %f, max = %f\n", 
pökMö
, 
pökMax
 );

236 
	`Pa_Tîmö©e
();

238 
îr‹
:

239 
	`Pa_Tîmö©e
();

240 
	`Ârötf
–
°dîr
, "AnÉrror occured while usingÅheÖortaudio stream\n" );

241 
	`Ârötf
–
°dîr
, "Eº‹Çumbî: %d\n", 
îr
 );

242 
	`Ârötf
–
°dîr
, "Eº‹ mesßge: %s\n", 
	`Pa_GëEº‹Text
–
îr
 ) );

244 
	}
}

	@portaudio/pa_tests/patest_record.c

38 
	~<°dio.h
>

39 
	~<°dlib.h
>

40 
	~"p‹èudio.h
"

43 
	#SAMPLE_RATE
 (22050)

	)

44 
	#NUM_SECONDS
 (5)

	)

45 
	#NUM_CHANNELS
 (2)

	)

47 
	#DITHER_FLAG
 (0Ë

	)

48 
	#FRAMES_PER_BUFFER
 (1024)

	)

52 
	#PA_SAMPLE_TYPE
 
∑Flﬂt32


	)

53 
	tSAMPLE
;

54 
	#SAMPLE_SILENCE
 (0.0f)

	)

56 
	#PA_SAMPLE_TYPE
 
∑I¡16


	)

57 
	tSAMPLE
;

58 
	#SAMPLE_SILENCE
 (0)

	)

60 
	#PA_SAMPLE_TYPE
 
∑I¡8


	)

61 
	tSAMPLE
;

62 
	#SAMPLE_SILENCE
 (0)

	)

64 
	#PA_SAMPLE_TYPE
 
∑UI¡8


	)

65 
	tSAMPLE
;

66 
	#SAMPLE_SILENCE
 (128)

	)

72 
	m‰ameIndex
;

73 
	mmaxFømeIndex
;

74 
SAMPLE
 *
	mªc‹dedSam∂es
;

76 
	t∑Te°D©a
;

81 
	$ªc‹dCÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

82 
‰amesPîBuf„r
,

83 
PaTime°amp
 
outTime
, *
u£rD©a
 )

85 
∑Te°D©a
 *
d©a
 = (∑Te°D©a*)
u£rD©a
;

86 
SAMPLE
 *
Ωå
 = (SAMPLE*)
öputBuf„r
;

87 
SAMPLE
 *
w±r
 = &
d©a
->
ªc‹dedSam∂es
[d©a->
‰ameIndex
 * 
NUM_CHANNELS
];

88 
‰amesToCÆc
;

89 
i
;

90 
föished
;

91 
‰amesLe·
 = 
d©a
->
maxFømeIndex
 - d©a->
‰ameIndex
;

93 (Ë
ouçutBuf„r
;

94 (Ë
outTime
;

96 if–
‰amesLe·
 < 
‰amesPîBuf„r
 )

98 
‰amesToCÆc
 = 
‰amesLe·
;

99 
föished
 = 1;

103 
‰amesToCÆc
 = 
‰amesPîBuf„r
;

104 
föished
 = 0;

106 if–
öputBuf„r
 =
NULL
 )

108  
i
=0; i<
‰amesToCÆc
; i++ )

110 *
w±r
++ = 
SAMPLE_SILENCE
;

111 if–
NUM_CHANNELS
 =2 ) *
w±r
++ = 
SAMPLE_SILENCE
;

116  
i
=0; i<
‰amesToCÆc
; i++ )

118 *
w±r
++ = *
Ωå
++;

119 if–
NUM_CHANNELS
 =2 ) *
w±r
++ = *
Ωå
++;

122 
d©a
->
‰ameIndex
 +
‰amesToCÆc
;

123  
föished
;

124 
	}
}

130 
	$∂ayCÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

131 
‰amesPîBuf„r
,

132 
PaTime°amp
 
outTime
, *
u£rD©a
 )

134 
∑Te°D©a
 *
d©a
 = (∑Te°D©a*)
u£rD©a
;

135 
SAMPLE
 *
Ωå
 = &
d©a
->
ªc‹dedSam∂es
[d©a->
‰ameIndex
 * 
NUM_CHANNELS
];

136 
SAMPLE
 *
w±r
 = (SAMPLE*)
ouçutBuf„r
;

137 
i
;

138 
föished
;

139 
‰amesLe·
 = 
d©a
->
maxFømeIndex
 - d©a->
‰ameIndex
;

140 (Ë
öputBuf„r
;

141 (Ë
outTime
;

143 if–
‰amesLe·
 < 
‰amesPîBuf„r
 )

146  
i
=0; i<
‰amesLe·
; i++ )

148 *
w±r
++ = *
Ωå
++;

149 if–
NUM_CHANNELS
 =2 ) *
w±r
++ = *
Ωå
++;

151  ; 
i
<
‰amesPîBuf„r
; i++ )

153 *
w±r
++ = 0;

154 if–
NUM_CHANNELS
 =2 ) *
w±r
++ = 0;

156 
d©a
->
‰ameIndex
 +
‰amesLe·
;

157 
föished
 = 1;

161  
i
=0; i<
‰amesPîBuf„r
; i++ )

163 *
w±r
++ = *
Ωå
++;

164 if–
NUM_CHANNELS
 =2 ) *
w±r
++ = *
Ωå
++;

166 
d©a
->
‰ameIndex
 +
‰amesPîBuf„r
;

167 
föished
 = 0;

169  
föished
;

170 
	}
}

173 
maö
();

174 
	$maö
()

176 
P‹tAudioSåóm
 *
°ªam
;

177 
PaEº‹
 
îr
;

178 
∑Te°D©a
 
d©a
;

179 
i
;

180 
tŸÆFømes
;

181 
numSam∂es
;

182 
numByãs
;

183 
SAMPLE
 
max
, 
avîage
, 
vÆ
;

184 
	`¥ötf
("∑ã°_ªc‹d.c\n"); 
	`fÊush
(
°dout
);

186 
d©a
.
maxFømeIndex
 = 
tŸÆFømes
 = 
NUM_SECONDS
 * 
SAMPLE_RATE
;

187 
d©a
.
‰ameIndex
 = 0;

188 
numSam∂es
 = 
tŸÆFømes
 * 
NUM_CHANNELS
;

190 
numByãs
 = 
numSam∂es
 * (
SAMPLE
);

191 
d©a
.
ªc‹dedSam∂es
 = (
SAMPLE
 *Ë
	`mÆloc
–
numByãs
 );

192 if–
d©a
.
ªc‹dedSam∂es
 =
NULL
 )

194 
	`¥ötf
("CouldÇotállocateÑecordárray.\n");

195 
	`exô
(1);

197  
i
=0; i<
numSam∂es
; i++ ) 
d©a
.
ªc‹dedSam∂es
[i] = 0;

199 
îr
 = 
	`Pa_Inôülize
();

200 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

203 
îr
 = 
	`Pa_O≥nSåóm
(

204 &
°ªam
,

205 
	`Pa_GëDeÁu…I≈utDevi˚ID
(),

206 
NUM_CHANNELS
,

207 
PA_SAMPLE_TYPE
,

208 
NULL
,

209 
∑NoDevi˚
,

211 
PA_SAMPLE_TYPE
,

212 
NULL
,

213 
SAMPLE_RATE
,

214 
FRAMES_PER_BUFFER
,

217 
ªc‹dCÆlback
,

218 &
d©a
 );

219 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

221 
îr
 = 
	`Pa_SèπSåóm
–
°ªam
 );

222 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

223 
	`¥ötf
("NowÑec‹dög!!\n"); 
	`fÊush
(
°dout
);

225  
	`Pa_SåómA˘ive
–
°ªam
 ) )

227 
	`Pa_SÀï
(1000);

228 
	`¥ötf
("ödex = %d\n", 
d©a
.
‰ameIndex
 ); 
	`fÊush
(
°dout
);

231 
îr
 = 
	`Pa_Clo£Såóm
–
°ªam
 );

232 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

235 
max
 = 0;

236 
avîage
 = 0;

237  
i
=0; i<
numSam∂es
; i++ )

239 
vÆ
 = 
d©a
.
ªc‹dedSam∂es
[
i
];

240 if–
vÆ
 < 0 ) val = -val;

241 if–
vÆ
 > 
max
 )

243 
max
 = 
vÆ
;

245 
avîage
 +
vÆ
;

248 
avîage
 =ávîagê/ 
numSam∂es
;

250 if–
PA_SAMPLE_TYPE
 =
∑Flﬂt32
 )

252 
	`¥ötf
("ßm∂êmaxám∂ôudê%f\n", 
max
 );

253 
	`¥ötf
("ßm∂êavîagê%f\n", 
avîage
 );

257 
	`¥ötf
("ßm∂êmaxám∂ôudê%d\n", 
max
 );

258 
	`¥ötf
("ßm∂êavîagê%d\n", 
avîage
 );

264 
FILE
 *
fid
;

265 
fid
 = 
	`f›í
("recorded.raw", "wb");

266 if–
fid
 =
NULL
 )

268 
	`¥ötf
("CouldÇot open file.");

272 
	`fwrôe
–
d©a
.
ªc‹dedSam∂es
, 
NUM_CHANNELS
 * (
SAMPLE
), 
tŸÆFømes
, 
fid
 );

273 
	`f˛o£
–
fid
 );

274 
	`¥ötf
("Wrote dataÅo 'recorded.raw'\n");

280 
d©a
.
‰ameIndex
 = 0;

281 
	`¥ötf
("BegöÖœyback.\n"); 
	`fÊush
(
°dout
);

282 
îr
 = 
	`Pa_O≥nSåóm
(

283 &
°ªam
,

284 
∑NoDevi˚
,

286 
PA_SAMPLE_TYPE
,

287 
NULL
,

288 
	`Pa_GëDeÁu…OuçutDevi˚ID
(),

289 
NUM_CHANNELS
,

290 
PA_SAMPLE_TYPE
,

291 
NULL
,

292 
SAMPLE_RATE
,

293 
FRAMES_PER_BUFFER
,

295 
∑ClùOff
,

296 
∂ayCÆlback
,

297 &
d©a
 );

298 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

300 if–
°ªam
 )

302 
îr
 = 
	`Pa_SèπSåóm
–
°ªam
 );

303 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

304 
	`¥ötf
("Waôög f‹ÖœybackÅÿföish.\n"); 
	`fÊush
(
°dout
);

306  
	`Pa_SåómA˘ive
–
°ªam
 ) ) 
	`Pa_SÀï
(100);

308 
îr
 = 
	`Pa_Clo£Såóm
–
°ªam
 );

309 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

310 
	`¥ötf
("D⁄e.\n"); 
	`fÊush
(
°dout
);

312 
	`‰ì
–
d©a
.
ªc‹dedSam∂es
 );

314 
	`Pa_Tîmö©e
();

317 
îr‹
:

318 
	`Pa_Tîmö©e
();

319 
	`Ârötf
–
°dîr
, "AnÉrror occured while usingÅheÖortaudio stream\n" );

320 
	`Ârötf
–
°dîr
, "Eº‹Çumbî: %d\n", 
îr
 );

321 
	`Ârötf
–
°dîr
, "Eº‹ mesßge: %s\n", 
	`Pa_GëEº‹Text
–
îr
 ) );

323 
	}
}

	@portaudio/pa_tests/patest_ringmix.c

3 
	~"°dio.h
"

4 
	~"p‹èudio.h
"

6 
	$myCÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

7 
‰amesPîBuf„r
, 
PaTime°amp
 
outTime
, *
u£rD©a
 )

9 *
out
 = (*Ë
ouçutBuf„r
;

10 *
ö
 = (*Ë
öputBuf„r
;

11 
À·I≈ut
, 
rightI≈ut
;

12 
i
;

13 if–
öputBuf„r
 =
NULL
 )  0;

15  
i
=0; i<
‰amesPîBuf„r
; i++ )

17 
À·I≈ut
 = *
ö
++;

18 
rightI≈ut
 = *
ö
++;

19 *
out
++ = 
À·I≈ut
 * 
rightI≈ut
;

20 *
out
++ = 0.5‡* (
À·I≈ut
 + 
rightI≈ut
);

23 
	}
}

25 
	$maö
()

27 
P‹tAudioSåóm
 *
°ªam
;

28 
	`Pa_Inôülize
();

29 
	`Pa_O≥nDeÁu…Såóm
(

30 &
°ªam
,

32 
∑Flﬂt32
, 44100.0,

34 
myCÆlback
, 
NULL
 );

35 
	`Pa_SèπSåóm
–
°ªam
 );

36 
	`Pa_SÀï
( 10000 );

37 
	`Pa_St›Såóm
–
°ªam
 );

38 
	`Pa_Clo£Såóm
–
°ªam
 );

39 
	`Pa_Tîmö©e
();

41 
	}
}

	@portaudio/pa_tests/patest_saw.c

36 
	~<°dio.h
>

37 
	~<m©h.h
>

38 
	~"p‹èudio.h
"

39 
	#NUM_SECONDS
 (4)

	)

40 
	#SAMPLE_RATE
 (44100)

	)

43 
	mÀ·_pha£
;

44 
	mright_pha£
;

46 
	t∑Te°D©a
;

51 
	$∑ã°CÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

52 
‰amesPîBuf„r
,

53 
PaTime°amp
 
outTime
, *
u£rD©a
 )

56 
∑Te°D©a
 *
d©a
 = (∑Te°D©a*)
u£rD©a
;

57 *
out
 = (*)
ouçutBuf„r
;

58 
i
;

59 (Ë
outTime
;

60 (Ë
öputBuf„r
;

62  
i
=0; i<
‰amesPîBuf„r
; i++ )

64 *
out
++ = 
d©a
->
À·_pha£
;

65 *
out
++ = 
d©a
->
right_pha£
;

67 
d©a
->
À·_pha£
 += 0.01f;

69 if–
d©a
->
À·_pha£
 >= 1.0f ) data->left_phase -= 2.0f;

71 
d©a
->
right_pha£
 += 0.03f;

72 if–
d©a
->
right_pha£
 >= 1.0f ) data->right_phase -= 2.0f;

75 
	}
}

77 
∑Te°D©a
 
	gd©a
;

78 
maö
();

79 
	$maö
()

81 
P‹tAudioSåóm
 *
°ªam
;

82 
PaEº‹
 
îr
;

83 
	`¥ötf
("PortAudio Test: output sawtooth wave.\n");

85 
d©a
.
À·_pha£
 = d©a.
right_pha£
 = 0.0;

87 
îr
 = 
	`Pa_Inôülize
();

88 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

90 
îr
 = 
	`Pa_O≥nDeÁu…Såóm
(

91 &
°ªam
,

94 
∑Flﬂt32
,

95 
SAMPLE_RATE
,

98 
∑ã°CÆlback
,

99 &
d©a
 );

100 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

101 
îr
 = 
	`Pa_SèπSåóm
–
°ªam
 );

102 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

104 
	`Pa_SÀï
(
NUM_SECONDS
*1000);

105 
îr
 = 
	`Pa_St›Såóm
–
°ªam
 );

106 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

107 
îr
 = 
	`Pa_Clo£Såóm
–
°ªam
 );

108 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

109 
	`Pa_Tîmö©e
();

110 
	`¥ötf
("Test finished.\n");

111  
îr
;

112 
îr‹
:

113 
	`Pa_Tîmö©e
();

114 
	`Ârötf
–
°dîr
, "AnÉrror occured while usingÅheÖortaudio stream\n" );

115 
	`Ârötf
–
°dîr
, "Eº‹Çumbî: %d\n", 
îr
 );

116 
	`Ârötf
–
°dîr
, "Eº‹ mesßge: %s\n", 
	`Pa_GëEº‹Text
–
îr
 ) );

117  
îr
;

118 
	}
}

	@portaudio/pa_tests/patest_sine.c

38 
	~<°dio.h
>

39 
	~<m©h.h
>

40 
	~"p‹èudio.h
"

42 
	#NUM_SECONDS
 (10)

	)

43 
	#SAMPLE_RATE
 (44100)

	)

44 
	#AMPLITUDE
 (0.9)

	)

45 
	#FRAMES_PER_BUFFER
 (64)

	)

46 
	#OUTPUT_DEVICE
 
	`Pa_GëDeÁu…OuçutDevi˚ID
()

	)

49 #i‚de‡
M_PI


50 
	#M_PI
 (3.14159265)

	)

53 
	#TABLE_SIZE
 (200)

	)

56 
	msöe
[
TABLE_SIZE
];

57 
	mÀ·_pha£
;

58 
	mright_pha£
;

60 
	t∑Te°D©a
;

66 
	$∑ã°CÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

67 
‰amesPîBuf„r
,

68 
PaTime°amp
 
outTime
, *
u£rD©a
 )

70 
∑Te°D©a
 *
d©a
 = (∑Te°D©a*)
u£rD©a
;

71 *
out
 = (*)
ouçutBuf„r
;

72 
i
;

73 
föished
 = 0;

74 (Ë
outTime
;

75 (Ë
öputBuf„r
;

76  
i
=0; i<
‰amesPîBuf„r
; i++ )

78 *
out
++ = 
d©a
->
söe
[d©a->
À·_pha£
];

79 *
out
++ = 
d©a
->
söe
[d©a->
right_pha£
];

80 
d©a
->
À·_pha£
 += 1;

81 if–
d©a
->
À·_pha£
 >
TABLE_SIZE
 ) data->left_phase -= TABLE_SIZE;

82 
d©a
->
right_pha£
 += 3;

83 if–
d©a
->
right_pha£
 >
TABLE_SIZE
 ) data->right_phase -= TABLE_SIZE;

85  
föished
;

86 
	}
}

89 
maö
();

90 
	$maö
()

92 
P‹tAudioSåóm
 *
°ªam
;

93 
PaEº‹
 
îr
;

94 
∑Te°D©a
 
d©a
;

95 
i
;

96 
	`¥ötf
("PortAudio Test: output sine wave. SR = %d, BufSize = %d, devID = %d\n",

97 
SAMPLE_RATE
, 
FRAMES_PER_BUFFER
, 
OUTPUT_DEVICE
);

99  
i
=0; i<
TABLE_SIZE
; i++ )

101 
d©a
.
söe
[
i
] = (Ë(
AMPLITUDE
 * 
	`sö
–(()i/()
TABLE_SIZE
Ë* 
M_PI
 * 2. ));

103 
d©a
.
À·_pha£
 = d©a.
right_pha£
 = 0;

104 
îr
 = 
	`Pa_Inôülize
();

105 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

106 
îr
 = 
	`Pa_O≥nSåóm
(

107 &
°ªam
,

108 
∑NoDevi˚
,

110 
∑Flﬂt32
,

111 
NULL
,

112 
OUTPUT_DEVICE
,

114 
∑Flﬂt32
,

115 
NULL
,

116 
SAMPLE_RATE
,

117 
FRAMES_PER_BUFFER
,

119 
∑ClùOff
,

120 
∑ã°CÆlback
,

121 &
d©a
 );

122 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

123 
îr
 = 
	`Pa_SèπSåóm
–
°ªam
 );

124 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

125 
	`¥ötf
("Pœy f‹ %d sec⁄ds.\n", 
NUM_SECONDS
 ); 
	`fÊush
(
°dout
);

126 
	`Pa_SÀï
–
NUM_SECONDS
 * 1000 );

128 
îr
 = 
	`Pa_St›Såóm
–
°ªam
 );

129 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

130 
îr
 = 
	`Pa_Clo£Såóm
–
°ªam
 );

131 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

132 
	`Pa_Tîmö©e
();

133 
	`¥ötf
("Test finished.\n");

134  
îr
;

135 
îr‹
:

136 
	`Pa_Tîmö©e
();

137 
	`Ârötf
–
°dîr
, "AnÉrror occured while usingÅheÖortaudio stream\n" );

138 
	`Ârötf
–
°dîr
, "Eº‹Çumbî: %d\n", 
îr
 );

139 
	`Ârötf
–
°dîr
, "Eº‹ mesßge: %s\n", 
	`Pa_GëEº‹Text
–
îr
 ) );

140  
îr
;

141 
	}
}

	@portaudio/pa_tests/patest_sine8.c

37 
	~<°dio.h
>

38 
	~<m©h.h
>

39 
	~"p‹èudio.h
"

40 
	#NUM_SECONDS
 (8)

	)

41 
	#SAMPLE_RATE
 (44100)

	)

42 
	#TEST_UNSIGNED
 (1)

	)

43 #i‡
TEST_UNSIGNED


44 
	#TEST_FORMAT
 
∑UI¡8


	)

46 
	#TEST_FORMAT
 
∑I¡8


	)

48 #i‚de‡
M_PI


49 
	#M_PI
 (3.14159265)

	)

51 
	#TABLE_SIZE
 (200)

	)

54 #i‡
TEST_UNSIGNED


55 
	msöe
[
TABLE_SIZE
];

57 
	msöe
[
TABLE_SIZE
];

59 
	mÀ·_pha£
;

60 
	mright_pha£
;

61 
	m‰amesToGo
;

63 
	t∑Te°D©a
;

68 
	$∑ã°CÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

69 
‰amesPîBuf„r
,

70 
PaTime°amp
 
outTime
, *
u£rD©a
 )

72 
∑Te°D©a
 *
d©a
 = (∑Te°D©a*)
u£rD©a
;

73 *
out
 = (*)
ouçutBuf„r
;

74 
i
;

75 
‰amesToCÆc
;

76 
föished
 = 0;

77 (Ë
outTime
;

78 (Ë
öputBuf„r
;

80 if–
d©a
->
‰amesToGo
 < 
‰amesPîBuf„r
 )

82 
‰amesToCÆc
 = 
d©a
->
‰amesToGo
;

83 
d©a
->
‰amesToGo
 = 0;

84 
föished
 = 1;

88 
‰amesToCÆc
 = 
‰amesPîBuf„r
;

89 
d©a
->
‰amesToGo
 -
‰amesPîBuf„r
;

92  
i
=0; i<
‰amesToCÆc
; i++ )

94 *
out
++ = 
d©a
->
söe
[d©a->
À·_pha£
];

95 *
out
++ = 
d©a
->
söe
[d©a->
right_pha£
];

96 
d©a
->
À·_pha£
 += 1;

97 if–
d©a
->
À·_pha£
 >
TABLE_SIZE
 ) data->left_phase -= TABLE_SIZE;

98 
d©a
->
right_pha£
 += 3;

99 if–
d©a
->
right_pha£
 >
TABLE_SIZE
 ) data->right_phase -= TABLE_SIZE;

102  ; 
i
<()
‰amesPîBuf„r
; i++ )

104 #i‡
TEST_UNSIGNED


105 *
out
++ = () 0x80;

106 *
out
++ = () 0x80;

108 *
out
++ = 0;

109 *
out
++ = 0;

113  
föished
;

114 
	}
}

116 
maö
();

117 
	$maö
()

119 
P‹tAudioSåóm
 *
°ªam
;

120 
PaEº‹
 
îr
;

121 
∑Te°D©a
 
d©a
;

122 
i
;

123 
tŸÆSamps
;

124 #i‡
TEST_UNSIGNED


125 
	`¥ötf
("PortAudio Test: output UNsigned 8 bit sine wave.\n");

127 
	`¥ötf
("PortAudio Test: output signed 8 bit sine wave.\n");

130  
i
=0; i<
TABLE_SIZE
; i++ )

132 
d©a
.
söe
[
i
] = (Ë(127.0 * 
	`sö
–(()i/()
TABLE_SIZE
Ë* 
M_PI
 * 2. ));

133 #i‡
TEST_UNSIGNED


134 
d©a
.
söe
[
i
] += () 0x80;

138 
d©a
.
À·_pha£
 = d©a.
right_pha£
 = 0;

139 
d©a
.
‰amesToGo
 = 
tŸÆSamps
 = 
NUM_SECONDS
 * 
SAMPLE_RATE
;

140 
îr
 = 
	`Pa_Inôülize
();

141 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

142 
îr
 = 
	`Pa_O≥nSåóm
(

143 &
°ªam
,

144 
∑NoDevi˚
,

146 
TEST_FORMAT
,

147 
NULL
,

148 
	`Pa_GëDeÁu…OuçutDevi˚ID
(),

150 
TEST_FORMAT
,

151 
NULL
,

152 
SAMPLE_RATE
,

155 
∑ClùOff
,

156 
∑ã°CÆlback
,

157 &
d©a
 );

158 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

159 
îr
 = 
	`Pa_SèπSåóm
–
°ªam
 );

160 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

162  
	`Pa_SåómTime
–
°ªam
 ) < (
tŸÆSamps
/2ËË
	`Pa_SÀï
(10);

164 
îr
 = 
	`Pa_St›Såóm
–
°ªam
 );

165 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

166 
	`¥ötf
("Pause for 2 seconds.\n");

167 
	`Pa_SÀï
( 2000 );

169 
îr
 = 
	`Pa_SèπSåóm
–
°ªam
 );

170 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

171 
	`¥ötf
("Waiting for soundÅo finish.\n");

172  
	`Pa_SåómA˘ive
–
°ªam
 ) ) 
	`Pa_SÀï
(10);

173 
îr
 = 
	`Pa_Clo£Såóm
–
°ªam
 );

174 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

175 
	`Pa_Tîmö©e
();

176 
	`¥ötf
("Test finished.\n");

177  
îr
;

178 
îr‹
:

179 
	`Pa_Tîmö©e
();

180 
	`Ârötf
–
°dîr
, "AnÉrror occured while usingÅheÖortaudio stream\n" );

181 
	`Ârötf
–
°dîr
, "Eº‹Çumbî: %d\n", 
îr
 );

182 
	`Ârötf
–
°dîr
, "Eº‹ mesßge: %s\n", 
	`Pa_GëEº‹Text
–
îr
 ) );

183  
îr
;

184 
	}
}

	@portaudio/pa_tests/patest_sine_time.c

40 
	~<°dio.h
>

41 
	~<m©h.h
>

42 
	~"p‹èudio.h
"

43 
	#NUM_SECONDS
 (8)

	)

44 
	#SAMPLE_RATE
 (44100)

	)

45 
	#FRAMES_PER_BUFFER
 (64)

	)

46 
	#NUM_BUFFERS
 (0)

	)

47 #i‚de‡
M_PI


48 
	#M_PI
 (3.14159265)

	)

50 
	#TABLE_SIZE
 (200)

	)

53 
	msöe
[
TABLE_SIZE
];

54 
	mÀ·_pha£
;

55 
	mright_pha£
;

56 
	m‰amesToGo
;

57 vﬁ©ûê
PaTime°amp
 
	moutTime
;

59 
	t∑Te°D©a
;

64 
	$∑ã°CÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

65 
‰amesPîBuf„r
,

66 
PaTime°amp
 
outTime
, *
u£rD©a
 )

68 
∑Te°D©a
 *
d©a
 = (∑Te°D©a*)
u£rD©a
;

69 *
out
 = (*)
ouçutBuf„r
;

70 
i
;

71 
‰amesToCÆc
;

72 
föished
 = 0;

73 (Ë
outTime
;

74 (Ë
öputBuf„r
;

76 
d©a
->
outTime
 = outTime;

78 if–
d©a
->
‰amesToGo
 < 
‰amesPîBuf„r
 )

80 
‰amesToCÆc
 = 
d©a
->
‰amesToGo
;

81 
d©a
->
‰amesToGo
 = 0;

82 
föished
 = 1;

86 
‰amesToCÆc
 = 
‰amesPîBuf„r
;

87 
d©a
->
‰amesToGo
 -
‰amesPîBuf„r
;

90  
i
=0; i<
‰amesToCÆc
; i++ )

92 *
out
++ = 
d©a
->
söe
[d©a->
À·_pha£
];

93 *
out
++ = 
d©a
->
söe
[d©a->
right_pha£
];

94 
d©a
->
À·_pha£
 += 1;

95 if–
d©a
->
À·_pha£
 >
TABLE_SIZE
 ) data->left_phase -= TABLE_SIZE;

96 
d©a
->
right_pha£
 += 3;

97 if–
d©a
->
right_pha£
 >
TABLE_SIZE
 ) data->right_phase -= TABLE_SIZE;

100  ; 
i
<()
‰amesPîBuf„r
; i++ )

102 *
out
++ = 0;

103 *
out
++ = 0;

105  
föished
;

106 
	}
}

108 
Rï‹tSåómTime
–
P‹tAudioSåóm
 *
°ªam
, 
∑Te°D©a
 *
d©a
 );

109 
	$Rï‹tSåómTime
–
P‹tAudioSåóm
 *
°ªam
, 
∑Te°D©a
 *
d©a
 )

111 
PaTime°amp
 
°ªamTime
, 
œãncy
, 
outTime
;

113 
°ªamTime
 = 
	`Pa_SåómTime
–
°ªam
 );

114 
outTime
 = 
d©a
->outTime;

115 if–
outTime
 < 0.0 )

117 
	`¥ötf
("SåómÅimê%8.1f\n", 
°ªamTime
 );

121 
œãncy
 = 
outTime
 - 
°ªamTime
;

122 
	`¥ötf
("StreamÅime = %8.1f, outTime = %8.1f,Üatency = %8.1f\n",

123 
°ªamTime
, 
outTime
, 
œãncy
 );

125 
	`fÊush
(
°dout
);

126 
	}
}

129 
maö
();

130 
	$maö
()

132 
P‹tAudioSåóm
 *
°ªam
;

133 
PaEº‹
 
îr
;

134 
∑Te°D©a
 
DATA
;

135 
i
;

136 
tŸÆSamps
;

137 
	`¥ötf
("P‹tAudiÿTe°: ouçuàsöêwave. SR = %d, BufSizê%d\n", 
SAMPLE_RATE
, 
FRAMES_PER_BUFFER
);

139  
i
=0; i<
TABLE_SIZE
; i++ )

141 
DATA
.
söe
[
i
] = (Ë
	`sö
–(()i/()
TABLE_SIZE
Ë* 
M_PI
 * 2. );

143 
DATA
.
À·_pha£
 = DATA.
right_pha£
 = 0;

144 
DATA
.
‰amesToGo
 = 
tŸÆSamps
 = 
NUM_SECONDS
 * 
SAMPLE_RATE
;

145 
îr
 = 
	`Pa_Inôülize
();

146 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

147 
îr
 = 
	`Pa_O≥nSåóm
(

148 &
°ªam
,

149 
∑NoDevi˚
,

151 
∑Flﬂt32
,

152 
NULL
,

153 
	`Pa_GëDeÁu…OuçutDevi˚ID
(),

155 
∑Flﬂt32
,

156 
NULL
,

157 
SAMPLE_RATE
,

158 
FRAMES_PER_BUFFER
,

159 
NUM_BUFFERS
,

160 
∑ClùOff
,

161 
∑ã°CÆlback
,

162 &
DATA
 );

163 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

165 
DATA
.
outTime
 = -1.0;

166 
îr
 = 
	`Pa_SèπSåóm
–
°ªam
 );

167 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

170 
	`¥ötf
("Pœy f‹ %d sec⁄ds.\n", 
NUM_SECONDS
/2 ); 
	`fÊush
(
°dout
);

173 
	`Rï‹tSåómTime
–
°ªam
, &
DATA
 );

174 
	`Pa_SÀï
(100);

175 }  
	`Pa_SåómTime
–
°ªam
 ) < (
tŸÆSamps
/2) );

178 
îr
 = 
	`Pa_St›Såóm
–
°ªam
 );

179 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

180 
	`¥ötf
("Pau£ f‹ 2 sec⁄ds.\n"); 
	`fÊush
(
°dout
);

181 
	`Pa_SÀï
( 2000 );

183 
DATA
.
outTime
 = -1.0;

184 
îr
 = 
	`Pa_SèπSåóm
–
°ªam
 );

185 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

187 
	`¥ötf
("Pœy u¡û sound i†föished.\n"); 
	`fÊush
(
°dout
);

190 
	`Rï‹tSåómTime
–
°ªam
, &
DATA
 );

191 
	`Pa_SÀï
(100);

192 }  
	`Pa_SåómA˘ive
–
°ªam
 ) );

194 
îr
 = 
	`Pa_Clo£Såóm
–
°ªam
 );

195 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

196 
	`Pa_Tîmö©e
();

197 
	`¥ötf
("Test finished.\n");

198  
îr
;

199 
îr‹
:

200 
	`Pa_Tîmö©e
();

201 
	`Ârötf
–
°dîr
, "AnÉrror occured while usingÅheÖortaudio stream\n" );

202 
	`Ârötf
–
°dîr
, "Eº‹Çumbî: %d\n", 
îr
 );

203 
	`Ârötf
–
°dîr
, "Eº‹ mesßge: %s\n", 
	`Pa_GëEº‹Text
–
îr
 ) );

204  
îr
;

205 
	}
}

	@portaudio/pa_tests/patest_stop.c

44 
	~<°dio.h
>

45 
	~<m©h.h
>

46 
	~"p‹èudio.h
"

47 
	#OUTPUT_DEVICE
 (
	`Pa_GëDeÁu…OuçutDevi˚ID
())

	)

48 
	#SLEEP_DUR
 (200)

	)

49 
	#SAMPLE_RATE
 (44100)

	)

50 
	#FRAMES_PER_BUFFER
 (256)

	)

51 
	#LATENCY_MSEC
 (3000)

	)

52 
	#NUM_BUFFERS
 ((
LATENCY_MSEC
 * 
SAMPLE_RATE
Ë/ (
FRAMES_PER_BUFFER
 * 1000))

	)

53 
	#FRAMES_PER_NOTE
 (
SAMPLE_RATE
/2)

	)

54 
	#MAX_REPEATS
 (2)

	)

55 
	#FUNDAMENTAL
 (400.0‡/ 
SAMPLE_RATE
)

	)

56 
	#NOTE_0
 (
FUNDAMENTAL
 * 1.0‡/ 1.0f)

	)

57 
	#NOTE_1
 (
FUNDAMENTAL
 * 5.0‡/ 4.0f)

	)

58 
	#NOTE_2
 (
FUNDAMENTAL
 * 4.0‡/ 3.0f)

	)

59 
	#NOTE_3
 (
FUNDAMENTAL
 * 3.0‡/ 2.0f)

	)

60 
	#NOTE_4
 (
FUNDAMENTAL
 * 2.0‡/ 1.0f)

	)

61 
	#MODE_FINISH
 (0)

	)

62 
	#MODE_STOP
 (1)

	)

63 
	#MODE_ABORT
 (2)

	)

64 #i‚de‡
M_PI


65 
	#M_PI
 (3.14159265)

	)

67 
	#TABLE_SIZE
 (400)

	)

70 
	mwavef‹m
[
TABLE_SIZE
 + 1];

71 
	mpha£_ö¸emít
;

72 
	mpha£
;

73 *
	mtu√
;

74 
	mnŸesPîTu√
;

75 
	m‰ameCou¡î
;

76 
	mnŸeCou¡î
;

77 
	mª≥©Cou¡î
;

78 
PaTime°amp
 
	moutTime
;

79 
	m°›Mode
;

80 
	md⁄e
;

82 
	t∑Te°D©a
;

84 
Te°St›Mode
–
∑Te°D©a
 *
d©a
 );

85 
LookupWavef‹m
–
∑Te°D©a
 *
d©a
, 
pha£
 );

90 
	$LookupWavef‹m
–
∑Te°D©a
 *
d©a
, 
pha£
 )

92 
fIndex
 = 
pha£
*
TABLE_SIZE
;

93 
ödex
 = (Ë
fIndex
;

94 
‰a˘
 = 
fIndex
 - 
ödex
;

95 
lo
 = 
d©a
->
wavef‹m
[
ödex
];

96 
hi
 = 
d©a
->
wavef‹m
[
ödex
+1];

97 
vÆ
 = 
lo
 + 
‰a˘
*(
hi
-lo);

98  
vÆ
;

99 
	}
}

104 
	$∑ã°CÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

105 
‰amesPîBuf„r
,

106 
PaTime°amp
 
outTime
, *
u£rD©a
 )

108 
∑Te°D©a
 *
d©a
 = (∑Te°D©a*)
u£rD©a
;

109 *
out
 = (*)
ouçutBuf„r
;

110 
vÆue
;

111 
i
 = 0;

112 
föished
 = 0;

113 (Ë
outTime
;

114 (Ë
öputBuf„r
;

116 
d©a
->
outTime
 = outTime;

117 if–!
d©a
->
d⁄e
 )

119  
i
=0; i<
‰amesPîBuf„r
; i++ )

122 if–
d©a
->
‰ameCou¡î
 >
FRAMES_PER_NOTE
 )

124 
d©a
->
nŸeCou¡î
 += 1;

125 
d©a
->
‰ameCou¡î
 = 0;

127 if–
d©a
->
nŸeCou¡î
 >d©a->
nŸesPîTu√
 )

129 
d©a
->
nŸeCou¡î
 = 0;

130 
d©a
->
ª≥©Cou¡î
 += 1;

132 if–
d©a
->
ª≥©Cou¡î
 >
MAX_REPEATS
 )

134 
d©a
->
d⁄e
 = 1;

135 if–
d©a
->
°›Mode
 =
MODE_FINISH
 )

137 
föished
 = 1;

142 
d©a
->
pha£_ö¸emít
 = d©a->
tu√
[d©a->
nŸeCou¡î
];

144 
vÆue
 = 
	`LookupWavef‹m
(
d©a
, d©a->
pha£
);

145 *
out
++ = 
vÆue
;

146 *
out
++ = 
vÆue
;

147 
d©a
->
pha£
 +d©a->
pha£_ö¸emít
;

148 if–
d©a
->
pha£
 >= 1.0f ) data->phase -= 1.0f;

150 
d©a
->
‰ameCou¡î
 += 1;

154  ; 
i
<
‰amesPîBuf„r
; i++ )

156 *
out
++ = 0;

157 *
out
++ = 0;

159  
föished
;

160 
	}
}

162 
maö
();

163 
	$maö
()

165 
∑Te°D©a
 
DATA
;

166 
i
;

167 
sim∂eTu√
[] = { 
NOTE_0
, 
NOTE_1
, 
NOTE_2
, 
NOTE_3
, 
NOTE_4
, NOTE_3, NOTE_2, NOTE_1 };

168 
	`¥ötf
("P‹tAudiÿTe°:Öœy s⁄gándÅe° st›pög.ásk f‹ %d buf„rs\n", 
NUM_BUFFERS
 );

170  
i
=0; i<
TABLE_SIZE
; i++ )

172 
DATA
.
wavef‹m
[
i
] = () (

173 (0.2 * 
	`sö
–(()
i
/()
TABLE_SIZE
Ë* 
M_PI
 * 2. )) +

174 (0.2 * 
	`sö
–(()(3*
i
)/()
TABLE_SIZE
Ë* 
M_PI
 * 2. )) +

175 (0.1 * 
	`sö
–(()(5*
i
)/()
TABLE_SIZE
Ë* 
M_PI
 * 2. ))

178 
DATA
.
wavef‹m
[
TABLE_SIZE
] = DATA.waveform[0];

179 
DATA
.
tu√
 = &
sim∂eTu√
[0];

180 
DATA
.
nŸesPîTu√
 = (
sim∂eTu√
) / ();

181 
	`¥ötf
("Test MODE_FINISH - callbackÑeturns 1.\n");

182 
	`¥ötf
("Should hó∏ítúê%dÇŸêtu√ÑïóãdÅwi˚.\n", 
DATA
.
nŸesPîTu√
);

183 
DATA
.
°›Mode
 = 
MODE_FINISH
;

184 if–
	`Te°St›Mode
–&
DATA
 ) !
∑NoEº‹
 )

186 
	`¥ötf
("Test of MODE_FINISH failed!\n");

187 
îr‹
;

189 
	`¥ötf
("Test MODE_STOP - stop when song is done.\n");

190 
	`¥ötf
("Should hó∏ítúê%dÇŸêtu√ÑïóãdÅwi˚.\n", 
DATA
.
nŸesPîTu√
);

191 
DATA
.
°›Mode
 = 
MODE_STOP
;

192 if–
	`Te°St›Mode
–&
DATA
 ) !
∑NoEº‹
 )

194 
	`¥ötf
("Test of MODE_STOP failed!\n");

195 
îr‹
;

198 
	`¥ötf
("Test MODE_ABORT -ábort immediately.\n");

199 
	`¥ötf
("Should hó∏œ°Ñïëôi⁄ cuàsh‹àby %d m£c.\n", 
LATENCY_MSEC
);

200 
DATA
.
°›Mode
 = 
MODE_ABORT
;

201 if–
	`Te°St›Mode
–&
DATA
 ) !
∑NoEº‹
 )

203 
	`¥ötf
("Test of MODE_ABORT failed!\n");

204 
îr‹
;

207 
îr‹
:

209 
	}
}

211 
	$Te°St›Mode
–
∑Te°D©a
 *
d©a
 )

213 
P‹tAudioSåóm
 *
°ªam
;

214 
PaEº‹
 
îr
;

215 
d©a
->
d⁄e
 = 0;

216 
d©a
->
pha£
 = 0.0;

217 
d©a
->
‰ameCou¡î
 = 0;

218 
d©a
->
nŸeCou¡î
 = 0;

219 
d©a
->
ª≥©Cou¡î
 = 0;

220 
d©a
->
pha£_ö¸emít
 = d©a->
tu√
[d©a->
nŸeCou¡î
];

221 
îr
 = 
	`Pa_Inôülize
();

222 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

223 
îr
 = 
	`Pa_O≥nSåóm
(

224 &
°ªam
,

225 
∑NoDevi˚
,

227 
∑Flﬂt32
,

228 
NULL
,

229 
OUTPUT_DEVICE
,

231 
∑Flﬂt32
,

232 
NULL
,

233 
SAMPLE_RATE
,

234 
FRAMES_PER_BUFFER
,

235 
NUM_BUFFERS
,

236 
∑ClùOff
,

237 
∑ã°CÆlback
,

238 
d©a
 );

239 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

240 
îr
 = 
	`Pa_SèπSåóm
–
°ªam
 );

241 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

242 if–
d©a
->
°›Mode
 =
MODE_FINISH
 )

244  
	`Pa_SåómA˘ive
–
°ªam
 ) )

249 
	`Pa_SÀï
–
SLEEP_DUR
 );

254  
d©a
->
ª≥©Cou¡î
 < 
MAX_REPEATS
 )

259 
	`Pa_SÀï
–
SLEEP_DUR
 );

262 if–
d©a
->
°›Mode
 =
MODE_ABORT
 )

264 
	`¥ötf
("Call Pa_AbortStream()\n");

265 
îr
 = 
	`Pa_Ab‹tSåóm
–
°ªam
 );

269 
	`¥ötf
("Call Pa_StopStream()\n");

270 
îr
 = 
	`Pa_St›Såóm
–
°ªam
 );

272 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

273 
	`¥ötf
("CÆ»Pa_Clo£Såóm()\n"); 
	`fÊush
(
°dout
);

274 
îr
 = 
	`Pa_Clo£Såóm
–
°ªam
 );

275 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

276 
	`Pa_Tîmö©e
();

277 
	`¥ötf
("Test finished.\n");

278  
îr
;

279 
îr‹
:

280 
	`Pa_Tîmö©e
();

281 
	`Ârötf
–
°dîr
, "AnÉrror occured while usingÅheÖortaudio stream\n" );

282 
	`Ârötf
–
°dîr
, "Eº‹Çumbî: %d\n", 
îr
 );

283 
	`Ârötf
–
°dîr
, "Eº‹ mesßge: %s\n", 
	`Pa_GëEº‹Text
–
îr
 ) );

284  
îr
;

285 
	}
}

	@portaudio/pa_tests/patest_sync.c

46 
	~<°dio.h
>

47 
	~<m©h.h
>

48 
	~"p‹èudio.h
"

49 
	#NUM_BEEPS
 (6)

	)

50 
	#SAMPLE_RATE
 (44100)

	)

51 
	#FRAMES_PER_BUFFER
 (256)

	)

52 
	#BEEP_DURATION
 (1000)

	)

53 
	#LATENCY_MSEC
 (2000)

	)

54 
	#SLEEP_MSEC
 (10)

	)

55 
	#TIMEOUT_MSEC
 ((3 * 
LATENCY_MSEC
Ë/ (2 * 
SLEEP_MSEC
))

	)

56 
	#NUM_BUFFERS
 ((
LATENCY_MSEC
 * 
SAMPLE_RATE
Ë/ (
FRAMES_PER_BUFFER
 * 1000))

	)

57 
	#STATE_BKG_IDLE
 (0)

	)

58 
	#STATE_BKG_PENDING
 (1)

	)

59 
	#STATE_BKG_BEEPING
 (2)

	)

62 
	mÀ·_pha£
;

63 
	mright_pha£
;

64 
	m°©e
;

65 
	mªque°Bìp
;

66 
PaTime°amp
 
	mbìpTime
;

67 
	mbìpCou¡
;

69 
	t∑Te°D©a
;

70 
Gíî©eR™domNumbî
( );

73 
	$Gíî©eR™domNumbî
( )

75 
øndSìd
 = 22222;

76 
øndSìd
 = (randSeed * 196314165) + 907633515;

77  
øndSìd
;

78 
	}
}

83 
	$∑ã°CÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

84 
‰amesPîBuf„r
,

85 
PaTime°amp
 
outTime
, *
u£rD©a
 )

88 
∑Te°D©a
 *
d©a
 = (∑Te°D©a*)
u£rD©a
;

89 *
out
 = (*)
ouçutBuf„r
;

90 
i
;

91 (Ë
öputBuf„r
;

93  
i
=0; i<
‰amesPîBuf„r
; i++ )

95  
d©a
->
°©e
 )

97 
STATE_BKG_IDLE
:

99 if–
d©a
->
ªque°Bìp
 )

101 
øndom
 = 
	`Gíî©eR™domNumbî
() >> 14;

102 
d©a
->
bìpTime
 = 
outTime
 + (
i
 + 
øndom
 + (
SAMPLE_RATE
/4));

103 
d©a
->
°©e
 = 
STATE_BKG_PENDING
;

104 
d©a
->
ªque°Bìp
 = 0;

105 
d©a
->
À·_pha£
 = d©a->
right_pha£
 = 0.0;

107 *
out
++ = 0.0;

108 *
out
++ = 0.0;

110 
STATE_BKG_PENDING
:

111 if–(
outTime
 + 
i
Ë>
d©a
->
bìpTime
 )

113 
d©a
->
°©e
 = 
STATE_BKG_BEEPING
;

114 
d©a
->
bìpCou¡
 = 
BEEP_DURATION
;

116 *
out
++ = 0.0;

117 *
out
++ = 0.0;

119 
STATE_BKG_BEEPING
:

120 if–
d©a
->
bìpCou¡
 <= 0 )

122 
d©a
->
°©e
 = 
STATE_BKG_IDLE
;

123 *
out
++ = 0.0;

124 *
out
++ = 0.0;

129 *
out
++ = 
d©a
->
À·_pha£
;

130 *
out
++ = 
d©a
->
right_pha£
;

132 
d©a
->
À·_pha£
 += 0.01f;

134 if–
d©a
->
À·_pha£
 >= 1.0f ) data->left_phase -= 2.0f;

136 
d©a
->
right_pha£
 += 0.03f;

137 if–
d©a
->
right_pha£
 >= 1.0f ) data->right_phase -= 2.0f;

139 
d©a
->
bìpCou¡
 -= 1;

142 
d©a
->
°©e
 = 
STATE_BKG_IDLE
;

147 
	}
}

149 
maö
();

150 
	$maö
()

152 
P‹tAudioSåóm
 *
°ªam
;

153 
PaEº‹
 
îr
;

154 
∑Te°D©a
 
DATA
;

155 
i
, 
timeout
;

156 
PaTime°amp
 
¥eviousTime
;

157 
	`¥ötf
("PortAudio Test: you should see BEEPátÅhe sameÅime you hear it.\n");

158 
	`¥ötf
("Wait forá few secondsÑandom delay between BEEPs.\n");

159 
	`¥ötf
("BEEP %dÅimes.\n", 
NUM_BEEPS
 );

161 
DATA
.
À·_pha£
 = DATA.
right_pha£
 = 0.0;

162 
DATA
.
°©e
 = 
STATE_BKG_IDLE
;

163 
DATA
.
ªque°Bìp
 = 0;

165 
îr
 = 
	`Pa_Inôülize
();

166 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

168 
îr
 = 
	`Pa_O≥nDeÁu…Såóm
(

169 &
°ªam
,

172 
∑Flﬂt32
,

173 
SAMPLE_RATE
,

174 
FRAMES_PER_BUFFER
,

175 
NUM_BUFFERS
,

176 
∑ã°CÆlback
,

177 &
DATA
 );

178 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

179 
îr
 = 
	`Pa_SèπSåóm
–
°ªam
 );

180 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

181 
¥eviousTime
 = 
	`Pa_SåómTime
–
°ªam
 );

182  
i
=0; i<
NUM_BEEPS
; i++ )

185 
DATA
.
ªque°Bìp
 = 1;

187 
timeout
 = 
TIMEOUT_MSEC
;

188  (
DATA
.
ªque°Bìp
 =1Ë&& (
timeout
-- > 0 ) ) 
	`Pa_SÀï
(
SLEEP_MSEC
);

189 if–
timeout
 <= 0 )

191 
	`Ârötf
–
°dîr
, "Timed out waiting for backgroundÅoácknowledgeÑequest.\n" );

192 
îr‹
;

195 
timeout
 = 
TIMEOUT_MSEC
 + (10000/
SLEEP_MSEC
);

196  (
	`Pa_SåómTime
–
°ªam
 ) < 
DATA
.
bìpTime
Ë&& (
timeout
-- > 0 ) )

198 
	`Pa_SÀï
(
SLEEP_MSEC
);

200 if–
timeout
 <= 0 )

202 
	`Ârötf
–
°dîr
, "Timed out waiting forÅime. Now = %g, Beep for %g.\n",

203 
	`Pa_SåómTime
–
°ªam
 ), 
DATA
.
bìpTime
 );

204 
îr‹
;

207 
	`¥ötf
("BEEP");

208 
	`fÊush
(
°dout
);

209 
	`¥ötf
("át %d, delta = %d\n",

210 (Ë
DATA
.
bìpTime
, (Ë(DATA.bìpTimê- 
¥eviousTime
) );

211 
	`fÊush
(
°dout
);

212 
¥eviousTime
 = 
DATA
.
bìpTime
;

214 
îr
 = 
	`Pa_St›Såóm
–
°ªam
 );

215 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

216 
îr
 = 
	`Pa_Clo£Såóm
–
°ªam
 );

217 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

218 
	`Pa_Tîmö©e
();

219 
	`¥ötf
("Test finished.\n");

220  
îr
;

221 
îr‹
:

222 
	`Pa_Tîmö©e
();

223 
	`Ârötf
–
°dîr
, "AnÉrror occured while usingÅheÖortaudio stream\n" );

224 
	`Ârötf
–
°dîr
, "Eº‹Çumbî: %d\n", 
îr
 );

225 
	`Ârötf
–
°dîr
, "Eº‹ mesßge: %s\n", 
	`Pa_GëEº‹Text
–
îr
 ) );

226  
îr
;

227 
	}
}

	@portaudio/pa_tests/patest_wire.c

40 
	~<°dio.h
>

41 
	~<m©h.h
>

42 
	~"p‹èudio.h
"

44 
	#INPUT_DEVICE
 
	`Pa_GëDeÁu…I≈utDevi˚ID
()

	)

45 
	#OUTPUT_DEVICE
 
	`Pa_GëDeÁu…OuçutDevi˚ID
()

	)

52 
	#SAMPLE_RATE
 (22050)

	)

53 
	#FRAMES_PER_BUFFER
 (64)

	)

56 
	#PA_SAMPLE_TYPE
 
∑Flﬂt32


	)

57 
	tSAMPLE
;

59 
	#PA_SAMPLE_TYPE
 
∑I¡16


	)

60 
	tSAMPLE
;

62 
wúeCÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

63 
‰amesPîBuf„r
,

64 
PaTime°amp
 
outTime
, *
u£rD©a
 );

70 
	$wúeCÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

71 
‰amesPîBuf„r
,

72 
PaTime°amp
 
outTime
, *
u£rD©a
 )

74 
SAMPLE
 *
out
 = (SAMPLE*)
ouçutBuf„r
;

75 
SAMPLE
 *
ö
 = (SAMPLE*)
öputBuf„r
;

76 
i
;

77 (Ë
outTime
;

80 if–
öputBuf„r
 =
NULL
 )

82  
i
=0; i<
‰amesPîBuf„r
; i++ )

84 *
out
++ = 0;

85 *
out
++ = 0;

90  
i
=0; i<
‰amesPîBuf„r
; i++ )

92 *
out
++ = *
ö
++;

93 *
out
++ = *
ö
++;

98 
	}
}

102 
maö
();

103 
	$maö
()

105 
P‹tAudioSåóm
 *
°ªam
;

106 
PaEº‹
 
îr
;

108 
îr
 = 
	`Pa_Inôülize
();

109 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

111 
	`¥ötf
("P‹tAudiÿTe°: i≈uàdevi˚ ID = %d\n", 
INPUT_DEVICE
 );

112 
	`¥ötf
("P‹tAudiÿTe°: ouçuàdevi˚ ID = %d\n", 
OUTPUT_DEVICE
 );

113 
îr
 = 
	`Pa_O≥nSåóm
(

114 &
°ªam
,

115 
INPUT_DEVICE
,

117 
PA_SAMPLE_TYPE
,

118 
NULL
,

119 
OUTPUT_DEVICE
,

121 
PA_SAMPLE_TYPE
,

122 
NULL
,

123 
SAMPLE_RATE
,

124 
FRAMES_PER_BUFFER
,

126 
∑ClùOff
,

127 
wúeCÆlback
,

128 
NULL
 );

129 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

131 
îr
 = 
	`Pa_SèπSåóm
–
°ªam
 );

132 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

134 
	`¥ötf
("Full duplex soundÅest inÖrogress.\n");

135 
	`¥ötf
("Hô ENTERÅÿexôÅe°.\n"); 
	`fÊush
(
°dout
);

136 
	`gëch¨
();

138 
	`¥ötf
("Closing stream.\n");

139 
îr
 = 
	`Pa_Clo£Såóm
–
°ªam
 );

140 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

141 
	`Pa_Tîmö©e
();

143 
	`¥ötf
("FuŒ du∂ex soundÅe° com∂ëe.\n"); 
	`fÊush
(
°dout
);

145 
îr‹
:

146 
	`Pa_Tîmö©e
();

147 
	`Ârötf
–
°dîr
, "AnÉrror occured while usingÅheÖortaudio stream\n" );

148 
	`Ârötf
–
°dîr
, "Eº‹Çumbî: %d\n", 
îr
 );

149 
	`Ârötf
–
°dîr
, "Eº‹ mesßge: %s\n", 
	`Pa_GëEº‹Text
–
îr
 ) );

151 
	}
}

	@portaudio/pa_unix_oss/pa_unix.c

88 
	~"∑_unix.h
"

90 *(*
	t±hªad_fun˘i⁄_t
)(*);

94 
öã∫ÆP‹tAudioDevi˚
 *
	gsDevi˚Li°
 = 
NULL
;

95 
	gsDeÁu…I≈utDevi˚ID
 = 
∑NoDevi˚
;

96 
	gsDeÁu…OuçutDevi˚ID
 = 
∑NoDevi˚
;

97 
	gsPaHo°Eº‹
 = 0;

100 
	$Pa_SèπUßgeCÆcuœti⁄
–
öã∫ÆP‹tAudioSåóm
 *
∑°
 )

102 
PaHo°SoundC⁄åﬁ
 *
∑hsc
 = (PaHo°SoundC⁄åﬁ *Ë
∑°
->
∑°_Devi˚D©a
;

103 if–
∑hsc
 =
NULL
 ) ;

105 
	`gëtimeofday
–&
∑hsc
->
∑hsc_E¡ryTime
, 
NULL
 );

106 
	}
}

108 
	$Subåa˘Time_AmöusB
–
timevÆ
 *
timeA
, timevÆ *
timeB
 )

110 
£cs
 = 
timeA
->
tv_£c
 - 
timeB
->tv_sec;

111 
u£cs
 = 
£cs
 * 1000000;

112 
u£cs
 +(
timeA
->
tv_u£c
 - 
timeB
->tv_usec);

113  
u£cs
;

114 
	}
}

120 
	$Pa_EndUßgeCÆcuœti⁄
–
öã∫ÆP‹tAudioSåóm
 *
∑°
 )

122 
timevÆ
 
cuºítTime
;

123 
u£csEœp£d
;

124 
√wUßge
;

126 
	#LOWPASS_COEFFICIENT_0
 (0.95)

	)

127 
	#LOWPASS_COEFFICIENT_1
 (0.99999 - 
LOWPASS_COEFFICIENT_0
)

	)

129 
PaHo°SoundC⁄åﬁ
 *
∑hsc
 = (PaHo°SoundC⁄åﬁ *Ë
∑°
->
∑°_Devi˚D©a
;

130 if–
∑hsc
 =
NULL
 ) ;

132 if–
	`gëtimeofday
–&
cuºítTime
, 
NULL
 ) == 0 )

134 
u£csEœp£d
 = 
	`Subåa˘Time_AmöusB
–&
cuºítTime
, &
∑hsc
->
∑hsc_E¡ryTime
 );

136 
√wUßge
 = 
u£csEœp£d
 * 
∑hsc
->
∑hsc_Invî£Mi¸osPîBuf„r
;

138 
∑°
->
∑°_Ußge
 = (
LOWPASS_COEFFICIENT_0
 *Öast->past_Usage) +

139 (
LOWPASS_COEFFICIENT_1
 * 
√wUßge
);

142 
	}
}

150 
PaEº‹
 
	$Pa_QuîyDevi˚s
( )

152 
öã∫ÆP‹tAudioDevi˚
 *
∑d
, *
œ°Pad
;

153 
go
 = 1;

154 
numDevi˚s
 = 0;

155 
PaEº‹
 
ã°Resu…
;

156 
PaEº‹
 
ªsu…
 = 
∑NoEº‹
;

157 *
ívdev
;

159 
sDeÁu…I≈utDevi˚ID
 = 
∑NoDevi˚
;

160 
sDeÁu…OuçutDevi˚ID
 = 
∑NoDevi˚
;

162 
œ°Pad
 = 
NULL
;

164  
go
 )

167 
∑d
 = (
öã∫ÆP‹tAudioDevi˚
 *)

168 
	`PaHo°_AŒoˇãFa°Mem‹y
–(
öã∫ÆP‹tAudioDevi˚
) );

169 if–
∑d
 =
NULL
 )  
∑Insufficõ¡Mem‹y
;

170 
	`mem£t
–
∑d
, 0, (
öã∫ÆP‹tAudioDevi˚
) );

173 if–
numDevi˚s
 == 0 )

175 
	`•rötf
–
∑d
->
∑d_Devi˚Name
, 
DEVICE_NAME_BASE
);

179 
	`•rötf
–
∑d
->
∑d_Devi˚Name
, 
DEVICE_NAME_BASE
 "%d", 
numDevi˚s
 );

182 
	`DBUG
(("Try devi˚ %s\n", 
∑d
->
∑d_Devi˚Name
 ));

183 
ã°Resu…
 = 
	`Pa_QuîyDevi˚
–
∑d
->
∑d_Devi˚Name
,Öad );

184 
	`DBUG
(("Pa_QuîyDevi˚Ñëu∫ed %d\n", 
ã°Resu…
 ));

185 if–
ã°Resu…
 !
∑NoEº‹
 )

187 if–
œ°Pad
 =
NULL
 )

189 
ªsu…
 = 
ã°Resu…
;

191 
go
 = 0;

192 
	`PaHo°_FªeFa°Mem‹y
–
∑d
, (
öã∫ÆP‹tAudioDevi˚
) );

196 
numDevi˚s
 += 1;

198 if–
œ°Pad
 )

200 
œ°Pad
->
∑d_Next
 = 
∑d
;

204 
sDevi˚Li°
 = 
∑d
;

206 
œ°Pad
 = 
∑d
;

215 
	`DBUG
(("Checking for AUDIODEVánd UTAUDIODEV\n"));

216 
ívdev
 = 
	`gëív
("AUDIODEV");

217 i‡(
ívdev
 !
NULL
 && !
	`°r°r
”nvdev, 
DEVICE_NAME_BASE
)) {

218 
ªsu…
 = 
∑NoEº‹
;

221 
∑d
 = (
öã∫ÆP‹tAudioDevi˚
 *)

222 
	`PaHo°_AŒoˇãFa°Mem‹y
–(
öã∫ÆP‹tAudioDevi˚
) );

223 if–
∑d
 =
NULL
 )  
∑Insufficõ¡Mem‹y
;

224 
	`mem£t
–
∑d
, 0, (
öã∫ÆP‹tAudioDevi˚
) );

227 
	`°r˝y
(
∑d
->
∑d_Devi˚Name
, 
ívdev
);

229 
	`DBUG
(("Try devi˚ %s\n", 
∑d
->
∑d_Devi˚Name
 ));

230 
ã°Resu…
 = 
	`Pa_QuîyDevi˚
–
∑d
->
∑d_Devi˚Name
,Öad );

231 
	`DBUG
(("Pa_QuîyDevi˚Ñëu∫ed %d\n", 
ã°Resu…
 ));

232 if–
ã°Resu…
 !
∑NoEº‹
 )

234 if–
œ°Pad
 =
NULL
 )

236 
ªsu…
 = 
ã°Resu…
;

238 
	`PaHo°_FªeFa°Mem‹y
–
∑d
, (
öã∫ÆP‹tAudioDevi˚
) );

242 
numDevi˚s
 += 1;

244 if–
œ°Pad
 )

246 
œ°Pad
->
∑d_Next
 = 
∑d
;

250 
sDevi˚Li°
 = 
∑d
;

252 
œ°Pad
 = 
∑d
;

256 
ívdev
 = 
	`gëív
("UTAUDIODEV");

257 i‡(
ívdev
 !
NULL
 && !
	`°r°r
”nvdev, 
DEVICE_NAME_BASE
Ë&& 
	`gëív
("AUDIODEV"Ë!NULL && 
	`°rcmp
(envdev, getenv("AUDIODEV"))) {

258 
ªsu…
 = 
∑NoEº‹
;

261 
∑d
 = (
öã∫ÆP‹tAudioDevi˚
 *)

262 
	`PaHo°_AŒoˇãFa°Mem‹y
–(
öã∫ÆP‹tAudioDevi˚
) );

263 if–
∑d
 =
NULL
 )  
∑Insufficõ¡Mem‹y
;

264 
	`mem£t
–
∑d
, 0, (
öã∫ÆP‹tAudioDevi˚
) );

267 
	`°r˝y
(
∑d
->
∑d_Devi˚Name
, 
ívdev
);

269 
	`DBUG
(("Try devi˚ %s\n", 
∑d
->
∑d_Devi˚Name
 ));

270 
ã°Resu…
 = 
	`Pa_QuîyDevi˚
–
∑d
->
∑d_Devi˚Name
,Öad );

271 
	`DBUG
(("Pa_QuîyDevi˚Ñëu∫ed %d\n", 
ã°Resu…
 ));

272 if–
ã°Resu…
 !
∑NoEº‹
 )

274 if–
œ°Pad
 =
NULL
 )

276 
ªsu…
 = 
ã°Resu…
;

278 
	`PaHo°_FªeFa°Mem‹y
–
∑d
, (
öã∫ÆP‹tAudioDevi˚
) );

282 
numDevi˚s
 += 1;

284 if–
œ°Pad
 )

286 
œ°Pad
->
∑d_Next
 = 
∑d
;

290 
sDevi˚Li°
 = 
∑d
;

292 
œ°Pad
 = 
∑d
;

296  
ªsu…
;

297 
	}
}

300 
	$Pa_Cou¡Devi˚s
()

302 
numDevi˚s
 = 0;

303 
öã∫ÆP‹tAudioDevi˚
 *
∑d
;

305 if–
sDevi˚Li°
 =
NULL
 ) 
	`Pa_Inôülize
();

307 
∑d
 = 
sDevi˚Li°
;

308  
∑d
 !
NULL
 )

310 
∑d
 =Öad->
∑d_Next
;

311 
numDevi˚s
++;

314  
numDevi˚s
;

315 
	}
}

318 
öã∫ÆP‹tAudioDevi˚
 *
	$Pa_GëI¡î«lDevi˚
–
PaDevi˚ID
 
id
 )

320 
öã∫ÆP‹tAudioDevi˚
 *
∑d
;

321 if–(
id
 < 0Ë|| ( id >
	`Pa_Cou¡Devi˚s
()ËË 
NULL
;

322 
∑d
 = 
sDevi˚Li°
;

323  
id
 > 0 )

325 
∑d
 =Öad->
∑d_Next
;

326 
id
--;

328  
∑d
;

329 
	}
}

332 c⁄° 
PaDevi˚Info
* 
	$Pa_GëDevi˚Info
–
PaDevi˚ID
 
id
 )

334 
öã∫ÆP‹tAudioDevi˚
 *
∑d
;

335 if–(
id
 < 0Ë|| ( id >
	`Pa_Cou¡Devi˚s
()ËË 
NULL
;

336 
∑d
 = 
	`Pa_GëI¡î«lDevi˚
–
id
 );

337  &
∑d
->
∑d_Info
 ;

338 
	}
}

340 
PaEº‹
 
	$Pa_MaybeQuîyDevi˚s
( )

342 if–
sDevi˚Li°
 =
NULL
 )

344  
	`Pa_QuîyDevi˚s
();

347 
	}
}

349 
PaDevi˚ID
 
	$Pa_GëDeÁu…I≈utDevi˚ID
( )

353 
	}
}

355 
PaDevi˚ID
 
	$Pa_GëDeÁu…OuçutDevi˚ID
( )

358 
	}
}

364 
PaEº‹
 
	$PaHo°_Inô
( )

366  
	`Pa_MaybeQuîyDevi˚s
();

367 
	}
}

376 
	#SCHEDULER_POLICY
 
SCHED_RR


	)

377 
	#WATCHDOG_MAX_SECONDS
 (3)

	)

378 
	#WATCHDOG_INTERVAL_USEC
 (1000000)

	)

380 
	$PaHo°_C™¨yProc
–
PaHo°SoundC⁄åﬁ
 *
∑hsc
 )

382 
ªsu…
 = 0;

384 #ifde‡
GNUSTEP


385 
	`GSRegi°îCuºítThªad
();

388  
∑hsc
->
∑hsc_C™¨yRun
) {

389 
	`u¶ìp
–
WATCHDOG_INTERVAL_USEC
 );

390 
	`gëtimeofday
–&
∑hsc
->
∑hsc_C™¨yTime
, 
NULL
 );

393 
	`DBUG
(("PaHost_CanaryProc:Éxiting.\n"));

395 #ifde‡
GNUSTEP


396 
	`GSUƒegi°îCuºítThªad
();

399  
ªsu…
;

400 
	}
}

410 
PaEº‹
 
	$PaHo°_W©chDogProc
–
PaHo°SoundC⁄åﬁ
 *
∑hsc
 )

412 
sched_∑øm
 
schp
 = { 0 };

413 
maxPri
;

415 #ifde‡
GNUSTEP


416 
	`GSRegi°îCuºítThªad
();

421 
schp
.
sched_¥i‹ôy
 = 
∑hsc
->
∑hsc_AudioPri‹ôy
 + 4;

422 
maxPri
 = 
	`sched_gë_¥i‹ôy_max
(
SCHEDULER_POLICY
);

423 if–
schp
.
sched_¥i‹ôy
 > 
maxPri
 ) schp.sched_priority = maxPri;

425 i‡(
	`sched_£tscheduÀr
(0, 
SCHEDULER_POLICY
, &
schp
) != 0)

427 
	`ERR_RPT
(("PaHost_WatchDogProc: cannot set watch dogÖriority!\n"));

428 
kûlAudio
;

433  
∑hsc
->
∑hsc_W©chDogRun
 )

436 
dñè
;

437 
timevÆ
 
cuºítTime
;

439 
	`u¶ìp
–
WATCHDOG_INTERVAL_USEC
 );

440 
	`gëtimeofday
–&
cuºítTime
, 
NULL
 );

443 
dñè
 = 
cuºítTime
.
tv_£c
 - 
∑hsc
->
∑hsc_E¡ryTime
.tv_sec;

444 
	`DBUG
(("PaHo°_W©chDogProc:áudiÿdñè = %d\n", 
dñè
 ));

445 if–
dñè
 > 
WATCHDOG_MAX_SECONDS
 )

447 
kûlAudio
;

451 
dñè
 = 
cuºítTime
.
tv_£c
 - 
∑hsc
->
∑hsc_C™¨yTime
.tv_sec;

452 if–
dñè
 > 
WATCHDOG_MAX_SECONDS
 )

454 
	`ERR_RPT
(("PaHost_WatchDogProc: canary died!\n"));

455 
lowîAudio
;

459 
	`DBUG
(("PaHost_WatchDogProc:Éxiting.\n"));

460 #ifde‡
GNUSTEP


461 
	`GSUƒegi°îCuºítThªad
();

465 
lowîAudio
:

467 
sched_∑øm
 
sch©
 = { 0 };

468 if–
	`sched_£tscheduÀr
(
∑hsc
->
∑hsc_AudioThªadPID
, 
SCHED_OTHER
, &
sch©
) != 0)

470 
	`ERR_RPT
(("PaHo°_W©chDogProc: faûedÅÿlowîáudiÿ¥i‹ôy.Éºnÿ%d\n", 
î∫o
 ));

475 
	`ERR_RPT
(("PaHost_WatchDogProc:ÜoweredáudioÖriorityÅoÖrevent hogging of CPU.\n"));

476 
˛ónup
;

480 
kûlAudio
:

481 
	`ERR_RPT
(("PaHost_WatchDogProc: killing hungáudioÅhread!\n"));

482 
	`±hªad_kûl
–
∑hsc
->
∑hsc_AudioThªad
, 
SIGKILL
 );

484 
˛ónup
:

485 
∑hsc
->
∑hsc_C™¨yRun
 = 0;

486 
	`DBUG
(("PaHost_WatchDogProc: cancel Canary\n"));

487 
	`±hªad_ˇn˚l
–
∑hsc
->
∑hsc_C™¨yThªad
 );

488 
	`DBUG
(("PaHost_WatchDogProc: join Canary\n"));

489 
	`±hªad_joö
–
∑hsc
->
∑hsc_C™¨yThªad
, 
NULL
 );

490 
	`DBUG
(("PaHost_WatchDogProc: forget Canary\n"));

491 
∑hsc
->
∑hsc_IsC™¨yThªadVÆid
 = 0;

493 #ifde‡
GNUSTEP


494 
	`GSUƒegi°îCuºítThªad
();

497 
	}
}

500 
	$PaHo°_St›W©chDog
–
PaHo°SoundC⁄åﬁ
 *
∑hsc
 )

503 if–
∑hsc
->
∑hsc_IsW©chDogThªadVÆid
 )

505 
∑hsc
->
∑hsc_W©chDogRun
 = 0;

506 
	`DBUG
(("PaHost_StopWatchDog: cancel WatchDog\n"));

507 
	`±hªad_ˇn˚l
–
∑hsc
->
∑hsc_W©chDogThªad
 );

508 
	`±hªad_joö
–
∑hsc
->
∑hsc_W©chDogThªad
, 
NULL
 );

509 
∑hsc
->
∑hsc_IsW©chDogThªadVÆid
 = 0;

512 if–
∑hsc
->
∑hsc_IsC™¨yThªadVÆid
 )

514 
∑hsc
->
∑hsc_C™¨yRun
 = 0;

515 
	`DBUG
(("PaHost_StopWatchDog: cancel Canary\n"));

516 
	`±hªad_ˇn˚l
–
∑hsc
->
∑hsc_C™¨yThªad
 );

517 
	`DBUG
(("PaHost_StopWatchDog: join Canary\n"));

518 
	`±hªad_joö
–
∑hsc
->
∑hsc_C™¨yThªad
, 
NULL
 );

519 
∑hsc
->
∑hsc_IsC™¨yThªadVÆid
 = 0;

521 
	}
}

524 
PaEº‹
 
	$PaHo°_SèπW©chDog
–
PaHo°SoundC⁄åﬁ
 *
∑hsc
 )

526 
hªs
;

527 
PaEº‹
 
ªsu…
 = 0;

530 
	`gëtimeofday
–&
∑hsc
->
∑hsc_E¡ryTime
, 
NULL
 );

531 
	`gëtimeofday
–&
∑hsc
->
∑hsc_C™¨yTime
, 
NULL
 );

534 
∑hsc
->
∑hsc_C™¨yRun
 = 1;

535 
hªs
 = 
	`±hªad_¸óã
(&(
∑hsc
->
∑hsc_C™¨yThªad
),

536 
NULL
 ,

537 (
±hªad_fun˘i⁄_t
)
PaHo°_C™¨yProc
, 
∑hsc
);

538 if–
hªs
 != 0 )

540 
∑hsc
->
∑hsc_IsC™¨yThªadVÆid
 = 0;

541 
ªsu…
 = 
∑Ho°Eº‹
;

542 
sPaHo°Eº‹
 = 
hªs
;

543 
îr‹
;

545 
∑hsc
->
∑hsc_IsC™¨yThªadVÆid
 = 1;

548 
∑hsc
->
∑hsc_W©chDogRun
 = 1;

549 
hªs
 = 
	`±hªad_¸óã
(&(
∑hsc
->
∑hsc_W©chDogThªad
),

550 
NULL
 ,

551 (
±hªad_fun˘i⁄_t
)
PaHo°_W©chDogProc
, 
∑hsc
);

552 if–
hªs
 != 0 )

554 
∑hsc
->
∑hsc_IsW©chDogThªadVÆid
 = 0;

555 
ªsu…
 = 
∑Ho°Eº‹
;

556 
sPaHo°Eº‹
 = 
hªs
;

557 
îr‹
;

559 
∑hsc
->
∑hsc_IsW©chDogThªadVÆid
 = 1;

560  
ªsu…
;

562 
îr‹
:

563 
	`PaHo°_St›W©chDog
–
∑hsc
 );

564  
ªsu…
;

565 
	}
}

571 
PaEº‹
 
	$PaHo°_Boo°Pri‹ôy
–
öã∫ÆP‹tAudioSåóm
 *
∑°
 )

573 
PaHo°SoundC⁄åﬁ
 *
∑hsc
;

574 
PaEº‹
 
ªsu…
 = 
∑NoEº‹
;

575 
sched_∑øm
 
schp
 = { 0 };

577 
∑hsc
 = (
PaHo°SoundC⁄åﬁ
 *Ë
∑°
->
∑°_Devi˚D©a
;

578 if–
∑hsc
 =
NULL
 )  
∑I¡î«lEº‹
;

580 
∑hsc
->
∑hsc_AudioThªadPID
 = 
	`gëpid
();

581 
	`DBUG
(("PaHo°_Boo°Pri‹ôy:áudiÿPID = %d\n", 
∑hsc
->
∑hsc_AudioThªadPID
 ));

584 
∑hsc
->
∑hsc_AudioPri‹ôy
 = (
	`sched_gë_¥i‹ôy_max
(
SCHEDULER_POLICY
) -

585 
	`sched_gë_¥i‹ôy_mö
(
SCHEDULER_POLICY
)) / 2;

586 
schp
.
sched_¥i‹ôy
 = 
∑hsc
->
∑hsc_AudioPri‹ôy
;

588 i‡(
	`sched_£tscheduÀr
(0, 
SCHEDULER_POLICY
, &
schp
) != 0)

590 
	`DBUG
(("PortAudio: only superuser can useÑeal-timeÖriority.\n"));

594 
	`DBUG
(("P‹tAudio:áudiÿˇŒbackÖri‹ôy sëÅÿÀvñ %d!\n", 
schp
.
sched_¥i‹ôy
));

596 
ªsu…
 = 
	`PaHo°_SèπW©chDog
–
∑hsc
 );

599  
ªsu…
;

600 
	}
}

603 
PaEº‹
 
	$Pa_AudioThªadProc
–
öã∫ÆP‹tAudioSåóm
 *
∑°
 )

605 
PaEº‹
 
ªsu…
;

606 
PaHo°SoundC⁄åﬁ
 *
∑hsc
;

607 
ssize_t
 
byãs_ªad
, 
byãs_wrôãn
;

609 
∑hsc
 = (
PaHo°SoundC⁄åﬁ
 *Ë
∑°
->
∑°_Devi˚D©a
;

610 if–
∑hsc
 =
NULL
 )  
∑I¡î«lEº‹
;

612 #ifde‡
GNUSTEP


613 
	`GSRegi°îCuºítThªad
();

616 
ªsu…
 = 
	`PaHo°_Boo°Pri‹ôy
–
∑°
 );

617 if–
ªsu…
 < 0 ) 
îr‹
;

619 
∑°
->
∑°_IsA˘ive
 = 1;

620 
	`DBUG
(("enteringÅhread.\n"));

622  (
∑°
->
∑°_St›Now
 =0Ë&& (∑°->
∑°_St›So⁄
 == 0) )

625 if(
∑hsc
->
∑hsc_N©iveI≈utBuf„r
)

627 
tŸÆªad
 = 0;

628 
	`DBUG
(("Pa_AudioThªadProc:áâem±Åÿªad %d byãs\n", 
∑hsc
->
∑hsc_ByãsPîI≈utBuf„r
));

631 
byãs_ªad
 = 
	`ªad
(
∑hsc
->
∑hsc_I≈utH™dÀ
,

632 (*)
∑hsc
->
∑hsc_N©iveI≈utBuf„r
 + 
tŸÆªad
,

633 
∑hsc
->
∑hsc_ByãsPîI≈utBuf„r
 - 
tŸÆªad
);

635 i‡(
byãs_ªad
 < 0)

637 
	`ERR_RPT
(("PortAudio:Ñead interrupted!\n"));

641 
tŸÆªad
 +
byãs_ªad
;

642 }  
tŸÆªad
 < 
∑hsc
->
∑hsc_ByãsPîI≈utBuf„r
);

646 
	`DBUG
(("converting...\n"));

647 
	`Pa_SèπUßgeCÆcuœti⁄
–
∑°
 );

648 
ªsu…
 = 
	`Pa_CÆlC⁄vîtI¡16
–
∑°
,

649 
∑hsc
->
∑hsc_N©iveI≈utBuf„r
,

650 
∑hsc
->
∑hsc_N©iveOuçutBuf„r
 );

651 
	`Pa_EndUßgeCÆcuœti⁄
–
∑°
 );

652 if–
ªsu…
 != 0)

654 
	`DBUG
(("hmm, Pa_CallConvertInt16() says: %d. i'm bailing.\n",

655 
ªsu…
));

660 if–
∑hsc
->
∑hsc_N©iveOuçutBuf„r
 )

662 
tŸÆwrôãn
 = 0;

665 
byãs_wrôãn
 = 
	`wrôe
(
∑hsc
->
∑hsc_OuçutH™dÀ
,

666 (*)
∑hsc
->
∑hsc_N©iveOuçutBuf„r
,

667 
∑hsc
->
∑hsc_ByãsPîOuçutBuf„r
);

668 if–
byãs_wrôãn
 < 0 )

670 
	`ERR_RPT
(("PortAudio: write interrupted!"));

674 
tŸÆwrôãn
 +
byãs_wrôãn
;

675 }  
tŸÆwrôãn
 < 
∑hsc
->
∑hsc_ByãsPîOuçutBuf„r
);

678 
	`Pa_Upd©eSåómTime
(
∑hsc
);

680 
	`DBUG
(("Pa_AudioThreadProc:ÜeftáudioÜoop.\n"));

682 
∑°
->
∑°_IsA˘ive
 = 0;

683 
	`PaHo°_St›W©chDog
–
∑hsc
 );

685 
îr‹
:

686 
	`DBUG
(("leavingáudioÅhread.\n"));

687 #ifde‡
GNUSTEP


688 
	`GSUƒegi°îCuºítThªad
();

690  
ªsu…
;

691 
	}
}

702 
	#PA_LATENCY_ENV_NAME
 ("PA_MIN_LATENCY_MSEC")

	)

704 
	$Pa_GëMöNumBuf„rs
–
‰amesPîBuf„r
, 
‰amesPîSec⁄d
 )

706 
möBuf„rs
;

707 
möL©ícyM£c
 = 
MIN_LATENCY_MSEC
;

708 *
möL©ícyText
 = 
	`gëív
(
PA_LATENCY_ENV_NAME
);

709 if–
möL©ícyText
 !
NULL
 )

711 
	`PRINT
(("PA_MIN_LATENCY_MSEC = %s\n", 
möL©ícyText
 ));

712 
möL©ícyM£c
 = 
	`©oi
–
möL©ícyText
 );

713 if–
möL©ícyM£c
 < 1 ) minLatencyMsec = 1;

714 if–
möL©ícyM£c
 > 5000 ) minLatencyMsec = 5000;

717 
möBuf„rs
 = (Ë((
möL©ícyM£c
 * 
‰amesPîSec⁄d
Ë/ ( 1000.0 * 
‰amesPîBuf„r
 ));

718 if–
möBuf„rs
 < 2 ) minBuffers = 2;

719  
möBuf„rs
;

720 
	}
}

723 
PaEº‹
 
	$PaHo°_O≥nSåóm
–
öã∫ÆP‹tAudioSåóm
 *
∑°
 )

725 
PaEº‹
 
ªsu…
 = 
∑NoEº‹
;

726 
PaHo°SoundC⁄åﬁ
 *
∑hsc
;

727 
möNumBuf„rs
;

728 
öã∫ÆP‹tAudioDevi˚
 *
∑d
;

729 
	`DBUG
(("PaHost_OpenStream() called.\n" ));

732 
∑hsc
 = (
PaHo°SoundC⁄åﬁ
 *Ë
	`mÆloc
((PaHostSoundControl));

733 if–
∑hsc
 =
NULL
 )

735 
ªsu…
 = 
∑Insufficõ¡Mem‹y
;

736 
îr‹
;

738 
	`mem£t
–
∑hsc
, 0, (
PaHo°SoundC⁄åﬁ
) );

739 
∑°
->
∑°_Devi˚D©a
 = (*Ë
∑hsc
;

741 
∑hsc
->
∑hsc_OuçutH™dÀ
 = 
BAD_DEVICE_ID
;

742 
∑hsc
->
∑hsc_I≈utH™dÀ
 = 
BAD_DEVICE_ID
;

743 
∑hsc
->
∑hsc_IsAudioThªadVÆid
 = 0;

744 
∑hsc
->
∑hsc_IsW©chDogThªadVÆid
 = 0;

747 
∑hsc
->
∑hsc_ByãsPîI≈utBuf„r
 = 
∑°
->
∑°_FømesPîU£rBuf„r
 *

748 
∑°
->
∑°_NumI≈utCh™√ls
 * ();

749 if–
∑°
->
∑°_NumI≈utCh™√ls
 > 0)

751 
∑hsc
->
∑hsc_N©iveI≈utBuf„r
 = (*Ë
	`mÆloc
’ahsc->
∑hsc_ByãsPîI≈utBuf„r
);

752 if–
∑hsc
->
∑hsc_N©iveI≈utBuf„r
 =
NULL
 )

754 
ªsu…
 = 
∑Insufficõ¡Mem‹y
;

755 
îr‹
;

758 
∑hsc
->
∑hsc_ByãsPîOuçutBuf„r
 = 
∑°
->
∑°_FømesPîU£rBuf„r
 *

759 
∑°
->
∑°_NumOuçutCh™√ls
 * ();

760 if–
∑°
->
∑°_NumOuçutCh™√ls
 > 0)

762 
∑hsc
->
∑hsc_N©iveOuçutBuf„r
 = (*Ë
	`mÆloc
’ahsc->
∑hsc_ByãsPîOuçutBuf„r
);

763 if–
∑hsc
->
∑hsc_N©iveOuçutBuf„r
 =
NULL
 )

765 
ªsu…
 = 
∑Insufficõ¡Mem‹y
;

766 
îr‹
;

771 
möNumBuf„rs
 = 
	`Pa_GëMöNumBuf„rs
–
∑°
->
∑°_FømesPîU£rBuf„r
,Öa°->
∑°_Sam∂eR©e
 );

772 
∑°
->
∑°_NumU£rBuf„rs
 = ( 
möNumBuf„rs
 >Öast->past_NumUserBuffers ) ? minNumBuffers :Öast->past_NumUserBuffers;

774 
∑hsc
->
∑hsc_Invî£Mi¸osPîBuf„r
 = 
∑°
->
∑°_Sam∂eR©e
 / (1000000.0 *Öa°->
∑°_FømesPîU£rBuf„r
);

775 
	`DBUG
(("∑°_Sam∂eR©ê%g\n", 
∑°
->
∑°_Sam∂eR©e
 ));

776 
	`DBUG
(("∑°_FømesPîU£rBuf„∏%d\n", 
∑°
->
∑°_FømesPîU£rBuf„r
 ));

777 
	`DBUG
(("∑hsc_Invî£Mi¸osPîBuf„∏%g\n", 
∑hsc
->
∑hsc_Invî£Mi¸osPîBuf„r
 ));

782 i‡(
∑°
->
∑°_OuçutDevi˚ID
 =∑°->
∑°_I≈utDevi˚ID
)

785 i‡((
∑°
->
∑°_NumOuçutCh™√ls
 > 0Ë&& (∑°->
∑°_NumI≈utCh™√ls
 > 0) )

787 
∑d
 = 
	`Pa_GëI¡î«lDevi˚
–
∑°
->
∑°_OuçutDevi˚ID
 );

788 
	`DBUG
(("PaHo°_O≥nSåóm:áâem±Åÿ›í %†f‹ O_RDWR\n", 
∑d
->
∑d_Devi˚Name
 ));

792 
∑hsc
->
∑hsc_I≈utH™dÀ
 = 
	`›í
(
∑d
->
∑d_Devi˚Name
,
O_RDWR
|
O_NONBLOCK
);

793 if(
∑hsc
->
∑hsc_I≈utH™dÀ
==-1)

795 
	`ERR_RPT
(("PaHo°_O≥nSåóm: couldÇŸ o≥¿%†f‹ O_RDWR\n", 
∑d
->
∑d_Devi˚Name
 ));

796 
ªsu…
 = 
∑Ho°Eº‹
;

797 
îr‹
;

799 
	`˛o£
(
∑hsc
->
∑hsc_I≈utH™dÀ
);

801 
∑hsc
->
∑hsc_OuçutH™dÀ
 =Öahsc->
∑hsc_I≈utH™dÀ
 =

802 
	`›í
(
∑d
->
∑d_Devi˚Name
,
O_RDWR
);

803 if(
∑hsc
->
∑hsc_I≈utH™dÀ
==-1)

805 
	`ERR_RPT
(("PaHo°_O≥nSåóm: couldÇŸ o≥¿%†f‹ O_RDWR\n", 
∑d
->
∑d_Devi˚Name
 ));

806 
ªsu…
 = 
∑Ho°Eº‹
;

807 
îr‹
;

809 
	`Pa_SëL©ícy
–
∑hsc
->
∑hsc_OuçutH™dÀ
,

810 
∑°
->
∑°_NumU£rBuf„rs
,Öa°->
∑°_FømesPîU£rBuf„r
,

811 
∑°
->
∑°_NumOuçutCh™√ls
 );

812 
ªsu…
 = 
	`Pa_SëupDevi˚F‹m©
–
∑hsc
->
∑hsc_OuçutH™dÀ
,

813 
∑°
->
∑°_NumOuçutCh™√ls
, (Ìa°->
∑°_Sam∂eR©e
 );

818 i‡(
∑°
->
∑°_NumOuçutCh™√ls
 > 0)

820 
∑d
 = 
	`Pa_GëI¡î«lDevi˚
–
∑°
->
∑°_OuçutDevi˚ID
 );

821 
	`DBUG
(("PaHo°_O≥nSåóm:áâem±Åÿ›í %†f‹ O_WRONLY\n", 
∑d
->
∑d_Devi˚Name
 ));

824 
∑hsc
->
∑hsc_OuçutH™dÀ
 = 
	`›í
(
∑d
->
∑d_Devi˚Name
,
O_WRONLY
|
O_NONBLOCK
);

825 if(
∑hsc
->
∑hsc_OuçutH™dÀ
==-1)

827 
	`ERR_RPT
(("PaHo°_O≥nSåóm: couldÇŸ o≥¿%†f‹ O_WRONLY\n", 
∑d
->
∑d_Devi˚Name
 ));

828 
ªsu…
 = 
∑Ho°Eº‹
;

829 
îr‹
;

831 
	`˛o£
(
∑hsc
->
∑hsc_OuçutH™dÀ
);

833 
∑hsc
->
∑hsc_OuçutH™dÀ
 = 
	`›í
(
∑d
->
∑d_Devi˚Name
,
O_WRONLY
);

834 if(
∑hsc
->
∑hsc_OuçutH™dÀ
==-1)

836 
	`ERR_RPT
(("PaHo°_O≥nSåóm: couldÇŸ o≥¿%†f‹ O_WRONLY\n", 
∑d
->
∑d_Devi˚Name
 ));

837 
ªsu…
 = 
∑Ho°Eº‹
;

838 
îr‹
;

840 
	`Pa_SëL©ícy
–
∑hsc
->
∑hsc_OuçutH™dÀ
,

841 
∑°
->
∑°_NumU£rBuf„rs
,Öa°->
∑°_FømesPîU£rBuf„r
,

842 
∑°
->
∑°_NumOuçutCh™√ls
 );

843 
ªsu…
 = 
	`Pa_SëupOuçutDevi˚F‹m©
–
∑hsc
->
∑hsc_OuçutH™dÀ
,

844 
∑°
->
∑°_NumOuçutCh™√ls
, (Ìa°->
∑°_Sam∂eR©e
 );

847 i‡(
∑°
->
∑°_NumI≈utCh™√ls
 > 0)

849 
∑d
 = 
	`Pa_GëI¡î«lDevi˚
–
∑°
->
∑°_I≈utDevi˚ID
 );

850 
	`DBUG
(("PaHo°_O≥nSåóm:áâem±Åÿ›í %†f‹ O_RDONLY\n", 
∑d
->
∑d_Devi˚Name
 ));

853 
∑hsc
->
∑hsc_I≈utH™dÀ
 = 
	`›í
(
∑d
->
∑d_Devi˚Name
,
O_RDONLY
|
O_NONBLOCK
);

854 if(
∑hsc
->
∑hsc_I≈utH™dÀ
==-1)

856 
	`ERR_RPT
(("PaHo°_O≥nSåóm: couldÇŸ o≥¿%†f‹ O_RDONLY\n", 
∑d
->
∑d_Devi˚Name
 ));

857 
ªsu…
 = 
∑Ho°Eº‹
;

858 
îr‹
;

860 
	`˛o£
(
∑hsc
->
∑hsc_I≈utH™dÀ
);

862 
∑hsc
->
∑hsc_I≈utH™dÀ
 = 
	`›í
(
∑d
->
∑d_Devi˚Name
,
O_RDONLY
);

863 if(
∑hsc
->
∑hsc_I≈utH™dÀ
==-1)

865 
	`ERR_RPT
(("PaHo°_O≥nSåóm: couldÇŸ o≥¿%†f‹ O_RDONLY\n", 
∑d
->
∑d_Devi˚Name
 ));

866 
ªsu…
 = 
∑Ho°Eº‹
;

867 
îr‹
;

869 
	`Pa_SëL©ícy
–
∑hsc
->
∑hsc_I≈utH™dÀ
,

870 
∑°
->
∑°_NumU£rBuf„rs
,Öa°->
∑°_FømesPîU£rBuf„r
,

871 
∑°
->
∑°_NumI≈utCh™√ls
 );

872 
ªsu…
 = 
	`Pa_SëupI≈utDevi˚F‹m©
–
∑hsc
->
∑hsc_I≈utH™dÀ
,

873 
∑°
->
∑°_NumI≈utCh™√ls
, (Ìa°->
∑°_Sam∂eR©e
 );

878 
	`DBUG
(("PaHo°_O≥nSåóm: SUCCESS -Ñesu… = %d\n", 
ªsu…
 ));

879  
ªsu…
;

881 
îr‹
:

882 
	`ERR_RPT
(("PaHo°_O≥nSåóm: ERROR -Ñesu… = %d\n", 
ªsu…
 ));

883 
	`PaHo°_Clo£Såóm
–
∑°
 );

884  
ªsu…
;

885 
	}
}

888 
PaEº‹
 
	$PaHo°_SèπOuçut
–
öã∫ÆP‹tAudioSåóm
 *
∑°
 )

890  
∑NoEº‹
;

891 
	}
}

894 
PaEº‹
 
	$PaHo°_SèπI≈ut
–
öã∫ÆP‹tAudioSåóm
 *
∑°
 )

896  
∑NoEº‹
;

897 
	}
}

900 
PaEº‹
 
	$PaHo°_SèπEngöe
–
öã∫ÆP‹tAudioSåóm
 *
∑°
 )

902 
PaHo°SoundC⁄åﬁ
 *
∑hsc
;

903 
PaEº‹
 
ªsu…
 = 
∑NoEº‹
;

904 
hªs
;

906 
∑hsc
 = (
PaHo°SoundC⁄åﬁ
 *Ë
∑°
->
∑°_Devi˚D©a
;

908 
∑°
->
∑°_St›So⁄
 = 0;

909 
∑°
->
∑°_St›Now
 = 0;

910 
∑°
->
∑°_IsA˘ive
 = 1;

916 
hªs
 = 
	`±hªad_¸óã
(&(
∑hsc
->
∑hsc_AudioThªad
),

917 
NULL
 ,

918 (
±hªad_fun˘i⁄_t
)
Pa_AudioThªadProc
, 
∑°
);

919 if–
hªs
 != 0 )

921 
ªsu…
 = 
∑Ho°Eº‹
;

922 
sPaHo°Eº‹
 = 
hªs
;

923 
∑hsc
->
∑hsc_IsAudioThªadVÆid
 = 0;

924 
îr‹
;

926 
∑hsc
->
∑hsc_IsAudioThªadVÆid
 = 1;

928 
îr‹
:

929  
ªsu…
;

930 
	}
}

933 
PaEº‹
 
	$PaHo°_St›Engöe
–
öã∫ÆP‹tAudioSåóm
 *
∑°
, 
ab‹t
 )

935 
hªs
;

936 
PaEº‹
 
ªsu…
 = 
∑NoEº‹
;

937 
PaHo°SoundC⁄åﬁ
 *
∑hsc
 = (PaHo°SoundC⁄åﬁ *Ë
∑°
->
∑°_Devi˚D©a
;

939 if–
∑hsc
 =
NULL
 )  
∑NoEº‹
;

942 
∑°
->
∑°_St›So⁄
 = 1;

944 if–
ab‹t
 ) 
∑°
->
∑°_St›Now
 = 1;

947 if–
∑hsc
->
∑hsc_IsAudioThªadVÆid
 )

950 i‡–!
	`±hªad_equÆ
–
∑hsc
->
∑hsc_AudioThªad
, 
	`±hªad_£lf
() ) )

952 
hªs
 = 
	`±hªad_joö
–
∑hsc
->
∑hsc_AudioThªad
, 
NULL
 );

956 
	`DBUG
(("PlayÅhread was stopped from itself - can't doÖthread_join()\n"));

957 
hªs
 = 0;

960 if–
hªs
 != 0 )

962 
ªsu…
 = 
∑Ho°Eº‹
;

963 
sPaHo°Eº‹
 = 
hªs
;

965 
∑hsc
->
∑hsc_IsAudioThªadVÆid
 = 0;

968 
∑°
->
∑°_IsA˘ive
 = 0;

970  
ªsu…
;

971 
	}
}

974 
PaEº‹
 
	$PaHo°_St›I≈ut
–
öã∫ÆP‹tAudioSåóm
 *
∑°
, 
ab‹t
 )

976  
∑NoEº‹
;

977 
	}
}

980 
PaEº‹
 
	$PaHo°_St›Ouçut
–
öã∫ÆP‹tAudioSåóm
 *
∑°
, 
ab‹t
 )

982  
∑NoEº‹
;

983 
	}
}

986 
PaEº‹
 
	$PaHo°_Clo£Såóm
–
öã∫ÆP‹tAudioSåóm
 *
∑°
 )

988 
PaHo°SoundC⁄åﬁ
 *
∑hsc
;

990 if–
∑°
 =
NULL
 )  
∑BadSåómPå
;

991 
∑hsc
 = (
PaHo°SoundC⁄åﬁ
 *Ë
∑°
->
∑°_Devi˚D©a
;

992 if–
∑hsc
 =
NULL
 )  
∑NoEº‹
;

994 if–
∑hsc
->
∑hsc_OuçutH™dÀ
 !
BAD_DEVICE_ID
 )

996 
îr
 = 0;

997 
	`DBUG
(("PaHost_CloseStream:áttemptÅo close output device handle = %d\n",

998 
∑hsc
->
∑hsc_OuçutH™dÀ
 ));

1000 
	`Pa_FlushSåóm
(
∑hsc
->
∑hsc_OuçutH™dÀ
);

1002 
îr
 = 
	`˛o£
(
∑hsc
->
∑hsc_OuçutH™dÀ
);

1003 if–
îr
 < 0 )

1005 
	`ERR_RPT
(("PaHost_CloseStream: warning, closing output device failed.\n"));

1009 if–(
∑hsc
->
∑hsc_I≈utH™dÀ
 !
BAD_DEVICE_ID
) &&

1010 (
∑hsc
->
∑hsc_I≈utH™dÀ
 !∑hsc->
∑hsc_OuçutH™dÀ
) )

1012 
îr
 = 0;

1013 
	`DBUG
(("PaHost_CloseStream:áttemptÅo close input device handle = %d\n",

1014 
∑hsc
->
∑hsc_I≈utH™dÀ
 ));

1016 
	`Pa_FlushSåóm
(
∑hsc
->
∑hsc_I≈utH™dÀ
);

1018 
îr
 = 
	`˛o£
(
∑hsc
->
∑hsc_I≈utH™dÀ
);

1019 if–
îr
 < 0 )

1021 
	`ERR_RPT
(("PaHost_CloseStream: warning, closing input device failed.\n"));

1024 
∑hsc
->
∑hsc_OuçutH™dÀ
 = 
BAD_DEVICE_ID
;

1025 
∑hsc
->
∑hsc_I≈utH™dÀ
 = 
BAD_DEVICE_ID
;

1027 if–
∑hsc
->
∑hsc_N©iveI≈utBuf„r
 )

1029 
	`‰ì
–
∑hsc
->
∑hsc_N©iveI≈utBuf„r
 );

1030 
∑hsc
->
∑hsc_N©iveI≈utBuf„r
 = 
NULL
;

1032 if–
∑hsc
->
∑hsc_N©iveOuçutBuf„r
 )

1034 
	`‰ì
–
∑hsc
->
∑hsc_N©iveOuçutBuf„r
 );

1035 
∑hsc
->
∑hsc_N©iveOuçutBuf„r
 = 
NULL
;

1038 
	`‰ì
–
∑hsc
 );

1039 
∑°
->
∑°_Devi˚D©a
 = 
NULL
;

1040  
∑NoEº‹
;

1041 
	}
}

1044 
PaEº‹
 
	$PaHo°_Tîm
( )

1047 
öã∫ÆP‹tAudioDevi˚
 *
∑d
, *
√xtPad
;

1048 
∑d
 = 
sDevi˚Li°
;

1049  
∑d
 !
NULL
 )

1051 
√xtPad
 = 
∑d
->
∑d_Next
;

1052 
	`DBUG
(("PaHo°_Tîm: fªeög %s\n", 
∑d
->
∑d_Devi˚Name
 ));

1053 
	`PaHo°_FªeFa°Mem‹y
–
∑d
, (
öã∫ÆP‹tAudioDevi˚
) );

1054 
∑d
 = 
√xtPad
;

1056 
sDevi˚Li°
 = 
NULL
;

1058 
	}
}

1063 
	$Pa_SÀï
–
m£c
 )

1066 
timevÆ
 
timeout
;

1067 
timeout
.
tv_£c
 = 
m£c
 / 1000;

1068 
timeout
.
tv_u£c
 = (
m£c
 % 1000) * 1000;

1069 
	`£À˘
–0, 
NULL
, NULL, NULL, &
timeout
 );

1071 
u£cs
 = 
m£c
 * 1000;

1072 
	`u¶ìp
–
u£cs
 );

1074 
	}
}

1082 *
	$PaHo°_AŒoˇãFa°Mem‹y
–
numByãs
 )

1084 *
addr
 = 
	`mÆloc
–
numByãs
 );

1085 if–
addr
 !
NULL
 ) 
	`mem£t
–addr, 0, 
numByãs
 );

1086  
addr
;

1087 
	}
}

1093 
	$PaHo°_FªeFa°Mem‹y
–*
addr
, 
numByãs
 )

1095 if–
addr
 !
NULL
 ) 
	`‰ì
(áddr );

1096 
	}
}

1100 
PaEº‹
 
	$PaHo°_SåómA˘ive
–
öã∫ÆP‹tAudioSåóm
 *
∑°
 )

1102 
PaHo°SoundC⁄åﬁ
 *
∑hsc
;

1103 if–
∑°
 =
NULL
 )  
∑BadSåómPå
;

1104 
∑hsc
 = (
PaHo°SoundC⁄åﬁ
 *Ë
∑°
->
∑°_Devi˚D©a
;

1105 if–
∑hsc
 =
NULL
 )  
∑I¡î«lEº‹
;

1106  (
PaEº‹
Ë(
∑°
->
∑°_IsA˘ive
 != 0);

1107 
	}
}

1110 
	$Pa_GëHo°Eº‹
( )

1112  (Ë
sPaHo°Eº‹
;

1113 
	}
}

	@portaudio/pa_unix_oss/pa_unix.h

45 
	sPaDrivîInfo


48 
	msize
;

50 c⁄° *
	m«me
;

51 
	md©a
;

53 
	tPaDrivîInfo
;

55 
	~<°dio.h
>

56 
	~<°dlib.h
>

58 
	~<mem‹y.h
>

59 
	~<m©h.h
>

60 
	~<sys/io˘l.h
>

61 
	~<sys/time.h
>

62 
	~<f˙é.h
>

63 
	~<uni°d.h
>

64 
	~<sig«l.h
>

65 
	~<sched.h
>

66 
	~<±hªad.h
>

67 
	~<î∫o.h
>

69 
	~"p‹èudio.h
"

70 
	~"∑_ho°.h
"

71 
	~"∑_åa˚.h
"

73 
	#PRINT
(
x
Ë{ 
¥ötf
 x; 
	`fÊush
(
°dout
); }

	)

74 
	#ERR_RPT
(
x
Ë
	`PRINT
(x)

	)

75 
	#DBUG
(
x
Ë

	)

76 
	#DBUGX
(
x
Ë

	)

78 
	#BAD_DEVICE_ID
 (-1)

	)

80 
	#MIN_LATENCY_MSEC
 (100)

	)

81 
	#MIN_TIMEOUT_MSEC
 (100)

	)

82 
	#MAX_TIMEOUT_MSEC
 (1000)

	)

85 #ifde‡
__löux__


86 
	#DEVICE_NAME_BASE
 "/dev/d•"

	)

88 
	#DEVICE_NAME_BASE
 "/dev/audio"

	)

91 
	#MAX_CHARS_DEVNAME
 (32)

	)

92 
	#MAX_SAMPLE_RATES
 (10)

	)

93 
	söã∫ÆP‹tAudioDevi˚


95 
öã∫ÆP‹tAudioDevi˚
 *
	m∑d_Next
;

96 
	m∑d_Sam∂eR©es
[
MAX_SAMPLE_RATES
];

97 
	m∑d_Devi˚Name
[
MAX_CHARS_DEVNAME
];

98 
PaDevi˚Info
 
	m∑d_Info
;

100 
	töã∫ÆP‹tAudioDevi˚
;

103 
	sPaHo°SoundC⁄åﬁ


105 
	m∑hsc_OuçutH™dÀ
;

106 
	m∑hsc_I≈utH™dÀ
;

107 
	m∑hsc_AudioPri‹ôy
;

108 
±hªad_t
 
	m∑hsc_AudioThªad
;

109 
	m∑hsc_IsAudioThªadVÆid
; 
pid_t
 
	m∑hsc_AudioThªadPID
;

110 
±hªad_t
 
	m∑hsc_W©chDogThªad
;

111 
	m∑hsc_IsW©chDogThªadVÆid
;

112 
	m∑hsc_W©chDogRun
;

113 
±hªad_t
 
	m∑hsc_C™¨yThªad
;

114 
	m∑hsc_IsC™¨yThªadVÆid
;

115 
timevÆ
 
	m∑hsc_C™¨yTime
;

116 
	m∑hsc_C™¨yRun
;

117 *
	m∑hsc_N©iveI≈utBuf„r
;

118 *
	m∑hsc_N©iveOuçutBuf„r
;

119 
	m∑hsc_ByãsPîI≈utBuf„r
;

120 
	m∑hsc_ByãsPîOuçutBuf„r
;

122 
timevÆ
 
	m∑hsc_E¡ryTime
;

123 
	m∑hsc_Invî£Mi¸osPîBuf„r
;

126 
	m∑hsc_La°PosPå
;

127 
	m∑hsc_La°SåómByãs
;

129 
	tPaHo°SoundC⁄åﬁ
;

133 
öã∫ÆP‹tAudioDevi˚
 *
Pa_GëI¡î«lDevi˚
–
PaDevi˚ID
 
id
 );

134 
PaEº‹
 
Pa_QuîyDevi˚s
( );

135 
PaEº‹
 
Pa_QuîyDevi˚
–c⁄° *
devi˚Name
, 
öã∫ÆP‹tAudioDevi˚
 *
∑d
 );

136 
PaEº‹
 
Pa_SëupDevi˚F‹m©
–
devH™dÀ
, 
numCh™√ls
, 
ßm∂eR©e
 );

137 
PaEº‹
 
Pa_SëupI≈utDevi˚F‹m©
–
devH™dÀ
, 
numCh™√ls
, 
ßm∂eR©e
 );

138 
PaEº‹
 
Pa_SëupOuçutDevi˚F‹m©
–
devH™dÀ
, 
numCh™√ls
, 
ßm∂eR©e
 );

139 
Pa_SëL©ícy
–
devH™dÀ
, 
numBuf„rs
, 
‰amesPîBuf„r
, 
ch™√lsPîFøme
 );

140 
Pa_Upd©eSåómTime
(
PaHo°SoundC⁄åﬁ
 *
∑hsc
);

141 
Pa_FlushSåóm
(
devH™dÀ
);

	@portaudio/pa_unix_oss/pa_unix_oss.c

41 
	~"∑_unix.h
"

43 #ifde‡
__löux__


44 
	~<löux/soundˇrd.h
>

46 
	~<machöe/soundˇrd.h
>

50 #i‚de‡
AFMT_S16_NE


51 
	#AFMT_S16_NE
 
	`Gë_AFMT_S16_NE
()

	)

56 
	$Gë_AFMT_S16_NE
( )

58 
ã°D©a
 = 1;

59 *
±r
 = (*Ë&
ã°D©a
;

60 
isLôée
 = ( *
±r
 == 1 );

61  
isLôée
 ? 
AFMT_S16_LE
 : 
AFMT_S16_BE
;

62 
	}
}

71 
PaEº‹
 
	$Pa_QuîyDevi˚
–c⁄° *
devi˚Name
, 
öã∫ÆP‹tAudioDevi˚
 *
∑d
 )

73 
ªsu…
 = 
∑Ho°Eº‹
;

74 
ãmpDevH™dÀ
;

75 
numCh™√ls
, 
maxNumCh™√ls
;

76 
f‹m©
;

77 
numSam∂eR©es
;

78 
ßm∂eR©e
;

79 
numR©esToTry
;

80 
œ°R©e
;

81 
øãsToTry
[9] = {96000, 48000, 44100, 32000, 24000, 22050, 16000, 11025, 8000};

82 
i
;

91 i‡–(
ãmpDevH™dÀ
 = 
	`›í
(
devi˚Name
,
O_WRONLY
|
O_NONBLOCK
)) == -1 )

93 
	`DBUG
(("Pa_QuîyDevi˚: couldÇŸ o≥¿%s\n", 
devi˚Name
 ));

94  
∑Ho°Eº‹
;

98 
∑d
->
∑d_Info
.
«tiveSam∂eF‹m©s
 = 0;

100 i‡(
	`io˘l
(
ãmpDevH™dÀ
, 
SNDCTL_DSP_GETFMTS
, &
f‹m©
) == -1)

102 
	`ERR_RPT
(("Pa_QueryDevice: couldÇot get format info\n" ));

103 
îr‹
;

105 if–
f‹m©
 & 
AFMT_U8
 ) 
∑d
->
∑d_Info
.
«tiveSam∂eF‹m©s
 |
∑UI¡8
;

106 if–
f‹m©
 & 
AFMT_S16_NE
 ) 
∑d
->
∑d_Info
.
«tiveSam∂eF‹m©s
 |
∑I¡16
;

113 
maxNumCh™√ls
 = 0;

114  
numCh™√ls
 = 1;ÇumChannels <= 16;ÇumChannels++ )

116 
ãmp
 = 
numCh™√ls
;

117 
	`DBUG
(("Pa_QuîyDevi˚: u£ SNDCTL_DSP_CHANNELS,ÇumCh™√l†%d\n", 
numCh™√ls
 ))

118 if(
	`io˘l
(
ãmpDevH™dÀ
, 
SNDCTL_DSP_CHANNELS
, &
ãmp
) < 0 )

121 if–
numCh™√ls
 > 2 ) ;

128 if–(
numCh™√ls
 > 2Ë&& (
ãmp
 !=ÇumChannels) ) ;

129 
	`DBUG
(("Pa_QuîyDevi˚:Åem∞%d\n", 
ãmp
 ))

130 if–
ãmp
 > 
maxNumCh™√ls
 ) maxNumChannels =Åemp;

135 if–
maxNumCh™√ls
 < 1 )

137 
°îeo
 = 1;

138 if(
	`io˘l
(
ãmpDevH™dÀ
, 
SNDCTL_DSP_STEREO
, &
°îeo
) < 0)

140 
maxNumCh™√ls
 = 1;

144 
maxNumCh™√ls
 = (
°îeo
) ? 2 : 1;

146 
	`DBUG
(("Pa_QuîyDevi˚: u£ SNDCTL_DSP_STEREO, maxNumCh™√l†%d\n", 
maxNumCh™√ls
 ))

149 
∑d
->
∑d_Info
.
maxOuçutCh™√ls
 = 
maxNumCh™√ls
;

150 
	`DBUG
(("Pa_QuîyDevi˚: maxNumCh™√l†%d\n", 
maxNumCh™√ls
))

156 
ãmp
 = 
maxNumCh™√ls
;

157 if–
ãmp
 > 2 )Åemp = 2;

158 
	`io˘l
(
ãmpDevH™dÀ
, 
SNDCTL_DSP_CHANNELS
, &
ãmp
);

164 
∑d
->
∑d_Info
.
maxI≈utCh™√ls
 =Öad->∑d_Info.
maxOuçutCh™√ls
;

166 
	`DBUG
(("Pa_QueryDevice: maxInputChannels = %d\n",

167 
∑d
->
∑d_Info
.
maxI≈utCh™√ls
))

173 
numSam∂eR©es
 = 0;

174 
œ°R©e
 = 0;

175 
numR©esToTry
 = (
øãsToTry
)/();

176 
i
 = 0; i < 
numR©esToTry
; i++)

178 
ßm∂eR©e
 = 
øãsToTry
[
i
];

180 i‡(
	`io˘l
(
ãmpDevH™dÀ
, 
SNDCTL_DSP_SPEED
, &
ßm∂eR©e
) >= 0 )

183 i‡(
ßm∂eR©e
 !
œ°R©e
)

185 
	`DBUG
(("Pa_QuîyDevi˚:áddög sam∂êøã: %d\n", 
ßm∂eR©e
))

186 
∑d
->
∑d_Sam∂eR©es
[
numSam∂eR©es
] = ()
ßm∂eR©e
;

187 
numSam∂eR©es
++;

188 
œ°R©e
 = 
ßm∂eR©e
;

192 
	`DBUG
(("Pa_QuîyDevi˚: d™g - gŸ sam∂êøã %dágaö!\n", 
ßm∂eR©e
))

197 
	`DBUG
(("Pa_QuîyDevi˚: föÆÇumSam∂eR©e†%d\n", 
numSam∂eR©es
))

198 i‡(
numSam∂eR©es
==0)

201 
	`ERR_RPT
(("Pa_QueryDevice:Ço supported sampleÑate (or SNDCTL_DSP_SPEED ioctl call failed). Force 44100 Hz\n" ));

202 
∑d
->
∑d_Sam∂eR©es
[
numSam∂eR©es
++] = 44100;

205 
∑d
->
∑d_Info
.
numSam∂eR©es
 =ÇumSampleRates;

206 
∑d
->
∑d_Info
.
ßm∂eR©es
 =Öad->
∑d_Sam∂eR©es
;

208 
∑d
->
∑d_Info
.
«me
 = 
devi˚Name
;

210 
ªsu…
 = 
∑NoEº‹
;

212 
îr‹
:

214 
	`˛o£
(
ãmpDevH™dÀ
);

216  
ªsu…
;

217 
	}
}

220 
PaEº‹
 
	$Pa_SëupDevi˚F‹m©
–
devH™dÀ
, 
numCh™√ls
, 
ßm∂eR©e
 )

222 
PaEº‹
 
ªsu…
 = 
∑NoEº‹
;

223 
tmp
;

227 
tmp
 = 
AFMT_S16_NE
;

228 if–
	`io˘l
(
devH™dÀ
,
SNDCTL_DSP_SETFMT
,&
tmp
) == -1)

230 
	`ERR_RPT
(("Pa_SetupDeviceFormat: couldÇot SNDCTL_DSP_SETFMT\n" ));

231  
∑Ho°Eº‹
;

233 if–
tmp
 !
AFMT_S16_NE
 )

235 
	`ERR_RPT
(("Pa_SetupDeviceFormat: HW doesÇot support AFMT_S16_NE\n" ));

236  
∑Ho°Eº‹
;

241 
tmp
 = 
numCh™√ls
;

242 i‡(
	`io˘l
(
devH™dÀ
, 
SNDCTL_DSP_CHANNELS
, &
numCh™√ls
) == -1)

244 
	`ERR_RPT
(("Pa_SetupDeviceFormat: couldÇot SNDCTL_DSP_CHANNELS\n" ));

245  
∑Ho°Eº‹
;

247 if–
tmp
 !
numCh™√ls
)

249 
	`ERR_RPT
(("Pa_SëupDevi˚F‹m©: HW d€†nŸ suµ‹à%d ch™√ls\n", 
numCh™√ls
 ));

250  
∑Ho°Eº‹
;

254 
tmp
 = 
ßm∂eR©e
;

255 if–
	`io˘l
(
devH™dÀ
,
SNDCTL_DSP_SPEED
,&
tmp
) == -1)

257 
	`ERR_RPT
(("Pa_SetupDeviceFormat: couldÇot SNDCTL_DSP_SPEED\n" ));

258  
∑Ho°Eº‹
;

260 if–
tmp
 !
ßm∂eR©e
 )

262 
≥r˚¡Eº‹
 = 
	`abs
–(100 * (
ßm∂eR©e
 - 
tmp
)) / sampleRate );

263 
	`PRINT
(("Pa_SetupDeviceFormat: warning -Ñequested sampleÑate = %d Hz - closest = %d\n",

264 
ßm∂eR©e
, 
tmp
 ));

268 if–
≥r˚¡Eº‹
 > 10 )

270 
	`ERR_RPT
(("Pa_SëupDevi˚F‹m©: HW d€†nŸ suµ‹à%d Hz sam∂êøã\n",
ßm∂eR©e
 ));

271  
∑Ho°Eº‹
;

275  
ªsu…
;

276 
	}
}

278 
PaEº‹
 
	$Pa_SëupOuçutDevi˚F‹m©
–
devH™dÀ
, 
numCh™√ls
, 
ßm∂eR©e
 )

280  
	`Pa_SëupDevi˚F‹m©
(
devH™dÀ
, 
numCh™√ls
, 
ßm∂eR©e
);

281 
	}
}

283 
PaEº‹
 
	$Pa_SëupI≈utDevi˚F‹m©
–
devH™dÀ
, 
numCh™√ls
, 
ßm∂eR©e
 )

285  
	`Pa_SëupDevi˚F‹m©
(
devH™dÀ
, 
numCh™√ls
, 
ßm∂eR©e
);

286 
	}
}

293 
	$CÆcHighîLogTwo
–
n
 )

295 
log2
 = 0;

296  (1<<
log2
Ë< 
n
 )Üog2++;

297  
log2
;

298 
	}
}

300 
	$Pa_SëL©ícy
–
devH™dÀ
, 
numBuf„rs
, 
‰amesPîBuf„r
, 
ch™√lsPîFøme
 )

302 
tmp
;

303 
buf„rSize
, 
powîOfTwo
;

306  
numBuf„rs
 > 8 )

308 
numBuf„rs
 = (numBuffers + 1) >> 1;

309 
‰amesPîBuf„r
 = framesPerBuffer << 1;

313 
buf„rSize
 = 
‰amesPîBuf„r
 * 
ch™√lsPîFøme
 * ();

316 
powîOfTwo
 = 
	`CÆcHighîLogTwo
–
buf„rSize
 );

317 
	`DBUG
(("Pa_SetLatency:ÇumBuffers = %d, framesPerBuffer = %d,ÖowerOfTwo = %d\n",

318 
numBuf„rs
, 
‰amesPîBuf„r
, 
powîOfTwo
 ));

321 
tmp
=(
numBuf„rs
<<16Ë+ 
powîOfTwo
;

323 if(
	`io˘l
(
devH™dÀ
,
SNDCTL_DSP_SETFRAGMENT
,&
tmp
) == -1)

325 
	`ERR_RPT
(("Pa_SetLatency: couldÇot SNDCTL_DSP_SETFRAGMENT\n" ));

327 
	`ERR_RPT
(("Pa_SetLatency:ÇumBuffers = %d, framesPerBuffer = %d,ÖowerOfTwo = %d\n",

328 
numBuf„rs
, 
‰amesPîBuf„r
, 
powîOfTwo
 ));

330 
	}
}

333 
PaTime°amp
 
	$Pa_SåómTime
–
P‹tAudioSåóm
 *
°ªam
 )

335 
öã∫ÆP‹tAudioSåóm
 *
∑°
 = (öã∫ÆP‹tAudioSåóm *Ë
°ªam
;

336 
PaHo°SoundC⁄åﬁ
 *
∑hsc
;

338 
cou¡_öfo
 
öfo
;

339 
dñè
;

340 
numch™
;

342 if–
∑°
 =
NULL
 )  
∑BadSåómPå
;

344 
∑hsc
 = (
PaHo°SoundC⁄åﬁ
 *Ë
∑°
->
∑°_Devi˚D©a
;

346 if–
∑hsc
->
∑hsc_N©iveOuçutBuf„r
 )

348 
	`io˘l
(
∑hsc
->
∑hsc_OuçutH™dÀ
, 
SNDCTL_DSP_GETOPTR
, &
öfo
);

349 
numch™
 = 
∑°
->
∑°_NumOuçutCh™√ls
;

353 
	`io˘l
(
∑hsc
->
∑hsc_I≈utH™dÀ
, 
SNDCTL_DSP_GETIPTR
, &
öfo
);

354 
numch™
 = 
∑°
->
∑°_NumI≈utCh™√ls
;

357 
dñè
 = 
öfo
.
byãs
 - 
∑hsc
->
∑hsc_La°PosPå
;

359 i‡(
dñè
 > 0x000FFFFF)

360 
dñè
 = 0;

362  (
∑hsc
->
∑hsc_La°SåómByãs
 + 
dñè
Ë/ (
numch™
 * ());

363 
	}
}

365 
	$Pa_Upd©eSåómTime
(
PaHo°SoundC⁄åﬁ
 *
∑hsc
)

367 
cou¡_öfo
 
öfo
;

368 
dñè
;

372 if–
∑hsc
->
∑hsc_N©iveOuçutBuf„r
 )

374 
	`io˘l
(
∑hsc
->
∑hsc_OuçutH™dÀ
, 
SNDCTL_DSP_GETOPTR
, &
öfo
);

378 
	`io˘l
(
∑hsc
->
∑hsc_I≈utH™dÀ
, 
SNDCTL_DSP_GETIPTR
, &
öfo
);

380 
dñè
 = 
öfo
.
byãs
 - 
∑hsc
->
∑hsc_La°PosPå
;

382 i‡(
dñè
 <= 0x000FFFFF) {

383 
∑hsc
->
∑hsc_La°SåómByãs
 +
dñè
;

384 
∑hsc
->
∑hsc_La°PosPå
 = 
öfo
.
byãs
;

386 
	}
}

388 
PaEº‹
 
	$Pa_FlushSåóm
(
devH™dÀ
)

392  
∑NoEº‹
;

393 
	}
}

	@portaudio/pa_win_ds/dsound_wrapper.c

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<m©h.h
>

39 
	#INITGUID


40 
	~<objba£.h
>

	)

41 
	~<unknwn.h
>

42 
	~"dsound_wøµî.h
"

43 
	~"∑_åa˚.h
"

46 
	$DSW_Tîm
–
DSoundWøµî
 *
dsw
 )

49 i‡(
dsw
->
dsw_OuçutBuf„r
)

51 
	`IDúe˘SoundBuf„r_St›
–
dsw
->
dsw_OuçutBuf„r
 );

52 
	`IDúe˘SoundBuf„r_Rñó£
–
dsw
->
dsw_OuçutBuf„r
 );

53 
dsw
->
dsw_OuçutBuf„r
 = 
NULL
;

55 #i‡
SUPPORT_AUDIO_CAPTURE


56 i‡(
dsw
->
dsw_I≈utBuf„r
)

58 
	`IDúe˘SoundC≠tuªBuf„r_St›
–
dsw
->
dsw_I≈utBuf„r
 );

59 
	`IDúe˘SoundC≠tuªBuf„r_Rñó£
–
dsw
->
dsw_I≈utBuf„r
 );

60 
dsw
->
dsw_I≈utBuf„r
 = 
NULL
;

62 i‡(
dsw
->
dsw_pDúe˘SoundC≠tuª
)

64 
	`IDúe˘SoundC≠tuª_Rñó£
–
dsw
->
dsw_pDúe˘SoundC≠tuª
 );

65 
dsw
->
dsw_pDúe˘SoundC≠tuª
 = 
NULL
;

68 i‡(
dsw
->
dsw_pDúe˘Sound
)

70 
	`IDúe˘Sound_Rñó£
–
dsw
->
dsw_pDúe˘Sound
 );

71 
dsw
->
dsw_pDúe˘Sound
 = 
NULL
;

73 
	}
}

75 
HRESULT
 
	$DSW_Inô
–
DSoundWøµî
 *
dsw
 )

77 
	`mem£t
–
dsw
, 0, (
DSoundWøµî
) );

79 
	}
}

81 
HRESULT
 
	$DSW_InôOuçutDevi˚
–
DSoundWøµî
 *
dsw
, 
LPGUID
 
ÕGUID
 )

84 
HRESULT
 
hr
 = 
	`Dúe˘SoundCª©e
–
ÕGUID
, &
dsw
->
dsw_pDúe˘Sound
, 
NULL
 );

85 if–
hr
 !
DS_OK
 )  hr;

86  
hr
;

87 
	}
}

90 
HRESULT
 
	$DSW_InôOuçutBuf„r
–
DSoundWøµî
 *
dsw
, 
nFømeR©e
, 
nCh™√ls
, 
byãsPîBuf„r
 )

92 
DWORD
 
dwD©aLí
;

93 
DWORD
 
∂ayCurs‹
;

94 
HRESULT
 
ªsu…
;

95 
LPDIRECTSOUNDBUFFER
 
pPrim¨yBuf„r
;

96 
HWND
 
hWnd
;

97 
HRESULT
 
hr
;

98 
WAVEFORMATEX
 
wfF‹m©
;

99 
DSBUFFERDESC
 
¥im¨yDesc
;

100 
DSBUFFERDESC
 
£c⁄d¨yDesc
;

101 * 
pDSBuffD©a
;

102 
LARGE_INTEGER
 
cou¡îFªquícy
;

103 
dsw
->
dsw_OuçutSize
 = 
byãsPîBuf„r
;

104 
dsw
->
dsw_OuçutRu¬ög
 = 
FALSE
;

105 
dsw
->
dsw_OuçutUndîÊows
 = 0;

106 
dsw
->
dsw_FømesWrôãn
 = 0;

107 
dsw
->
dsw_ByãsPîFøme
 = 
nCh™√ls
 * ();

113 
hWnd
 = 
	`GëDeskt›Wödow
();

116 i‡((
hr
 = 
	`IDúe˘Sound_SëCo›î©iveLevñ
–
dsw
->
dsw_pDúe˘Sound
,

117 
hWnd
, 
DSSCL_EXCLUSIVE
)Ë!
DS_OK
)

119  
hr
;

125 
	`ZîoMem‹y
(&
¥im¨yDesc
, (
DSBUFFERDESC
));

126 
¥im¨yDesc
.
dwSize
 = (
DSBUFFERDESC
);

127 
¥im¨yDesc
.
dwFœgs
 = 
DSBCAPS_PRIMARYBUFFER
;

128 
¥im¨yDesc
.
dwBuf„rByãs
 = 0;

129 
¥im¨yDesc
.
ÕwfxF‹m©
 = 
NULL
;

131 i‡((
ªsu…
 = 
	`IDúe˘Sound_Cª©eSoundBuf„r
–
dsw
->
dsw_pDúe˘Sound
,

132 &
¥im¨yDesc
, &
pPrim¨yBuf„r
, 
NULL
)Ë!
DS_OK
Ë 
ªsu…
;

134 
wfF‹m©
.
wF‹m©Tag
 = 
WAVE_FORMAT_PCM
;

135 
wfF‹m©
.
nCh™√ls
 =ÇChannels;

136 
wfF‹m©
.
nSam∂esPîSec
 = 
nFømeR©e
;

137 
wfF‹m©
.
wBôsPîSam∂e
 = 8 * ();

138 
wfF‹m©
.
nBlockAlign
 = wfF‹m©.
nCh™√ls
 * wfF‹m©.
wBôsPîSam∂e
 / 8;

139 
wfF‹m©
.
nAvgByãsPîSec
 = wfF‹m©.
nSam∂esPîSec
 * wfF‹m©.
nBlockAlign
;

140 
wfF‹m©
.
cbSize
 = 0;

142 if((
ªsu…
 = 
	`IDúe˘SoundBuf„r_SëF‹m©
–
pPrim¨yBuf„r
, &
wfF‹m©
)Ë!
DS_OK
) Ñesult;

145 
	`ZîoMem‹y
(&
£c⁄d¨yDesc
, (
DSBUFFERDESC
));

146 
£c⁄d¨yDesc
.
dwSize
 = (
DSBUFFERDESC
);

147 
£c⁄d¨yDesc
.
dwFœgs
 = 
DSBCAPS_GLOBALFOCUS
 | 
DSBCAPS_GETCURRENTPOSITION2
;

148 
£c⁄d¨yDesc
.
dwBuf„rByãs
 = 
byãsPîBuf„r
;

149 
£c⁄d¨yDesc
.
ÕwfxF‹m©
 = &
wfF‹m©
;

151 i‡((
ªsu…
 = 
	`IDúe˘Sound_Cª©eSoundBuf„r
–
dsw
->
dsw_pDúe˘Sound
,

152 &
£c⁄d¨yDesc
, &
dsw
->
dsw_OuçutBuf„r
, 
NULL
)Ë!
DS_OK
Ë 
ªsu…
;

154 i‡((
ªsu…
 = 
	`IDúe˘SoundBuf„r_Lock
–
dsw
->
dsw_OuçutBuf„r
, 0, dsw->
dsw_OuçutSize
, (
LPVOID
*)&
pDSBuffD©a
,

155 &
dwD©aLí
, 
NULL
, 0, 0)Ë!
DS_OK
Ë 
ªsu…
;

157 
	`ZîoMem‹y
(
pDSBuffD©a
, 
dwD©aLí
);

159 i‡((
ªsu…
 = 
	`IDúe˘SoundBuf„r_U∆ock
–
dsw
->
dsw_OuçutBuf„r
, 
pDSBuffD©a
, 
dwD©aLí
, 
NULL
, 0)Ë!
DS_OK
) Ñesult;

160 if–
	`QuîyPîf‹m™˚Fªquícy
–&
cou¡îFªquícy
 ) )

162 
‰amesInBuf„r
 = 
byãsPîBuf„r
 / (
nCh™√ls
 * ());

163 
dsw
->
dsw_Cou¡îTicksPîBuf„r
.
QuadP¨t
 = (
cou¡îFªquícy
.QuadP¨à* 
‰amesInBuf„r
Ë/ 
nFømeR©e
;

164 
	`AddTø˚Mesßge
("dsw_Cou¡îTicksPîBuf„∏%d\n", 
dsw
->
dsw_Cou¡îTicksPîBuf„r
.
LowP¨t
 );

168 
dsw
->
dsw_Cou¡îTicksPîBuf„r
.
QuadP¨t
 = 0;

172 
hr
 = 
	`IDúe˘SoundBuf„r_GëCuºítPosôi⁄
–
dsw
->
dsw_OuçutBuf„r
, &
∂ayCurs‹
, &dsw->
dsw_WrôeOff£t
 );

173 if–
hr
 !
DS_OK
 )

175  
hr
;

177 
dsw
->
dsw_FømesWrôãn
 = dsw->
dsw_WrôeOff£t
 / dsw->
dsw_ByãsPîFøme
;

179  
DS_OK
;

180 
	}
}

183 
HRESULT
 
	$DSW_SèπOuçut
–
DSoundWøµî
 *
dsw
 )

185 
HRESULT
 
hr
;

186 
	`QuîyPîf‹m™˚Cou¡î
–&
dsw
->
dsw_La°PœyTime
 );

187 
dsw
->
dsw_La°PœyCurs‹
 = 0;

188 
dsw
->
dsw_FømesPœyed
 = 0;

189 
hr
 = 
	`IDúe˘SoundBuf„r_SëCuºítPosôi⁄
–
dsw
->
dsw_OuçutBuf„r
, 0 );

190 if–
hr
 !
DS_OK
 )

192  
hr
;

195 if–
dsw
->
dsw_OuçutBuf„r
 !
NULL
 )

197 
hr
 = 
	`IDúe˘SoundBuf„r_Pœy
–
dsw
->
dsw_OuçutBuf„r
, 0, 0, 
DSBPLAY_LOOPING
 );

198 if–
hr
 !
DS_OK
 )

200  
hr
;

202 
dsw
->
dsw_OuçutRu¬ög
 = 
TRUE
;

206 
	}
}

208 
HRESULT
 
	$DSW_St›Ouçut
–
DSoundWøµî
 *
dsw
 )

211 if–
dsw
->
dsw_OuçutBuf„r
 !
NULL
 )

213 
dsw
->
dsw_OuçutRu¬ög
 = 
FALSE
;

214  
	`IDúe˘SoundBuf„r_St›
–
dsw
->
dsw_OuçutBuf„r
 );

217 
	}
}

220 
HRESULT
 
	$DSW_QuîyOuçutS∑˚
–
DSoundWøµî
 *
dsw
, *
byãsEm±y
 )

222 
HRESULT
 
hr
;

223 
DWORD
 
∂ayCurs‹
;

224 
DWORD
 
wrôeCurs‹
;

225 
numByãsEm±y
;

226 
∂ayWrôeG≠
;

231 
hr
 = 
	`IDúe˘SoundBuf„r_GëCuºítPosôi⁄
–
dsw
->
dsw_OuçutBuf„r
, &
∂ayCurs‹
, &
wrôeCurs‹
 );

232 if–
hr
 !
DS_OK
 )

234  
hr
;

236 
	`AddTø˚Mesßge
("∂ayCurs‹", 
∂ayCurs‹
);

237 
	`AddTø˚Mesßge
("dsw_WrôeOff£t", 
dsw
->
dsw_WrôeOff£t
);

239 
∂ayWrôeG≠
 = 
wrôeCurs‹
 - 
∂ayCurs‹
;

240 if–
∂ayWrôeG≠
 < 0 )ÖœyWrôeG≠ +
dsw
->
dsw_OuçutSize
;

243 if–
dsw
->
dsw_OuçutRu¬ög
 && (dsw->
dsw_Cou¡îTicksPîBuf„r
.
QuadP¨t
 != 0) )

246 
LARGE_INTEGER
 
cuºítTime
;

247 
LARGE_INTEGER
 
ñ≠£dTime
;

248 
byãsPœyed
;

249 
byãsEx≥˘ed
;

250 
buf„rsWøµed
;

251 
	`QuîyPîf‹m™˚Cou¡î
–&
cuºítTime
 );

252 
ñ≠£dTime
.
QuadP¨t
 = 
cuºítTime
.QuadP¨à- 
dsw
->
dsw_La°PœyTime
.QuadPart;

253 
dsw
->
dsw_La°PœyTime
 = 
cuºítTime
;

255 
byãsPœyed
 = 
∂ayCurs‹
 - 
dsw
->
dsw_La°PœyCurs‹
;

256 if–
byãsPœyed
 < 0 ) byãsPœyed +
dsw
->
dsw_OuçutSize
;

257 
dsw
->
dsw_La°PœyCurs‹
 = 
∂ayCurs‹
;

259 
byãsEx≥˘ed
 = (Ë((
ñ≠£dTime
.
QuadP¨t
 * 
dsw
->
dsw_OuçutSize
Ë/ dsw->
dsw_Cou¡îTicksPîBuf„r
.QuadPart);

260 
buf„rsWøµed
 = (
byãsEx≥˘ed
 - 
byãsPœyed
Ë/ 
dsw
->
dsw_OuçutSize
;

261 if–
buf„rsWøµed
 > 0 )

263 
	`AddTø˚Mesßge
("∂ayCurs‹ wøµed! byãsPœyed", 
byãsPœyed
 );

264 
	`AddTø˚Mesßge
("∂ayCurs‹ wøµed! byãsEx≥˘ed", 
byãsEx≥˘ed
 );

265 
∂ayCurs‹
 +(
buf„rsWøµed
 * 
dsw
->
dsw_OuçutSize
);

266 
byãsPœyed
 +(
buf„rsWøµed
 * 
dsw
->
dsw_OuçutSize
);

269 
dsw
->
dsw_FømesPœyed
 +(
byãsPœyed
 / dsw->
dsw_ByãsPîFøme
);

271 
numByãsEm±y
 = 
∂ayCurs‹
 - 
dsw
->
dsw_WrôeOff£t
;

272 if–
numByãsEm±y
 < 0 )ÇumByãsEm±y +
dsw
->
dsw_OuçutSize
;

274 if–
numByãsEm±y
 > (
dsw
->
dsw_OuçutSize
 - 
∂ayWrôeG≠
) )

276 if–
dsw
->
dsw_OuçutRu¬ög
 )

278 
dsw
->
dsw_OuçutUndîÊows
 += 1;

279 
	`AddTø˚Mesßge
("undîÊow dëe˘ed!ÇumByãsEm±y", 
numByãsEm±y
 );

281 
dsw
->
dsw_WrôeOff£t
 = 
wrôeCurs‹
;

282 
numByãsEm±y
 = 
dsw
->
dsw_OuçutSize
 - 
∂ayWrôeG≠
;

284 *
byãsEm±y
 = 
numByãsEm±y
;

285  
hr
;

286 
	}
}

289 
HRESULT
 
	$DSW_ZîoEm±yS∑˚
–
DSoundWøµî
 *
dsw
 )

291 
HRESULT
 
hr
;

292 
LPBYTE
 
Õbuf1
 = 
NULL
;

293 
LPBYTE
 
Õbuf2
 = 
NULL
;

294 
DWORD
 
dwsize1
 = 0;

295 
DWORD
 
dwsize2
 = 0;

296 
byãsEm±y
;

297 
hr
 = 
	`DSW_QuîyOuçutS∑˚
–
dsw
, &
byãsEm±y
 );

298 i‡(
hr
 !
DS_OK
)  hr;

299 if–
byãsEm±y
 =0 )  
DS_OK
;

301 
hr
 = 
	`IDúe˘SoundBuf„r_Lock
–
dsw
->
dsw_OuçutBuf„r
, dsw->
dsw_WrôeOff£t
, 
byãsEm±y
, (**Ë&
Õbuf1
, &
dwsize1
,

302 (**Ë&
Õbuf2
, &
dwsize2
, 0);

303 i‡(
hr
 =
DS_OK
)

306 
	`ZîoMem‹y
(
Õbuf1
, 
dwsize1
);

307 if(
Õbuf2
 !
NULL
)

309 
	`ZîoMem‹y
(
Õbuf2
, 
dwsize2
);

312 
dsw
->
dsw_WrôeOff£t
 = (dsw->dsw_WrôeOff£à+ 
dwsize1
 + 
dwsize2
Ë% dsw->
dsw_OuçutSize
;

313 
	`IDúe˘SoundBuf„r_U∆ock
–
dsw
->
dsw_OuçutBuf„r
, 
Õbuf1
, 
dwsize1
, 
Õbuf2
, 
dwsize2
);

314 
dsw
->
dsw_FømesWrôãn
 +
byãsEm±y
 / dsw->
dsw_ByãsPîFøme
;

316  
hr
;

317 
	}
}

320 
HRESULT
 
	$DSW_WrôeBlock
–
DSoundWøµî
 *
dsw
, *
buf
, 
numByãs
 )

322 
HRESULT
 
hr
;

323 
LPBYTE
 
Õbuf1
 = 
NULL
;

324 
LPBYTE
 
Õbuf2
 = 
NULL
;

325 
DWORD
 
dwsize1
 = 0;

326 
DWORD
 
dwsize2
 = 0;

328 
hr
 = 
	`IDúe˘SoundBuf„r_Lock
–
dsw
->
dsw_OuçutBuf„r
, dsw->
dsw_WrôeOff£t
, 
numByãs
, (**Ë&
Õbuf1
, &
dwsize1
,

329 (**Ë&
Õbuf2
, &
dwsize2
, 0);

330 i‡(
hr
 =
DS_OK
)

333 
	`C›yMem‹y
(
Õbuf1
, 
buf
, 
dwsize1
);

334 if(
Õbuf2
 !
NULL
)

336 
	`C›yMem‹y
(
Õbuf2
, 
buf
+
dwsize1
, 
dwsize2
);

339 
dsw
->
dsw_WrôeOff£t
 = (dsw->dsw_WrôeOff£à+ 
dwsize1
 + 
dwsize2
Ë% dsw->
dsw_OuçutSize
;

340 
	`IDúe˘SoundBuf„r_U∆ock
–
dsw
->
dsw_OuçutBuf„r
, 
Õbuf1
, 
dwsize1
, 
Õbuf2
, 
dwsize2
);

341 
dsw
->
dsw_FømesWrôãn
 +
numByãs
 / dsw->
dsw_ByãsPîFøme
;

343  
hr
;

344 
	}
}

347 
DWORD
 
	$DSW_GëOuçutSètus
–
DSoundWøµî
 *
dsw
 )

349 
DWORD
 
°©us
;

350 i‡(
	`IDúe˘SoundBuf„r_GëSètus
–
dsw
->
dsw_OuçutBuf„r
, &
°©us
 ) !
DS_OK
)

351 –
DSERR_INVALIDPARAM
 );

353 –
°©us
 );

354 
	}
}

356 #i‡
SUPPORT_AUDIO_CAPTURE


362 
HRESULT
 
	$DSW_InôI≈utDevi˚
–
DSoundWøµî
 *
dsw
, 
LPGUID
 
ÕGUID
 )

364 
HRESULT
 
hr
 = 
	`Dúe˘SoundC≠tuªCª©e
–
ÕGUID
, &
dsw
->
dsw_pDúe˘SoundC≠tuª
, 
NULL
 );

365 if–
hr
 !
DS_OK
 )  hr;

366  
hr
;

367 
	}
}

369 
HRESULT
 
	$DSW_InôI≈utBuf„r
–
DSoundWøµî
 *
dsw
, 
nFømeR©e
, 
nCh™√ls
, 
byãsPîBuf„r
 )

371 
DSCBUFFERDESC
 
ˇ±uªDesc
;

372 
WAVEFORMATEX
 
wfF‹m©
;

373 
HRESULT
 
ªsu…
;

375 
wfF‹m©
.
wF‹m©Tag
 = 
WAVE_FORMAT_PCM
;

376 
wfF‹m©
.
nCh™√ls
 =ÇChannels;

377 
wfF‹m©
.
nSam∂esPîSec
 = 
nFømeR©e
;

378 
wfF‹m©
.
wBôsPîSam∂e
 = 8 * ();

379 
wfF‹m©
.
nBlockAlign
 = wfF‹m©.
nCh™√ls
 * (wfF‹m©.
wBôsPîSam∂e
 / 8);

380 
wfF‹m©
.
nAvgByãsPîSec
 = wfF‹m©.
nSam∂esPîSec
 * wfF‹m©.
nBlockAlign
;

381 
wfF‹m©
.
cbSize
 = 0;

382 
dsw
->
dsw_I≈utSize
 = 
byãsPîBuf„r
;

385 
	`ZîoMem‹y
(&
ˇ±uªDesc
, (
DSCBUFFERDESC
));

386 
ˇ±uªDesc
.
dwSize
 = (
DSCBUFFERDESC
);

387 
ˇ±uªDesc
.
dwFœgs
 = 0;

388 
ˇ±uªDesc
.
dwBuf„rByãs
 = 
byãsPîBuf„r
;

389 
ˇ±uªDesc
.
ÕwfxF‹m©
 = &
wfF‹m©
;

391 i‡((
ªsu…
 = 
	`IDúe˘SoundC≠tuª_Cª©eC≠tuªBuf„r
–
dsw
->
dsw_pDúe˘SoundC≠tuª
,

392 &
ˇ±uªDesc
, &
dsw
->
dsw_I≈utBuf„r
, 
NULL
)Ë!
DS_OK
Ë 
ªsu…
;

393 
dsw
->
dsw_RódOff£t
 = 0;

394  
DS_OK
;

395 
	}
}

398 
HRESULT
 
	$DSW_SèπI≈ut
–
DSoundWøµî
 *
dsw
 )

401 if–
dsw
->
dsw_I≈utBuf„r
 !
NULL
 )

403  
	`IDúe˘SoundC≠tuªBuf„r_Sèπ
–
dsw
->
dsw_I≈utBuf„r
, 
DSCBSTART_LOOPING
 );

406 
	}
}

409 
HRESULT
 
	$DSW_St›I≈ut
–
DSoundWøµî
 *
dsw
 )

412 if–
dsw
->
dsw_I≈utBuf„r
 !
NULL
 )

414  
	`IDúe˘SoundC≠tuªBuf„r_St›
–
dsw
->
dsw_I≈utBuf„r
 );

417 
	}
}

420 
HRESULT
 
	$DSW_QuîyI≈utFûÀd
–
DSoundWøµî
 *
dsw
, *
byãsFûÀd
 )

422 
HRESULT
 
hr
;

423 
DWORD
 
ˇ±uªPos
;

424 
DWORD
 
ªadPos
;

425 
fûÀd
;

429 
hr
 = 
	`IDúe˘SoundC≠tuªBuf„r_GëCuºítPosôi⁄
–
dsw
->
dsw_I≈utBuf„r
, &
ˇ±uªPos
, &
ªadPos
 );

430 if–
hr
 !
DS_OK
 )

432  
hr
;

434 
fûÀd
 = 
ªadPos
 - 
dsw
->
dsw_RódOff£t
;

435 if–
fûÀd
 < 0 ) fûÀd +
dsw
->
dsw_I≈utSize
;

436 *
byãsFûÀd
 = 
fûÀd
;

437  
hr
;

438 
	}
}

441 
HRESULT
 
	$DSW_RódBlock
–
DSoundWøµî
 *
dsw
, *
buf
, 
numByãs
 )

443 
HRESULT
 
hr
;

444 
LPBYTE
 
Õbuf1
 = 
NULL
;

445 
LPBYTE
 
Õbuf2
 = 
NULL
;

446 
DWORD
 
dwsize1
 = 0;

447 
DWORD
 
dwsize2
 = 0;

449 
hr
 = 
	`IDúe˘SoundC≠tuªBuf„r_Lock
 ( 
dsw
->
dsw_I≈utBuf„r
, dsw->
dsw_RódOff£t
, 
numByãs
, (**Ë&
Õbuf1
, &
dwsize1
,

450 (**Ë&
Õbuf2
, &
dwsize2
, 0);

451 i‡(
hr
 =
DS_OK
)

454 
	`C›yMem‹y
–
buf
, 
Õbuf1
, 
dwsize1
);

455 if(
Õbuf2
 !
NULL
)

457 
	`C›yMem‹y
–
buf
+
dwsize1
, 
Õbuf2
, 
dwsize2
);

460 
dsw
->
dsw_RódOff£t
 = (dsw->dsw_RódOff£à+ 
dwsize1
 + 
dwsize2
Ë% dsw->
dsw_I≈utSize
;

461 
	`IDúe˘SoundC≠tuªBuf„r_U∆ock
 ( 
dsw
->
dsw_I≈utBuf„r
, 
Õbuf1
, 
dwsize1
, 
Õbuf2
, 
dwsize2
);

463  
hr
;

464 
	}
}

	@portaudio/pa_win_ds/dsound_wrapper.h

1 #i‚de‡
__DSOUND_WRAPPER_H


2 
	#__DSOUND_WRAPPER_H


	)

38 
	~<DSound.h
>

39 #i‡!
deföed
(
BOOL
)

40 
	#BOOL
 

	)

42 #i‚de‡
SUPPORT_AUDIO_CAPTURE


43 
	#SUPPORT_AUDIO_CAPTURE
 (1)

	)

46 #ifde‡
__˝lu•lus


51 
	#DSW_NUM_POSITIONS
 (4)

	)

52 
	#DSW_NUM_EVENTS
 (5)

	)

53 
	#DSW_TERMINATION_EVENT
 (
DSW_NUM_POSITIONS
)

	)

58 
LPDIRECTSOUND
 
dsw_pDúe˘Sound
;

59 
LPDIRECTSOUNDBUFFER
 
dsw_OuçutBuf„r
;

60 
DWORD
 
dsw_WrôeOff£t
;

61 
INT
 
dsw_OuçutSize
;

62 
INT
 
dsw_ByãsPîFøme
;

64 
LARGE_INTEGER
 
dsw_Cou¡îTicksPîBuf„r
;

65 
LARGE_INTEGER
 
dsw_La°PœyTime
;

66 
UINT
 
dsw_La°PœyCurs‹
;

67 
UINT
 
dsw_OuçutUndîÊows
;

68 
BOOL
 
dsw_OuçutRu¬ög
;

70 
dsw_FømesWrôãn
;

71 
dsw_FømesPœyed
;

72 #i‡
SUPPORT_AUDIO_CAPTURE


74 
LPDIRECTSOUNDCAPTURE
 
dsw_pDúe˘SoundC≠tuª
;

75 
LPDIRECTSOUNDCAPTUREBUFFER
 
dsw_I≈utBuf„r
;

76 
UINT
 
dsw_RódOff£t
;

77 
UINT
 
dsw_I≈utSize
;

81 
	tDSoundWøµî
;

82 
HRESULT
 
DSW_Inô
–
DSoundWøµî
 *
dsw
 );

83 
DSW_Tîm
–
DSoundWøµî
 *
dsw
 );

84 
HRESULT
 
DSW_InôOuçutBuf„r
–
DSoundWøµî
 *
dsw
, 
nFømeR©e
,

85 
nCh™√ls
, 
bufSize
 );

86 
HRESULT
 
DSW_SèπOuçut
–
DSoundWøµî
 *
dsw
 );

87 
HRESULT
 
DSW_St›Ouçut
–
DSoundWøµî
 *
dsw
 );

88 
DWORD
 
DSW_GëOuçutSètus
–
DSoundWøµî
 *
dsw
 );

89 
HRESULT
 
DSW_WrôeBlock
–
DSoundWøµî
 *
dsw
, *
buf
, 
numByãs
 );

90 
HRESULT
 
DSW_ZîoEm±yS∑˚
–
DSoundWøµî
 *
dsw
 );

91 
HRESULT
 
DSW_QuîyOuçutS∑˚
–
DSoundWøµî
 *
dsw
, *
byãsEm±y
 );

92 
HRESULT
 
DSW_Enumî©e
–
DSoundWøµî
 *
dsw
 );

94 #i‡
SUPPORT_AUDIO_CAPTURE


95 
HRESULT
 
DSW_InôI≈utBuf„r
–
DSoundWøµî
 *
dsw
, 
nFømeR©e
,

96 
nCh™√ls
, 
bufSize
 );

97 
HRESULT
 
DSW_SèπI≈ut
–
DSoundWøµî
 *
dsw
 );

98 
HRESULT
 
DSW_St›I≈ut
–
DSoundWøµî
 *
dsw
 );

99 
HRESULT
 
DSW_RódBlock
–
DSoundWøµî
 *
dsw
, *
buf
, 
numByãs
 );

100 
HRESULT
 
DSW_QuîyI≈utFûÀd
–
DSoundWøµî
 *
dsw
, *
byãsFûÀd
 );

103 #ifde‡
__˝lu•lus


	@portaudio/pa_win_ds/pa_dsound.c

42 
	~<°dio.h
>

43 
	~<°dlib.h
>

44 #i‚de‡
__MWERKS__


45 
	~<mÆloc.h
>

46 
	~<mem‹y.h
>

48 
	~<m©h.h
>

49 
	~"p‹èudio.h
"

50 
	~"∑_ho°.h
"

51 
	~"∑_åa˚.h
"

52 
	~"dsound_wøµî.h
"

54 
	#PRINT
(
x
Ë{ 
¥ötf
 x; 
	`fÊush
(
°dout
); }

	)

55 
	#ERR_RPT
(
x
Ë
	`PRINT
(x)

	)

56 
	#DBUG
(
x
Ë

	)

57 
	#DBUGX
(
x
Ë

	)

59 
	#PA_USE_HIGH_LATENCY
 (0)

	)

60 #i‡
PA_USE_HIGH_LATENCY


61 
	#PA_WIN_9X_LATENCY
 (500)

	)

62 
	#PA_WIN_NT_LATENCY
 (600)

	)

64 
	#PA_WIN_9X_LATENCY
 (140)

	)

65 
	#PA_WIN_NT_LATENCY
 (280)

	)

68 
	#PA_WIN_WDM_LATENCY
 (120)

	)

71 
	#PA_SIMULATE_UNDERFLOW
 (0)

	)

72 #i‡
PA_SIMULATE_UNDERFLOW


73 
	ggUndîCÆlbackCou¡î
 = 0;

74 
	#UNDER_START_GAP
 (10)

	)

75 
	#UNDER_STOP_GAP
 (
UNDER_START_GAP
 + 4)

	)

79 
öã∫ÆP‹tAudioSåóm
 
	töã∫ÆP‹tAudioSåóm
;

80 
	söã∫ÆP‹tAudioDevi˚


82 
GUID
 
	m∑d_GUID
;

83 
GUID
 *
	m∑d_ÕGUID
;

84 
	m∑d_Sam∂eR©es
[10];

85 
PaDevi˚Info
 
	m∑d_Info
;

87 
	töã∫ÆP‹tAudioDevi˚
;

90 
	sPaHo°SoundC⁄åﬁ


92 
DSoundWøµî
 
	m∑hsc_DSoundWøµî
;

93 
MMRESULT
 
	m∑hsc_TimîID
;

94 
BOOL
 
	m∑hsc_IfInsideCÆlback
;

95 *
	m∑hsc_N©iveBuf„r
;

96 
	m∑hsc_ByãsPîBuf„r
;

97 
	m∑hsc_VÆidFømesWrôãn
;

98 
	m∑hsc_FømesPîDSBuf„r
;

100 
LARGE_INTEGER
 
	m∑hsc_E¡ryCou¡
;

101 
	m∑hsc_Invî£TicksPîU£rBuf„r
;

103 
	tPaHo°SoundC⁄åﬁ
;

107 
	gsNumDevi˚s
 = 0;

108 
	gsDevi˚Index
 = 0;

109 
öã∫ÆP‹tAudioDevi˚
 *
	gsDevi˚s
 = 
NULL
;

110 
	gsDeÁu…I≈utDevi˚ID
 = 
∑NoDevi˚
;

111 
	gsDeÁu…OuçutDevi˚ID
 = 
∑NoDevi˚
;

112 
	gsEnumî©i⁄Eº‹
;

113 
	gsPaHo°Eº‹
 = 0;

115 
öã∫ÆP‹tAudioDevi˚
 *
Pa_GëI¡î«lDevi˚
–
PaDevi˚ID
 
id
 );

116 
BOOL
 
CALLBACK
 
Pa_EnumProc
(
LPGUID
 
ÕGUID
,

117 
LPCTSTR
 
ÕszDesc
,

118 
LPCTSTR
 
ÕszDrvName
,

119 
LPVOID
 
ÕC⁄ãxt
 );

120 
BOOL
 
CALLBACK
 
Pa_Cou¡DevProc
(
LPGUID
 
ÕGUID
,

121 
LPCTSTR
 
ÕszDesc
,

122 
LPCTSTR
 
ÕszDrvName
,

123 
LPVOID
 
ÕC⁄ãxt
 );

124 
Pa_QuîyDevi˚s
( );

125 
CALLBACK
 
Pa_TimîCÆlback
(
UINT
 
uID
, UINT 
uMsg
,

126 
DWORD
 
dwU£r
, DWORD 
dw1
, DWORD 
dw2
);

129 
	$Pa_SèπUßgeCÆcuœti⁄
–
öã∫ÆP‹tAudioSåóm
 *
∑°
 )

131 
PaHo°SoundC⁄åﬁ
 *
∑hsc
 = (PaHo°SoundC⁄åﬁ *Ë
∑°
->
∑°_Devi˚D©a
;

132 if–
∑hsc
 =
NULL
 ) ;

134 
	`QuîyPîf‹m™˚Cou¡î
–&
∑hsc
->
∑hsc_E¡ryCou¡
 );

135 
	}
}

137 
	$Pa_EndUßgeCÆcuœti⁄
–
öã∫ÆP‹tAudioSåóm
 *
∑°
 )

139 
LARGE_INTEGER
 
CuºítCou¡
 = { 0, 0 };

140 
PaHo°SoundC⁄åﬁ
 *
∑hsc
 = (PaHo°SoundC⁄åﬁ *Ë
∑°
->
∑°_Devi˚D©a
;

141 if–
∑hsc
 =
NULL
 ) ;

146 
	#LOWPASS_COEFFICIENT_0
 (0.9)

	)

147 
	#LOWPASS_COEFFICIENT_1
 (0.99999 - 
LOWPASS_COEFFICIENT_0
)

	)

148 if–
	`QuîyPîf‹m™˚Cou¡î
–&
CuºítCou¡
 ) )

150 
LONGLONG
 
InsideCou¡
 = 
CuºítCou¡
.
QuadP¨t
 - 
∑hsc
->
∑hsc_E¡ryCou¡
.QuadPart;

151 
√wUßge
 = 
InsideCou¡
 * 
∑hsc
->
∑hsc_Invî£TicksPîU£rBuf„r
;

152 
∑°
->
∑°_Ußge
 = (
LOWPASS_COEFFICIENT_0
 *Öast->past_Usage) +

153 (
LOWPASS_COEFFICIENT_1
 * 
√wUßge
);

155 
	}
}

158 
PaEº‹
 
	$Pa_QuîyDevi˚s
( )

160 
numByãs
;

161 
sDeÁu…I≈utDevi˚ID
 = 
∑NoDevi˚
;

162 
sDeÁu…OuçutDevi˚ID
 = 
∑NoDevi˚
;

164 
sNumDevi˚s
 = 0;

165 
	`Dúe˘SoundEnumî©e
–(
LPDSENUMCALLBACK
)
Pa_Cou¡DevProc
, 
NULL
 );

166 #i‡
SUPPORT_AUDIO_CAPTURE


167 
	`Dúe˘SoundC≠tuªEnumî©e
–(
LPDSENUMCALLBACK
)
Pa_Cou¡DevProc
, 
NULL
 );

170 
numByãs
 = 
sNumDevi˚s
 * (
öã∫ÆP‹tAudioDevi˚
);

171 
sDevi˚s
 = (
öã∫ÆP‹tAudioDevi˚
 *)
	`PaHo°_AŒoˇãFa°Mem‹y
–
numByãs
 );

172 if–
sDevi˚s
 =
NULL
 )  
∑Insufficõ¡Mem‹y
;

174 
sDevi˚Index
 = 0;

175 
sEnumî©i⁄Eº‹
 = 0;

176 
	`Dúe˘SoundEnumî©e
–(
LPDSENUMCALLBACK
)
Pa_EnumProc
, (*)0 );

177 #i‡
SUPPORT_AUDIO_CAPTURE


178 if–
sEnumî©i⁄Eº‹
 !
∑NoEº‹
 )  sEnumerationError;

179 
sEnumî©i⁄Eº‹
 = 0;

180 
	`Dúe˘SoundC≠tuªEnumî©e
–(
LPDSENUMCALLBACK
)
Pa_EnumProc
, (*)1 );

182  
sEnumî©i⁄Eº‹
;

183 
	}
}

185 
	$Pa_GëHo°Eº‹
()

187  
sPaHo°Eº‹
;

188 
	}
}

192 
BOOL
 
CALLBACK
 
	$Pa_Cou¡DevProc
(
LPGUID
 
ÕGUID
,

193 
LPCTSTR
 
ÕszDesc
,

194 
LPCTSTR
 
ÕszDrvName
,

195 
LPVOID
 
ÕC⁄ãxt
 )

197 
sNumDevi˚s
++;

198  
TRUE
;

199 
	}
}

203 
BOOL
 
CALLBACK
 
	$Pa_EnumProc
(
LPGUID
 
ÕGUID
,

204 
LPCTSTR
 
ÕszDesc
,

205 
LPCTSTR
 
ÕszDrvName
,

206 
LPVOID
 
ÕC⁄ãxt
 )

208 
HRESULT
 
hr
;

209 
LPDIRECTSOUND
 
ÕDúe˘Sound
;

210 #i‡
SUPPORT_AUDIO_CAPTURE


211 
LPDIRECTSOUNDCAPTURE
 
ÕDúe˘SoundC≠tuª
;

213 
isI≈ut
 = (Ë
ÕC⁄ãxt
;

214 
öã∫ÆP‹tAudioDevi˚
 *
∑d
;

216 if–
sDevi˚Index
 >
sNumDevi˚s
 )

218 
sEnumî©i⁄Eº‹
 = 
∑I¡î«lEº‹
;

219  
FALSE
;

221 
∑d
 = &
sDevi˚s
[
sDevi˚Index
];

223 if–
ÕGUID
 =
NULL
 )

225 
∑d
->
∑d_ÕGUID
 = 
NULL
;

229 
	`mem˝y
–&
∑d
->
∑d_GUID
, 
ÕGUID
, (
GUID
) );

230 
∑d
->
∑d_ÕGUID
 = &∑d->
∑d_GUID
;

232 
∑d
->
∑d_Info
.
ßm∂eR©es
 =Öad->
∑d_Sam∂eR©es
;

234 if–
ÕszDesc
 !
NULL
 )

236 
Àn
 = 
	`°æí
(
ÕszDesc
);

237 
∑d
->
∑d_Info
.
«me
 = (*)
	`mÆloc
–
Àn
+1 );

238 if–
∑d
->
∑d_Info
.
«me
 =
NULL
 )

240 
sEnumî©i⁄Eº‹
 = 
∑Insufficõ¡Mem‹y
;

241  
FALSE
;

243 
	`mem˝y
–(*Ë
∑d
->
∑d_Info
.
«me
, 
ÕszDesc
, 
Àn
+1 );

245 #i‡
SUPPORT_AUDIO_CAPTURE


246 if–
isI≈ut
 )

249 
DSCCAPS
 
ˇps
;

250 if–
ÕGUID
 =
NULL
 ) 
sDeÁu…I≈utDevi˚ID
 = 
sDevi˚Index
;

251 
hr
 = 
	`Dúe˘SoundC≠tuªCª©e
–
ÕGUID
, &
ÕDúe˘SoundC≠tuª
, 
NULL
 );

252 if–
hr
 !
DS_OK
 )

254 
∑d
->
∑d_Info
.
maxI≈utCh™√ls
 = 0;

255 
	`DBUG
(("C™nŸ cª©êC≠tuª f‹ %s. Resu… = 0x%x\n", 
ÕszDesc
, 
hr
 ));

260 
ˇps
.
dwSize
 = (caps);

261 
	`IDúe˘SoundC≠tuª_GëC≠s
–
ÕDúe˘SoundC≠tuª
, &
ˇps
 );

263 
∑d
->
∑d_Info
.
maxI≈utCh™√ls
 = 
ˇps
.
dwCh™√ls
;

265 if–
ˇps
.
dwCh™√ls
 == 2 )

267 
ödex
 = 0;

268 if–
ˇps
.
dwF‹m©s
 & 
WAVE_FORMAT_1S16
Ë
∑d
->
∑d_Sam∂eR©es
[
ödex
++] = 11025.0;

269 if–
ˇps
.
dwF‹m©s
 & 
WAVE_FORMAT_2S16
Ë
∑d
->
∑d_Sam∂eR©es
[
ödex
++] = 22050.0;

270 if–
ˇps
.
dwF‹m©s
 & 
WAVE_FORMAT_4S16
Ë
∑d
->
∑d_Sam∂eR©es
[
ödex
++] = 44100.0;

271 
∑d
->
∑d_Info
.
numSam∂eR©es
 = 
ödex
;

273 if–
ˇps
.
dwCh™√ls
 == 1 )

275 
ödex
 = 0;

276 if–
ˇps
.
dwF‹m©s
 & 
WAVE_FORMAT_1M16
Ë
∑d
->
∑d_Sam∂eR©es
[
ödex
++] = 11025.0;

277 if–
ˇps
.
dwF‹m©s
 & 
WAVE_FORMAT_2M16
Ë
∑d
->
∑d_Sam∂eR©es
[
ödex
++] = 22050.0;

278 if–
ˇps
.
dwF‹m©s
 & 
WAVE_FORMAT_4M16
Ë
∑d
->
∑d_Sam∂eR©es
[
ödex
++] = 44100.0;

279 
∑d
->
∑d_Info
.
numSam∂eR©es
 = 
ödex
;

281 
∑d
->
∑d_Info
.
numSam∂eR©es
 = 0;

282 
	`IDúe˘SoundC≠tuª_Rñó£
–
ÕDúe˘SoundC≠tuª
 );

290 
DSCAPS
 
ˇps
;

291 if–
ÕGUID
 =
NULL
 ) 
sDeÁu…OuçutDevi˚ID
 = 
sDevi˚Index
;

293 
hr
 = 
	`Dúe˘SoundCª©e
–
ÕGUID
, &
ÕDúe˘Sound
, 
NULL
 );

294 if–
hr
 !
DS_OK
 )

296 
∑d
->
∑d_Info
.
maxOuçutCh™√ls
 = 0;

297 
	`DBUG
(("C™nŸ cª©êdsound f‹ %s. Resu… = 0x%x\n", 
ÕszDesc
, 
hr
 ));

302 
ˇps
.
dwSize
 = (caps);

303 
	`IDúe˘Sound_GëC≠s
–
ÕDúe˘Sound
, &
ˇps
 );

304 
∑d
->
∑d_Info
.
maxOuçutCh™√ls
 = ( 
ˇps
.
dwFœgs
 & 
DSCAPS_PRIMARYSTEREO
 ) ? 2 : 1;

306 
∑d
->
∑d_Sam∂eR©es
[0] = (Ë
ˇps
.
dwMöSec⁄d¨ySam∂eR©e
;

307 
∑d
->
∑d_Sam∂eR©es
[1] = (Ë
ˇps
.
dwMaxSec⁄d¨ySam∂eR©e
;

308 if–
ˇps
.
dwFœgs
 & 
DSCAPS_CONTINUOUSRATE
 ) 
∑d
->
∑d_Info
.
numSam∂eR©es
 = -1;

309 if–
ˇps
.
dwMöSec⁄d¨ySam∂eR©e
 =ˇps.
dwMaxSec⁄d¨ySam∂eR©e
 )

311 if–
ˇps
.
dwMöSec⁄d¨ySam∂eR©e
 == 0 )

318 
∑d
->
∑d_Sam∂eR©es
[0] = 11025.0f;

319 
∑d
->
∑d_Sam∂eR©es
[1] = 48000.0f;

320 
∑d
->
∑d_Info
.
numSam∂eR©es
 = -1;

322 
	`DBUG
(("PA - Rï‹ãdÑ©e†bŸh zîo. SëtögÅÿÁkêvÆue†f‹ devi˚ #%d\n", 
sDevi˚Index
 ));

326 
∑d
->
∑d_Info
.
numSam∂eR©es
 = 1;

329 if–(
ˇps
.
dwMöSec⁄d¨ySam∂eR©e
 < 1000.0Ë&& (ˇps.
dwMaxSec⁄d¨ySam∂eR©e
 > 50000.0) )

335 
∑d
->
∑d_Info
.
numSam∂eR©es
 = -1;

336 
	`DBUG
(("PA - Sam∂êøãÑ™gêu£d in°ód o‡twÿodd vÆue†f‹ devi˚ #%d\n", 
sDevi˚Index
 ));

338 
∑d
->
∑d_Info
.
numSam∂eR©es
 = 2;

339 
	`IDúe˘Sound_Rñó£
–
ÕDúe˘Sound
 );

342 
∑d
->
∑d_Info
.
«tiveSam∂eF‹m©s
 = 
∑I¡16
;

343 
sDevi˚Index
++;

344 –
TRUE
 );

345 
	}
}

347 
	$Pa_Cou¡Devi˚s
()

349 if–
sNumDevi˚s
 <0 ) 
	`Pa_Inôülize
();

350  
sNumDevi˚s
;

351 
	}
}

352 
öã∫ÆP‹tAudioDevi˚
 *
	$Pa_GëI¡î«lDevi˚
–
PaDevi˚ID
 
id
 )

354 if–(
id
 < 0Ë|| ( id >
	`Pa_Cou¡Devi˚s
()ËË 
NULL
;

355  &
sDevi˚s
[
id
];

356 
	}
}

358 c⁄° 
PaDevi˚Info
* 
	$Pa_GëDevi˚Info
–
PaDevi˚ID
 
id
 )

360 
öã∫ÆP‹tAudioDevi˚
 *
∑d
;

361 if–(
id
 < 0Ë|| ( id >
	`Pa_Cou¡Devi˚s
()ËË 
NULL
;

362 
∑d
 = 
	`Pa_GëI¡î«lDevi˚
–
id
 );

363  &
∑d
->
∑d_Info
 ;

364 
	}
}

365 
PaEº‹
 
	$Pa_MaybeQuîyDevi˚s
( )

367 if–
sNumDevi˚s
 == 0 )

369  
	`Pa_QuîyDevi˚s
();

372 
	}
}

383 
	#PA_ENV_BUF_SIZE
 (32)

	)

384 
	#PA_REC_IN_DEV_ENV_NAME
 ("PA_RECOMMENDED_INPUT_DEVICE")

	)

385 
	#PA_REC_OUT_DEV_ENV_NAME
 ("PA_RECOMMENDED_OUTPUT_DEVICE")

	)

386 
PaDevi˚ID
 
	$PaHo°_GëEnvDeÁu…Devi˚ID
–*
ívName
 )

388 
DWORD
 
hªsu…
;

389 
ívbuf
[
PA_ENV_BUF_SIZE
];

390 
PaDevi˚ID
 
ªcommídedID
 = 
∑NoDevi˚
;

392 
hªsu…
 = 
	`GëEnvú⁄mítV¨übÀ
–
ívName
, 
ívbuf
, 
PA_ENV_BUF_SIZE
 );

393 if–(
hªsu…
 > 0Ë&& (hªsu… < 
PA_ENV_BUF_SIZE
) )

395 
ªcommídedID
 = 
	`©oi
–
ívbuf
 );

397  
ªcommídedID
;

398 
	}
}

399 
PaDevi˚ID
 
	$Pa_GëDeÁu…I≈utDevi˚ID
( )

401 
PaEº‹
 
ªsu…
;

402 
ªsu…
 = 
	`PaHo°_GëEnvDeÁu…Devi˚ID
–
PA_REC_IN_DEV_ENV_NAME
 );

403 if–
ªsu…
 < 0 )

405 
ªsu…
 = 
	`Pa_MaybeQuîyDevi˚s
();

406 if–
ªsu…
 < 0 ) Ñesult;

407 
ªsu…
 = 
sDeÁu…I≈utDevi˚ID
;

409  
ªsu…
;

410 
	}
}

411 
PaDevi˚ID
 
	$Pa_GëDeÁu…OuçutDevi˚ID
( )

413 
PaEº‹
 
ªsu…
;

414 
ªsu…
 = 
	`PaHo°_GëEnvDeÁu…Devi˚ID
–
PA_REC_OUT_DEV_ENV_NAME
 );

415 if–
ªsu…
 < 0 )

417 
ªsu…
 = 
	`Pa_MaybeQuîyDevi˚s
();

418 if–
ªsu…
 < 0 ) Ñesult;

419 
ªsu…
 = 
sDeÁu…OuçutDevi˚ID
;

421  
ªsu…
;

422 
	}
}

426 
PaEº‹
 
	$PaHo°_Inô
( )

428 #i‡
PA_SIMULATE_UNDERFLOW


429 
	`PRINT
(("WARNING - Underflow Simulation Enabled - Expectá Big Glitch!!!\n"));

431  
	`Pa_MaybeQuîyDevi˚s
();

432 
	}
}

433 
PaEº‹
 
	$Pa_TimeSli˚
–
öã∫ÆP‹tAudioSåóm
 *
∑°
 )

435 
PaEº‹
 
ªsu…
 = 0;

436 
byãsEm±y
 = 0;

437 
byãsFûÀd
 = 0;

438 
byãsToX„r
 = 0;

439 
numChunks
;

440 
HRESULT
 
hªsu…
;

441 
PaHo°SoundC⁄åﬁ
 *
∑hsc
;

442 *
«tiveBufPå
;

443 
∑°
->
∑°_NumCÆlbacks
 += 1;

444 
∑hsc
 = (
PaHo°SoundC⁄åﬁ
 *Ë
∑°
->
∑°_Devi˚D©a
;

445 if–
∑hsc
 =
NULL
 )  
∑I¡î«lEº‹
;

447 #i‡
SUPPORT_AUDIO_CAPTURE


448 if–
∑°
->
∑°_NumI≈utCh™√ls
 > 0 )

450 
	`DSW_QuîyI≈utFûÀd
–&
∑hsc
->
∑hsc_DSoundWøµî
, &
byãsFûÀd
 );

451 
byãsToX„r
 = 
byãsFûÀd
;

455 if–
∑°
->
∑°_NumOuçutCh™√ls
 > 0 )

457 
	`DSW_QuîyOuçutS∑˚
–&
∑hsc
->
∑hsc_DSoundWøµî
, &
byãsEm±y
 );

458 
byãsToX„r
 = 
byãsEm±y
;

460 
	`AddTø˚Mesßge
–"byãsEm±y ", 
byãsEm±y
 );

462 if–(
∑°
->
∑°_NumI≈utCh™√ls
 > 0Ë&& (∑°->
∑°_NumOuçutCh™√ls
 > 0) )

464 
byãsToX„r
 = ( 
byãsFûÀd
 < 
byãsEm±y
 ) ? bytesFilled : bytesEmpty;

470 
numChunks
 = 
byãsToX„r
 / 
∑hsc
->
∑hsc_ByãsPîBuf„r
;

471 if–
numChunks
 > ()(
∑°
->
∑°_NumU£rBuf„rs
/2) )

473 
numChunks
 = ()
∑°
->
∑°_NumU£rBuf„rs
/2;

475 if–
numChunks
 < 0 )

477 
numChunks
 = 0;

479 
	`AddTø˚Mesßge
–"numChunk†", 
numChunks
 );

480 
«tiveBufPå
 = 
∑hsc
->
∑hsc_N©iveBuf„r
;

481 if–
numChunks
 > 0 )

483  
numChunks
-- > 0 )

486 
	`Pa_SèπUßgeCÆcuœti⁄
–
∑°
 );

487 #i‡
SUPPORT_AUDIO_CAPTURE


489 if–
∑°
->
∑°_NumI≈utCh™√ls
 > 0 )

491 
hªsu…
 = 
	`DSW_RódBlock
–&
∑hsc
->
∑hsc_DSoundWøµî
, (*Ë
«tiveBufPå
,Öahsc->
∑hsc_ByãsPîBuf„r
 );

492 if–
hªsu…
 < 0 )

494 
	`ERR_RPT
(("Dúe˘Sound RódBlock faûed, hªsu… = 0x%x\n",
hªsu…
));

495 
sPaHo°Eº‹
 = 
hªsu…
;

501 
ªsu…
 = 
	`Pa_CÆlC⁄vîtI¡16
–
∑°
, 
«tiveBufPå
,ÇativeBufPtr );

502 if–
ªsu…
 != 0) ;

504 if–
∑°
->
∑°_NumOuçutCh™√ls
 > 0 )

509 
hªsu…
 = 
	`DSW_WrôeBlock
–&
∑hsc
->
∑hsc_DSoundWøµî
, (*Ë
«tiveBufPå
,Öahsc->
∑hsc_ByãsPîBuf„r
 );

510 if–
hªsu…
 < 0 )

512 
	`ERR_RPT
(("Dúe˘Sound WrôeBlock faûed,Ñesu… = 0x%x\n",
hªsu…
));

513 
sPaHo°Eº‹
 = 
hªsu…
;

517 
	`Pa_EndUßgeCÆcuœti⁄
–
∑°
 );

520  
ªsu…
;

521 
	}
}

523 
CALLBACK
 
	$Pa_TimîCÆlback
(
UINT
 
uID
, UINT 
uMsg
, 
DWORD
 
dwU£r
, DWORD 
dw1
, DWORD 
dw2
)

525 
öã∫ÆP‹tAudioSåóm
 *
∑°
;

526 
PaHo°SoundC⁄åﬁ
 *
∑hsc
;

527 #i‡
PA_SIMULATE_UNDERFLOW


528 
gUndîCÆlbackCou¡î
++;

529 if–(
gUndîCÆlbackCou¡î
 >
UNDER_START_GAP
) &&

530 (
gUndîCÆlbackCou¡î
 <
UNDER_STOP_GAP
) )

532 if–
gUndîCÆlbackCou¡î
 =
UNDER_START_GAP
)

534 
	`AddTø˚Mesßge
("Begö sèŒ: gUndîCÆlbackCou¡î =======", 
gUndîCÆlbackCou¡î
 );

536 if–
gUndîCÆlbackCou¡î
 =
UNDER_STOP_GAP
)

538 
	`AddTø˚Mesßge
("End sèŒ: gUndîCÆlbackCou¡î =======", 
gUndîCÆlbackCou¡î
 );

543 
∑°
 = (
öã∫ÆP‹tAudioSåóm
 *Ë
dwU£r
;

544 if–
∑°
 =
NULL
 ) ;

545 
∑hsc
 = (
PaHo°SoundC⁄åﬁ
 *Ë
∑°
->
∑°_Devi˚D©a
;

546 if–
∑hsc
 =
NULL
 ) ;

547 if–!
∑hsc
->
∑hsc_IfInsideCÆlback
 && 
∑°
->
∑°_IsA˘ive
 )

549 if–
∑°
->
∑°_St›Now
 )

551 
∑°
->
∑°_IsA˘ive
 = 0;

553 if–
∑°
->
∑°_St›So⁄
 )

555 
DSoundWøµî
 *
dsw
 = &
∑hsc
->
∑hsc_DSoundWøµî
;

556 if–
∑°
->
∑°_NumOuçutCh™√ls
 > 0 )

558 
	`DSW_ZîoEm±yS∑˚
–
dsw
 );

559 
	`AddTø˚Mesßge
("Pa_TimîCÆlback: waôög - wrôã¿", (Ë
dsw
->
dsw_FømesWrôãn
 );

560 
	`AddTø˚Mesßge
("Pa_TimîCÆlback: waôög -Öœyed ", (Ë
dsw
->
dsw_FømesPœyed
 );

562 if–
dsw
->
dsw_FømesPœyed
 >
∑°
->
∑°_FømeCou¡
 )

564 
∑°
->
∑°_IsA˘ive
 = 0;

569 
∑°
->
∑°_IsA˘ive
 = 0;

574 
∑hsc
->
∑hsc_IfInsideCÆlback
 = 1;

575 if–
	`Pa_TimeSli˚
–
∑°
 ) != 0)

577 
∑°
->
∑°_St›So⁄
 = 1;

579 
∑hsc
->
∑hsc_IfInsideCÆlback
 = 0;

582 
	}
}

584 
PaEº‹
 
	$PaHo°_O≥nSåóm
–
öã∫ÆP‹tAudioSåóm
 *
∑°
 )

586 
HRESULT
 
hr
;

587 
PaEº‹
 
ªsu…
 = 
∑NoEº‹
;

588 
PaHo°SoundC⁄åﬁ
 *
∑hsc
;

589 
numByãs
, 
maxCh™√ls
;

590 
möNumBuf„rs
;

591 
öã∫ÆP‹tAudioDevi˚
 *
∑d
;

592 
DSoundWøµî
 *
dsw
;

594 
∑hsc
 = (
PaHo°SoundC⁄åﬁ
 *Ë
	`PaHo°_AŒoˇãFa°Mem‹y
((PaHostSoundControl));

595 if–
∑hsc
 =
NULL
 )

597 
ªsu…
 = 
∑Insufficõ¡Mem‹y
;

598 
îr‹
;

600 
	`mem£t
–
∑hsc
, 0, (
PaHo°SoundC⁄åﬁ
) );

601 
∑°
->
∑°_Devi˚D©a
 = (*Ë
∑hsc
;

602 
∑hsc
->
∑hsc_TimîID
 = 0;

603 
dsw
 = &
∑hsc
->
∑hsc_DSoundWøµî
;

604 
	`DSW_Inô
–
dsw
 );

606 
maxCh™√ls
 = ( 
∑°
->
∑°_NumOuçutCh™√ls
 >Öa°->
∑°_NumI≈utCh™√ls
 ) ?

607 
∑°
->
∑°_NumOuçutCh™√ls
 :Öa°->
∑°_NumI≈utCh™√ls
;

608 
∑hsc
->
∑hsc_ByãsPîBuf„r
 = 
∑°
->
∑°_FømesPîU£rBuf„r
 * 
maxCh™√ls
 * ();

609 if–
maxCh™√ls
 > 0 )

611 
∑hsc
->
∑hsc_N©iveBuf„r
 = (*Ë
	`PaHo°_AŒoˇãFa°Mem‹y
’ahsc->
∑hsc_ByãsPîBuf„r
);

612 if–
∑hsc
->
∑hsc_N©iveBuf„r
 =
NULL
 )

614 
ªsu…
 = 
∑Insufficõ¡Mem‹y
;

615 
îr‹
;

620 
ªsu…
 = 
∑InvÆidCh™√lCou¡
;

621 
îr‹
;

624 
	`DBUG
(("PaHo°_O≥nSåóm:Öahsc_MöFømesPîHo°Buf„∏%d\n", 
∑hsc
->
∑hsc_MöFømesPîHo°Buf„r
 ));

625 
möNumBuf„rs
 = 
	`Pa_GëMöNumBuf„rs
–
∑°
->
∑°_FømesPîU£rBuf„r
,Öa°->
∑°_Sam∂eR©e
 );

626 
∑°
->
∑°_NumU£rBuf„rs
 = ( 
möNumBuf„rs
 >Öast->past_NumUserBuffers ) ? minNumBuffers :Öast->past_NumUserBuffers;

627 
numByãs
 = 
∑hsc
->
∑hsc_ByãsPîBuf„r
 * 
∑°
->
∑°_NumU£rBuf„rs
;

628 if–
numByãs
 < 
DSBSIZE_MIN
 )

630 
ªsu…
 = 
∑Buf„rTooSmÆl
;

631 
îr‹
;

633 if–
numByãs
 > 
DSBSIZE_MAX
 )

635 
ªsu…
 = 
∑Buf„rTooBig
;

636 
îr‹
;

638 
∑hsc
->
∑hsc_FømesPîDSBuf„r
 = 
∑°
->
∑°_FømesPîU£rBuf„r
 *Öa°->
∑°_NumU£rBuf„rs
;

640 
m£cL©ícy
 = (Ë((
∑hsc
->
∑hsc_FømesPîDSBuf„r
 * 1000Ë/ 
∑°
->
∑°_Sam∂eR©e
);

641 
	`PRINT
(("P‹tAudiÿ⁄ Dúe˘Sound - L©ícy = %d fømes, %d m£c\n", 
∑hsc
->
∑hsc_FømesPîDSBuf„r
, 
m£cL©ícy
 ));

644 if–(
∑°
->
∑°_OuçutDevi˚ID
 >0Ë&& (∑°->
∑°_NumOuçutCh™√ls
 > 0) )

646 
	`DBUG
(("PaHo°_O≥nSåóm: devi˚ID = 0x%x\n", 
∑°
->
∑°_OuçutDevi˚ID
));

647 
∑d
 = 
	`Pa_GëI¡î«lDevi˚
–
∑°
->
∑°_OuçutDevi˚ID
 );

648 
hr
 = 
	`Dúe˘SoundCª©e
–
∑d
->
∑d_ÕGUID
, &
dsw
->
dsw_pDúe˘Sound
, 
NULL
 );

650 if–
hr
 !
DS_OK
 )

652 
i
;

653 
	`ERR_RPT
(("Creation ofÑequested Audio Output device '%s' failed.\n",

654 ((
∑d
->
∑d_ÕGUID
 =
NULL
Ë? "DeÁu…" :Öad->
∑d_Info
.
«me
) ));

655  
i
=0; i<
	`Pa_Cou¡Devi˚s
(); i++ )

657 
∑d
 = 
	`Pa_GëI¡î«lDevi˚
–
i
 );

658 if–
∑d
->
∑d_Info
.
maxOuçutCh™√ls
 >
∑°
->
∑°_NumOuçutCh™√ls
 )

660 
	`DBUG
(("Try devi˚ '%s' in°ód.\n", 
∑d
->
∑d_Info
.
«me
 ));

661 
hr
 = 
	`Dúe˘SoundCª©e
–
∑d
->
∑d_ÕGUID
, &
dsw
->
dsw_pDúe˘Sound
, 
NULL
 );

662 if–
hr
 =
DS_OK
 )

664 
	`ERR_RPT
(("Usög devi˚ '%s' in°ód.\n", 
∑d
->
∑d_Info
.
«me
 ));

670 if–
hr
 !
DS_OK
 )

672 
	`ERR_RPT
(("PortAudio: DirectSoundCreate() failed!\n"));

673 
ªsu…
 = 
∑Ho°Eº‹
;

674 
sPaHo°Eº‹
 = 
hr
;

675 
îr‹
;

677 
hr
 = 
	`DSW_InôOuçutBuf„r
–
dsw
,

678 (Ë(
∑°
->
∑°_Sam∂eR©e
 + 0.5),

679 
∑°
->
∑°_NumOuçutCh™√ls
, 
numByãs
 );

680 
	`DBUG
(("DSW_InôOuçutBuf„r(Ëªtu∫†%x\n", 
hr
));

681 if–
hr
 !
DS_OK
 )

683 
ªsu…
 = 
∑Ho°Eº‹
;

684 
sPaHo°Eº‹
 = 
hr
;

685 
îr‹
;

687 
∑°
->
∑°_FømeCou¡
 = 
∑hsc
->
∑hsc_DSoundWøµî
.
dsw_FømesWrôãn
;

689 #i‡
SUPPORT_AUDIO_CAPTURE


691 if–(
∑°
->
∑°_I≈utDevi˚ID
 >0Ë&& (∑°->
∑°_NumI≈utCh™√ls
 > 0) )

693 
∑d
 = 
	`Pa_GëI¡î«lDevi˚
–
∑°
->
∑°_I≈utDevi˚ID
 );

694 
hr
 = 
	`Dúe˘SoundC≠tuªCª©e
–
∑d
->
∑d_ÕGUID
, &
dsw
->
dsw_pDúe˘SoundC≠tuª
, 
NULL
 );

696 if–
hr
 !
DS_OK
 )

698 
i
;

699 
	`ERR_RPT
(("Creation ofÑequested Audio Capture device '%s' failed.\n",

700 ((
∑d
->
∑d_ÕGUID
 =
NULL
Ë? "DeÁu…" :Öad->
∑d_Info
.
«me
) ));

701  
i
=0; i<
	`Pa_Cou¡Devi˚s
(); i++ )

703 
∑d
 = 
	`Pa_GëI¡î«lDevi˚
–
i
 );

704 if–
∑d
->
∑d_Info
.
maxI≈utCh™√ls
 >
∑°
->
∑°_NumI≈utCh™√ls
 )

706 
	`PRINT
(("Try devi˚ '%s' in°ód.\n", 
∑d
->
∑d_Info
.
«me
 ));

707 
hr
 = 
	`Dúe˘SoundC≠tuªCª©e
–
∑d
->
∑d_ÕGUID
, &
dsw
->
dsw_pDúe˘SoundC≠tuª
, 
NULL
 );

708 if–
hr
 =
DS_OK
 ) ;

712 if–
hr
 !
DS_OK
 )

714 
	`ERR_RPT
(("PortAudio: DirectSoundCaptureCreate() failed!\n"));

715 
ªsu…
 = 
∑Ho°Eº‹
;

716 
sPaHo°Eº‹
 = 
hr
;

717 
îr‹
;

719 
hr
 = 
	`DSW_InôI≈utBuf„r
–
dsw
,

720 (Ë(
∑°
->
∑°_Sam∂eR©e
 + 0.5),

721 
∑°
->
∑°_NumI≈utCh™√ls
, 
numByãs
 );

722 
	`DBUG
(("DSW_InôI≈utBuf„r(Ëªtu∫†%x\n", 
hr
));

723 if–
hr
 !
DS_OK
 )

725 
	`ERR_RPT
(("P‹tAudio: DSW_InôI≈utBuf„r(Ëªtu∫†%x\n", 
hr
));

726 
ªsu…
 = 
∑Ho°Eº‹
;

727 
sPaHo°Eº‹
 = 
hr
;

728 
îr‹
;

734 
LARGE_INTEGER
 
‰equícy
;

735 if–
	`QuîyPîf‹m™˚Fªquícy
–&
‰equícy
 ) == 0 )

737 
∑hsc
->
∑hsc_Invî£TicksPîU£rBuf„r
 = 0.0;

741 
∑hsc
->
∑hsc_Invî£TicksPîU£rBuf„r
 = 
∑°
->
∑°_Sam∂eR©e
 /

742 –()
‰equícy
.
QuadP¨t
 * 
∑°
->
∑°_FømesPîU£rBuf„r
 );

743 
	`DBUG
(("∑hsc_Invî£TicksPîU£rBuf„∏%g\n", 
∑hsc
->
∑hsc_Invî£TicksPîU£rBuf„r
 ));

746  
ªsu…
;

747 
îr‹
:

748 
	`PaHo°_Clo£Såóm
–
∑°
 );

749  
ªsu…
;

750 
	}
}

752 
PaEº‹
 
	$PaHo°_SèπOuçut
–
öã∫ÆP‹tAudioSåóm
 *
∑°
 )

754 
HRESULT
 
hr
;

755 
PaHo°SoundC⁄åﬁ
 *
∑hsc
;

756 
PaEº‹
 
ªsu…
 = 
∑NoEº‹
;

757 
∑hsc
 = (
PaHo°SoundC⁄åﬁ
 *Ë
∑°
->
∑°_Devi˚D©a
;

759 
ªsu…
 = 
	`Pa_TimeSli˚
–
∑°
 );

760 if–
ªsu…
 !
∑NoEº‹
 ) Ñesult;

761 
hr
 = 
	`DSW_SèπOuçut
–&
∑hsc
->
∑hsc_DSoundWøµî
 );

762 
	`DBUG
(("PaHo°_SèπOuçut: DSW_SèπOuçuàªtu∫ed = 0x%X.\n", 
hr
));

763 if–
hr
 !
DS_OK
 )

765 
ªsu…
 = 
∑Ho°Eº‹
;

766 
sPaHo°Eº‹
 = 
hr
;

767 
îr‹
;

769 
îr‹
:

770  
ªsu…
;

771 
	}
}

773 
PaEº‹
 
	$PaHo°_SèπI≈ut
–
öã∫ÆP‹tAudioSåóm
 *
∑°
 )

775 
PaEº‹
 
ªsu…
 = 
∑NoEº‹
;

776 #i‡
SUPPORT_AUDIO_CAPTURE


777 
HRESULT
 
hr
;

778 
PaHo°SoundC⁄åﬁ
 *
∑hsc
;

779 
∑hsc
 = (
PaHo°SoundC⁄åﬁ
 *Ë
∑°
->
∑°_Devi˚D©a
;

780 
hr
 = 
	`DSW_SèπI≈ut
–&
∑hsc
->
∑hsc_DSoundWøµî
 );

781 
	`DBUG
(("Pa_SèπSåóm: DSW_SèπI≈uàªtu∫ed = 0x%X.\n", 
hr
));

782 if–
hr
 !
DS_OK
 )

784 
ªsu…
 = 
∑Ho°Eº‹
;

785 
sPaHo°Eº‹
 = 
hr
;

786 
îr‹
;

788 
îr‹
:

790  
ªsu…
;

791 
	}
}

793 
PaEº‹
 
	$PaHo°_SèπEngöe
–
öã∫ÆP‹tAudioSåóm
 *
∑°
 )

795 
PaHo°SoundC⁄åﬁ
 *
∑hsc
;

796 
PaEº‹
 
ªsu…
 = 
∑NoEº‹
;

797 
∑hsc
 = (
PaHo°SoundC⁄åﬁ
 *Ë
∑°
->
∑°_Devi˚D©a
;

798 
∑°
->
∑°_St›Now
 = 0;

799 
∑°
->
∑°_St›So⁄
 = 0;

800 
∑°
->
∑°_IsA˘ive
 = 1;

803 
m£cPîBuf„r
;

804 
ªsﬁuti⁄
;

805 
bufsPîI¡îru±
;

807 
	`DBUG
(("PaHo°_SèπEngöe:Öa°_NumU£rBuf„r†%d\n", 
∑°
->
∑°_NumU£rBuf„rs
));

809 if–
∑°
->
∑°_NumU£rBuf„rs
 == 2 )

812 
m£cPîBuf„r
 = (500 * 
∑°
->
∑°_FømesPîU£rBuf„r
Ë/ (Ë∑°->
∑°_Sam∂eR©e
;

816 i‡–
∑°
->
∑°_NumU£rBuf„rs
 >16 ) 
bufsPîI¡îru±
 =Öast->past_NumUserBuffers/8;

817 i‡–
∑°
->
∑°_NumU£rBuf„rs
 >8 ) 
bufsPîI¡îru±
 = 2;

818 
bufsPîI¡îru±
 = 1;

820 
m£cPîBuf„r
 = 1000 * (
bufsPîI¡îru±
 * 
∑°
->
∑°_FømesPîU£rBuf„r
Ë/ (Ë∑°->
∑°_Sam∂eR©e
;

822 
	`DBUG
(("PaHo°_SèπEngöe: bufsPîI¡îru± = %d\n", 
bufsPîI¡îru±
));

825 
	`DBUG
(("PaHo°_SèπEngöe: m£cPîBuf„∏%d\n", 
m£cPîBuf„r
));

827 if–
m£cPîBuf„r
 < 10 ) msecPerBuffer = 10;

828 if–
m£cPîBuf„r
 > 100 ) msecPerBuffer = 100;

829 
	`DBUG
(("PaHo°_SèπEngöe: clù≥d m£cPîBuf„∏%d\n", 
m£cPîBuf„r
));

831 
ªsﬁuti⁄
 = 
m£cPîBuf„r
/4;

832 
∑hsc
->
∑hsc_TimîID
 = 
	`timeSëEvít
–
m£cPîBuf„r
, 
ªsﬁuti⁄
, (
LPTIMECALLBACK
Ë
Pa_TimîCÆlback
,

833 (
DWORD
Ë
∑°
, 
TIME_PERIODIC
 );

835 if–
∑hsc
->
∑hsc_TimîID
 == 0 )

837 
∑°
->
∑°_IsA˘ive
 = 0;

838 
ªsu…
 = 
∑Ho°Eº‹
;

839 
sPaHo°Eº‹
 = 0;

840 
îr‹
;

842 
îr‹
:

843  
ªsu…
;

844 
	}
}

846 
PaEº‹
 
	$PaHo°_St›Engöe
–
öã∫ÆP‹tAudioSåóm
 *
∑°
, 
ab‹t
 )

848 
timeoutM£c
;

849 
PaHo°SoundC⁄åﬁ
 *
∑hsc
 = (PaHo°SoundC⁄åﬁ *Ë
∑°
->
∑°_Devi˚D©a
;

850 if–
∑hsc
 =
NULL
 )  
∑NoEº‹
;

851 if–
ab‹t
 ) 
∑°
->
∑°_St›Now
 = 1;

852 
∑°
->
∑°_St›So⁄
 = 1;

854 
timeoutM£c
 = (Ë(1200.0 * 
∑hsc
->
∑hsc_FømesPîDSBuf„r
 / 
∑°
->
∑°_Sam∂eR©e
);

855  
∑°
->
∑°_IsA˘ive
 && (
timeoutM£c
 > 0) )

857 
	`SÀï
(10);

858 
timeoutM£c
 -= 10;

860 if–
∑hsc
->
∑hsc_TimîID
 != 0 )

862 
	`timeKûlEvít
(
∑hsc
->
∑hsc_TimîID
);

863 
∑hsc
->
∑hsc_TimîID
 = 0;

865  
∑NoEº‹
;

866 
	}
}

868 
PaEº‹
 
	$PaHo°_St›I≈ut
–
öã∫ÆP‹tAudioSåóm
 *
∑°
, 
ab‹t
 )

870 #i‡
SUPPORT_AUDIO_CAPTURE


871 
HRESULT
 
hr
;

872 
PaHo°SoundC⁄åﬁ
 *
∑hsc
 = (PaHo°SoundC⁄åﬁ *Ë
∑°
->
∑°_Devi˚D©a
;

873 if–
∑hsc
 =
NULL
 )  
∑NoEº‹
;

874 (Ë
ab‹t
;

875 
hr
 = 
	`DSW_St›I≈ut
–&
∑hsc
->
∑hsc_DSoundWøµî
 );

876 
	`DBUG
(("DSW_St›I≈ut(Ëªsu… i†%x\n", 
hr
));

878  
∑NoEº‹
;

879 
	}
}

881 
PaEº‹
 
	$PaHo°_St›Ouçut
–
öã∫ÆP‹tAudioSåóm
 *
∑°
, 
ab‹t
 )

883 
HRESULT
 
hr
;

884 
PaHo°SoundC⁄åﬁ
 *
∑hsc
;

885 
∑hsc
 = (
PaHo°SoundC⁄åﬁ
 *Ë
∑°
->
∑°_Devi˚D©a
;

886 if–
∑hsc
 =
NULL
 )  
∑NoEº‹
;

887 (Ë
ab‹t
;

888 
hr
 = 
	`DSW_St›Ouçut
–&
∑hsc
->
∑hsc_DSoundWøµî
 );

889 
	`DBUG
(("DSW_St›Ouçut(Ëªsu… i†%x\n", 
hr
));

890  
∑NoEº‹
;

891 
	}
}

893 
PaEº‹
 
	$PaHo°_Clo£Såóm
–
öã∫ÆP‹tAudioSåóm
 *
∑°
 )

895 
PaHo°SoundC⁄åﬁ
 *
∑hsc
;

896 if–
∑°
 =
NULL
 )  
∑BadSåómPå
;

897 
∑hsc
 = (
PaHo°SoundC⁄åﬁ
 *Ë
∑°
->
∑°_Devi˚D©a
;

898 if–
∑hsc
 =
NULL
 )  
∑NoEº‹
;

899 
	`DSW_Tîm
–&
∑hsc
->
∑hsc_DSoundWøµî
 );

900 if–
∑hsc
->
∑hsc_N©iveBuf„r
 )

902 
	`PaHo°_FªeFa°Mem‹y
–
∑hsc
->
∑hsc_N©iveBuf„r
,Öahsc->
∑hsc_ByãsPîBuf„r
 );

903 
∑hsc
->
∑hsc_N©iveBuf„r
 = 
NULL
;

905 
	`PaHo°_FªeFa°Mem‹y
–
∑hsc
, (
PaHo°SoundC⁄åﬁ
) );

906 
∑°
->
∑°_Devi˚D©a
 = 
NULL
;

907  
∑NoEº‹
;

908 
	}
}

913 
	$PaHo°_GëMöSy°emL©ícy
( )

915 
möL©ícyM£c
;

919 
OSVERSIONINFO
 
osvi
;

920 
osvi
.
dwOSVîsi⁄InfoSize
 = ( osvi );

921 
	`GëVîsi⁄Ex
–&
osvi
 );

922 
	`DBUG
(("PA - Pœtf‹mId = 0x%x\n", 
osvi
.
dwPœtf‹mId
 ));

923 
	`DBUG
(("PA - Maj‹Vîsi⁄ = 0x%x\n", 
osvi
.
dwMaj‹Vîsi⁄
 ));

924 
	`DBUG
(("PA - Mö‹Vîsi⁄ = 0x%x\n", 
osvi
.
dwMö‹Vîsi⁄
 ));

926 if–(
osvi
.
dwMaj‹Vîsi⁄
 =4Ë&& (osvi.
dwPœtf‹mId
 == 2) )

928 
möL©ícyM£c
 = 
PA_WIN_NT_LATENCY
;

930 if(
osvi
.
dwMaj‹Vîsi⁄
 >= 5)

932 
möL©ícyM£c
 = 
PA_WIN_WDM_LATENCY
;

936 
möL©ícyM£c
 = 
PA_WIN_9X_LATENCY
;

938  
möL©ícyM£c
;

939 
	}
}

952 
	#PA_LATENCY_ENV_NAME
 ("PA_MIN_LATENCY_MSEC")

	)

953 
	$Pa_GëMöNumBuf„rs
–
‰amesPîBuf„r
, 
ßm∂eR©e
 )

955 
ívbuf
[
PA_ENV_BUF_SIZE
];

956 
DWORD
 
hªsu…
;

957 
möL©ícyM£c
 = 0;

958 
m£cPîBuf„r
 = (1000.0 * 
‰amesPîBuf„r
Ë/ 
ßm∂eR©e
;

959 
möBuf„rs
;

961 
hªsu…
 = 
	`GëEnvú⁄mítV¨übÀ
–
PA_LATENCY_ENV_NAME
, 
ívbuf
, 
PA_ENV_BUF_SIZE
 );

962 if–(
hªsu…
 > 0Ë&& (hªsu… < 
PA_ENV_BUF_SIZE
) )

964 
möL©ícyM£c
 = 
	`©oi
–
ívbuf
 );

968 
möL©ícyM£c
 = 
	`PaHo°_GëMöSy°emL©ícy
();

969 #i‡
PA_USE_HIGH_LATENCY


970 
	`PRINT
(("PA - Möimum L©ícy sëÅÿ%d m£c!\n", 
möL©ícyM£c
 ));

974 
möBuf„rs
 = (Ë(1.0 + (()
möL©ícyM£c
 / 
m£cPîBuf„r
));

975 if–
möBuf„rs
 < 2 ) minBuffers = 2;

976  
möBuf„rs
;

977 
	}
}

979 
PaEº‹
 
	$PaHo°_Tîm
( )

981 
i
;

983  
i
=0; i<
sNumDevi˚s
; i++ )

985 if–
sDevi˚s
[
i
].
∑d_Info
.
«me
 !
NULL
 )

987 
	`‰ì
–(*Ë
sDevi˚s
[
i
].
∑d_Info
.
«me
 );

988 
sDevi˚s
[
i
].
∑d_Info
.
«me
 = 
NULL
;

991 if–
sDevi˚s
 !
NULL
 )

993 
	`PaHo°_FªeFa°Mem‹y
–
sDevi˚s
, 
sNumDevi˚s
 * (
öã∫ÆP‹tAudioDevi˚
) );

994 
sDevi˚s
 = 
NULL
;

995 
sNumDevi˚s
 = 0;

998 
	}
}

999 
	$Pa_SÀï
–
m£c
 )

1001 
	`SÀï
–
m£c
 );

1002 
	}
}

1010 *
	$PaHo°_AŒoˇãFa°Mem‹y
–
numByãs
 )

1012 *
addr
 = 
	`GlobÆAŒoc
–
GPTR
, 
numByãs
 );

1013  
addr
;

1014 
	}
}

1019 
	$PaHo°_FªeFa°Mem‹y
–*
addr
, 
numByãs
 )

1021 if–
addr
 !
NULL
 ) 
	`GlobÆFªe
(áddr );

1022 
	}
}

1024 
PaEº‹
 
	$PaHo°_SåómA˘ive
–
öã∫ÆP‹tAudioSåóm
 *
∑°
 )

1026 
PaHo°SoundC⁄åﬁ
 *
∑hsc
;

1027 if–
∑°
 =
NULL
 )  
∑BadSåómPå
;

1028 
∑hsc
 = (
PaHo°SoundC⁄åﬁ
 *Ë
∑°
->
∑°_Devi˚D©a
;

1029 if–
∑hsc
 =
NULL
 )  
∑I¡î«lEº‹
;

1030  (
PaEº‹
Ë(
∑°
->
∑°_IsA˘ive
);

1031 
	}
}

1033 
PaTime°amp
 
	$Pa_SåómTime
–
P‹tAudioSåóm
 *
°ªam
 )

1035 
DSoundWøµî
 *
dsw
;

1036 
öã∫ÆP‹tAudioSåóm
 *
∑°
 = (öã∫ÆP‹tAudioSåóm *Ë
°ªam
;

1037 
PaHo°SoundC⁄åﬁ
 *
∑hsc
;

1038 if–
∑°
 =
NULL
 )  
∑BadSåómPå
;

1039 
∑hsc
 = (
PaHo°SoundC⁄åﬁ
 *Ë
∑°
->
∑°_Devi˚D©a
;

1040 
dsw
 = &
∑hsc
->
∑hsc_DSoundWøµî
;

1041  
dsw
->
dsw_FømesPœyed
;

1042 
	}
}

	@portaudio/pa_win_wmme/pa_win_wmme.c

60 
	~<°dio.h
>

61 
	~<°dlib.h
>

62 
	~<m©h.h
>

63 
	~<wödows.h
>

64 
	~<mmsy°em.h
>

65 
	~<¥o˚ss.h
>

67 #i‚de‡
__MWERKS__


68 
	~<mÆloc.h
>

69 
	~<mem‹y.h
>

71 
	~"p‹èudio.h
"

72 
	~"∑_ho°.h
"

73 
	~"∑_åa˚.h
"

76 
	#PA_TRACK_MEMORY
 (0)

	)

78 
	#PA_USE_TIMER_CALLBACK
 (0Ë

	)

80 
	#PA_SIMULATE_UNDERFLOW
 (0Ë

	)

83 
	#PA_TRACE_RUN
 (0)

	)

84 
	#PA_TRACE_START_STOP
 (1)

	)

86 
	#PA_USE_HIGH_LATENCY
 (0Ë

	)

88 #i‡
PA_USE_HIGH_LATENCY


89 
	#PA_MIN_MSEC_PER_HOST_BUFFER
 (100)

	)

90 
	#PA_MAX_MSEC_PER_HOST_BUFFER
 (300Ë

	)

91 
	#PA_MIN_NUM_HOST_BUFFERS
 (4)

	)

92 
	#PA_MAX_NUM_HOST_BUFFERS
 (16Ë

	)

93 
	#PA_WIN_9X_LATENCY
 (400)

	)

95 
	#PA_MIN_MSEC_PER_HOST_BUFFER
 (10)

	)

96 
	#PA_MAX_MSEC_PER_HOST_BUFFER
 (100Ë

	)

97 
	#PA_MIN_NUM_HOST_BUFFERS
 (3)

	)

98 
	#PA_MAX_NUM_HOST_BUFFERS
 (16Ë

	)

99 
	#PA_WIN_9X_LATENCY
 (200)

	)

101 
	#MIN_TIMEOUT_MSEC
 (1000)

	)

107 
	#PA_WIN_NT_LATENCY
 (
PA_WIN_9X_LATENCY
 * 2)

	)

108 
	#PA_WIN_WDM_LATENCY
 (
PA_WIN_9X_LATENCY
)

	)

110 #i‡
PA_SIMULATE_UNDERFLOW


111 
	ggUndîCÆlbackCou¡î
 = 0;

112 
	#UNDER_SLEEP_AT
 (40)

	)

113 
	#UNDER_SLEEP_FOR
 (500)

	)

116 
	#PRINT
(
x
Ë{ 
¥ötf
 x; 
	`fÊush
(
°dout
); }

	)

117 
	#ERR_RPT
(
x
Ë
	`PRINT
(x)

	)

118 
	#DBUG
(
x
Ë

	)

119 
	#DBUGX
(
x
Ë

	)

125 
	sPaWMMESåómD©a


128 
HWAVEIN
 
	mhWaveIn
;

129 
WAVEHDR
 *
	möputBuf„rs
;

130 
	mcuºítI≈utBuf„r
;

131 
	mbyãsPîHo°I≈utBuf„r
;

132 
	mbyãsPîU£rI≈utBuf„r
;

134 
HWAVEOUT
 
	mhWaveOut
;

135 
WAVEHDR
 *
	mouçutBuf„rs
;

136 
	mcuºítOuçutBuf„r
;

137 
	mbyãsPîHo°OuçutBuf„r
;

138 
	mbyãsPîU£rOuçutBuf„r
;

140 
PaTime°amp
 
	m‰amesPœyed
;

141 
	mœ°Posôi⁄
;

143 
LARGE_INTEGER
 
	míåyCou¡
;

144 
	mövî£TicksPîHo°Buf„r
;

146 
	mnumHo°Buf„rs
;

147 
	m‰amesPîHo°Buf„r
;

148 
	mu£rBuf„rsPîHo°Buf„r
;

149 
CRITICAL_SECTION
 
	m°ªamLock
;

150 
INT
 
	m°ªamLockInôed
;

151 #i‡
PA_USE_TIMER_CALLBACK


152 
BOOL
 
	mifInsideCÆlback
;

153 
MMRESULT
 
	mtimîID
;

155 
HANDLE
 
	mab‹tEvít
;

156 
	mab‹tEvítInôed
;

157 
HANDLE
 
	mbuf„rEvít
;

158 
	mbuf„rEvítInôed
;

159 
HANDLE
 
	mígöeThªad
;

160 
DWORD
 
	mígöeThªadID
;

163 
	tPaWMMESåómD©a
;

166 
	gsNumI≈utDevi˚s
 = 0;

167 
	gsNumOuçutDevi˚s
 = 0;

168 
	gsNumDevi˚s
 = 0;

169 
PaDevi˚Info
 **
	gsDevi˚Pås
 = 
NULL
;

170 
	gsDeÁu…I≈utDevi˚ID
 = 
∑NoDevi˚
;

171 
	gsDeÁu…OuçutDevi˚ID
 = 
∑NoDevi˚
;

172 
	gsPaHo°Eº‹
 = 0;

173 c⁄° 
	gsM≠≥rSuffixI≈ut
[] = " - Input";

174 c⁄° 
	gsM≠≥rSuffixOuçut
[] = " - Output";

176 #i‡
PA_TRACK_MEMORY


177 
	gsNumAŒoˇti⁄s
 = 0;

182 
	#PaDevi˚IdToWöId
(
id
Ë(((idË< 
sNumI≈utDevi˚s
Ë? (id - 1Ë: (id - sNumI≈utDevi˚†- 1))

	)

185 
Pa_InôülizeNumDevi˚s
( );

186 
PaEº‹
 
Pa_AŒoˇãDevi˚Pås
( );

188 
CALLBACK
 
Pa_TimîCÆlback
(
UINT
 
uID
, UINT 
uMsg
,

189 
DWORD
 
dwU£r
, DWORD 
dw1
, DWORD 
dw2
);

190 
PaEº‹
 
PaHo°_GëTŸÆBuf„rFømes
–
öã∫ÆP‹tAudioSåóm
 *
∑°
 );

191 
PaEº‹
 
PaHo°_Upd©eSåómTime
–
PaWMMESåómD©a
 *
wmmeSåómD©a
 );

192 
PaEº‹
 
PaHo°_BackgroundM™agî
–
öã∫ÆP‹tAudioSåóm
 *
∑°
 );

194 *
PaHo°_AŒoˇãTøckedMem‹y
–
numByãs
 );

195 
PaHo°_FªeTøckedMem‹y
–*
addr
 );

198 
PaEº‹
 
	$PaHo°_AŒoˇãWMMESåómD©a
–
öã∫ÆP‹tAudioSåóm
 *
°ªam
 )

200 
PaEº‹
 
ªsu…
 = 
∑NoEº‹
;

201 
PaWMMESåómD©a
 *
wmmeSåómD©a
;

203 
wmmeSåómD©a
 = (
PaWMMESåómD©a
 *Ë
	`PaHo°_AŒoˇãFa°Mem‹y
((PaWMMEStreamData));

204 if–
wmmeSåómD©a
 =
NULL
 )

206 
ªsu…
 = 
∑Insufficõ¡Mem‹y
;

207 
îr‹
;

209 
	`mem£t
–
wmmeSåómD©a
, 0, (
PaWMMESåómD©a
) );

210 
°ªam
->
∑°_Devi˚D©a
 = (*Ë
wmmeSåómD©a
;

212  
ªsu…
;

214 
îr‹
:

215  
ªsu…
;

216 
	}
}

219 
	$PaHo°_FªeWMMESåómD©a
–
öã∫ÆP‹tAudioSåóm
 *
öã∫ÆSåóm
 )

221 
PaWMMESåómD©a
 *
wmmeSåómD©a
 = (PaWMMESåómD©®*Ë
öã∫ÆSåóm
->
∑°_Devi˚D©a
;

223 
	`PaHo°_FªeFa°Mem‹y
–
wmmeSåómD©a
, (
PaWMMESåómD©a
) );

224 
öã∫ÆSåóm
->
∑°_Devi˚D©a
 = 
NULL
;

225 
	}
}

227 
PaWMMESåómD©a
* 
	$PaHo°_GëWMMESåómD©a
–
öã∫ÆP‹tAudioSåóm
* 
öã∫ÆSåóm
 )

229 
PaWMMESåómD©a
 *
ªsu…
 = 
NULL
;

231 if–
öã∫ÆSåóm
 !
NULL
 )

233 
ªsu…
 = (
PaWMMESåómD©a
 *Ë
öã∫ÆSåóm
->
∑°_Devi˚D©a
;

235  
ªsu…
;

236 
	}
}

239 
	$Pa_InôülizeCpuUßgeSˇœr
–
öã∫ÆP‹tAudioSåóm
 *
°ªam
 )

241 
PaWMMESåómD©a
 *
wmmeSåómD©a
 = (PaWMMESåómD©®*Ë
°ªam
->
∑°_Devi˚D©a
;

243 
LARGE_INTEGER
 
‰equícy
;

244 if–
	`QuîyPîf‹m™˚Fªquícy
–&
‰equícy
 ) == 0 )

246 
wmmeSåómD©a
->
övî£TicksPîHo°Buf„r
 = 0.0;

250 
wmmeSåómD©a
->
övî£TicksPîHo°Buf„r
 = 
°ªam
->
∑°_Sam∂eR©e
 /

251 –()
‰equícy
.
QuadP¨t
 * 
°ªam
->
∑°_FømesPîU£rBuf„r
 * 
wmmeSåómD©a
->
u£rBuf„rsPîHo°Buf„r
 );

252 
	`DBUG
(("övî£TicksPîHo°Buf„∏%g\n", 
wmmeSåómD©a
->
övî£TicksPîHo°Buf„r
 ));

254 
	}
}

255 
	$Pa_SèπUßgeCÆcuœti⁄
–
öã∫ÆP‹tAudioSåóm
 *
°ªam
 )

257 
PaWMMESåómD©a
 *
wmmeSåómD©a
 = (PaWMMESåómD©®*Ë
°ªam
->
∑°_Devi˚D©a
;

259 if–
wmmeSåómD©a
 =
NULL
 ) ;

261 
	`QuîyPîf‹m™˚Cou¡î
–&
wmmeSåómD©a
->
íåyCou¡
 );

262 
	}
}

263 
	$Pa_EndUßgeCÆcuœti⁄
–
öã∫ÆP‹tAudioSåóm
 *
°ªam
 )

265 
LARGE_INTEGER
 
CuºítCou¡
;

266 
PaWMMESåómD©a
 *
wmmeSåómD©a
 = (PaWMMESåómD©®*Ë
°ªam
->
∑°_Devi˚D©a
;

268 if–
wmmeSåómD©a
 =
NULL
 ) ;

273 
	#LOWPASS_COEFFICIENT_0
 (0.9)

	)

274 
	#LOWPASS_COEFFICIENT_1
 (0.99999 - 
LOWPASS_COEFFICIENT_0
)

	)

275 if–
	`QuîyPîf‹m™˚Cou¡î
–&
CuºítCou¡
 ) )

277 
LONGLONG
 
InsideCou¡
 = 
CuºítCou¡
.
QuadP¨t
 - 
wmmeSåómD©a
->
íåyCou¡
.QuadPart;

278 
√wUßge
 = 
InsideCou¡
 * 
wmmeSåómD©a
->
övî£TicksPîHo°Buf„r
;

279 
°ªam
->
∑°_Ußge
 = (
LOWPASS_COEFFICIENT_0
 * stream->past_Usage) +

280 (
LOWPASS_COEFFICIENT_1
 * 
√wUßge
);

282 
	}
}

285 
	$Pa_InôülizeNumDevi˚s
( )

287 
sNumI≈utDevi˚s
 = 
	`waveInGëNumDevs
();

288 if–
sNumI≈utDevi˚s
 > 0 )

290 
sNumI≈utDevi˚s
 += 1;

291 
sDeÁu…I≈utDevi˚ID
 = 0;

295 
sDeÁu…I≈utDevi˚ID
 = 
∑NoDevi˚
;

298 
sNumOuçutDevi˚s
 = 
	`waveOutGëNumDevs
();

299 if–
sNumOuçutDevi˚s
 > 0 )

301 
sNumOuçutDevi˚s
 += 1;

302 
sDeÁu…OuçutDevi˚ID
 = 
sNumI≈utDevi˚s
;

306 
sDeÁu…OuçutDevi˚ID
 = 
∑NoDevi˚
;

309 
sNumDevi˚s
 = 
sNumI≈utDevi˚s
 + 
sNumOuçutDevi˚s
;

310 
	}
}

312 
PaEº‹
 
	$Pa_AŒoˇãDevi˚Pås
( )

314 
numByãs
;

315 
i
;

321 if–
sNumDevi˚s
 > 0 )

323 
numByãs
 = 
sNumDevi˚s
 * (
PaDevi˚Info
 *);

324 
sDevi˚Pås
 = (
PaDevi˚Info
 **Ë
	`PaHo°_AŒoˇãTøckedMem‹y
–
numByãs
 );

325 if–
sDevi˚Pås
 =
NULL
 )  
∑Insufficõ¡Mem‹y
;

327  
i
 = 0; i < 
sNumDevi˚s
; i++ )

328 
sDevi˚Pås
[
i
] = 
NULL
;

332 
sDevi˚Pås
 = 
NULL
;

335  
∑NoEº‹
;

336 
	}
}

338 
	$Pa_GëHo°Eº‹
()

340  
sPaHo°Eº‹
;

341 
	}
}

343 
	$Pa_Cou¡Devi˚s
()

345 if–
	`PaHo°_IsInôülized
() )

346  
sNumDevi˚s
;

349 
	}
}

357 c⁄° 
PaDevi˚Info
* 
	$Pa_GëDevi˚Info
–
PaDevi˚ID
 
id
 )

359 
	#NUM_STANDARDSAMPLINGRATES
 3

	)

360 
DWORD
 
cu°omSam∂ögR©es
[] = { 8000, 32000, 48000, 64000, 88200, 96000 };

361 
	#NUM_CUSTOMSAMPLINGRATES
 ((
cu°omSam∂ögR©es
)/(
DWORD
))

	)

362 
	#MAX_NUMSAMPLINGRATES
 (
NUM_STANDARDSAMPLINGRATES
+
NUM_CUSTOMSAMPLINGRATES
)

	)

364 
PaDevi˚Info
 *
devi˚Info
;

365 *
ßm∂eR©es
;

366 
i
;

367 *
s
;

369 if–
id
 < 0 || id >
sNumDevi˚s
 )

370  
NULL
;

371 if–
sDevi˚Pås
[ 
id
 ] !
NULL
 )

373  
sDevi˚Pås
[ 
id
 ];

375 
devi˚Info
 = (
PaDevi˚Info
 *)
	`PaHo°_AŒoˇãTøckedMem‹y
( (PaDeviceInfo) );

376 if–
devi˚Info
 =
NULL
 )  NULL;

377 
devi˚Info
->
°ru˘Vîsi⁄
 = 1;

378 
devi˚Info
->
maxI≈utCh™√ls
 = 0;

379 
devi˚Info
->
maxOuçutCh™√ls
 = 0;

380 
devi˚Info
->
numSam∂eR©es
 = 0;

381 
ßm∂eR©es
 = (*)
	`PaHo°_AŒoˇãTøckedMem‹y
–
MAX_NUMSAMPLINGRATES
 * () );

382 
devi˚Info
->
ßm∂eR©es
 = sampleRates;

383 
devi˚Info
->
«tiveSam∂eF‹m©s
 = 
∑I¡16
;

384 if–
id
 < 
sNumI≈utDevi˚s
 )

387 
öputMmID
 = 
	`PaDevi˚IdToWöId
(
id
);

388 
WAVEINCAPS
 
wic
;

389 if–
	`waveInGëDevC≠s
–
öputMmID
, &
wic
, –
WAVEINCAPS
 ) ) !
MMSYSERR_NOERROR
 )

390 
îr‹
;

393 if–
öputMmID
 =
WAVE_MAPPER
 )

395 
s
 = (*Ë
	`PaHo°_AŒoˇãTøckedMem‹y
–
	`°æí
–
wic
.
szP«me
 ) + 1 + (
sM≠≥rSuffixI≈ut
) );

396 
	`°r˝y
–
s
, 
wic
.
szP«me
 );

397 
	`°rˇt
–
s
, 
sM≠≥rSuffixI≈ut
 );

401 
s
 = (*Ë
	`PaHo°_AŒoˇãTøckedMem‹y
–
	`°æí
–
wic
.
szP«me
 ) + 1 );

402 
	`°r˝y
–
s
, 
wic
.
szP«me
 );

404 
devi˚Info
->
«me
 = 
s
;

405 
devi˚Info
->
maxI≈utCh™√ls
 = 
wic
.
wCh™√ls
;

410 if–(
devi˚Info
->
maxI≈utCh™√ls
 < 1) || (deviceInfo->maxInputChannels > 256) )

412 
	`ERR_RPT
(("Pa_GëDevi˚Info: Num i≈uàch™√l†ªp‹ãdá†%d! Ch™gedÅÿ2.\n", 
devi˚Info
->
maxOuçutCh™√ls
 ));

413 
devi˚Info
->
maxI≈utCh™√ls
 = 2;

417 if–
wic
.
dwF‹m©s
 & 
WAVE_FORMAT_1M16
 ||wic.dwF‹m©†& 
WAVE_FORMAT_1S16
 )

418 
ßm∂eR©es
[ 
devi˚Info
->
numSam∂eR©es
++ ] = 11025.;

419 if–
wic
.
dwF‹m©s
 & 
WAVE_FORMAT_2M16
 ||wic.dwF‹m©†& 
WAVE_FORMAT_2S16
 )

420 
ßm∂eR©es
[ 
devi˚Info
->
numSam∂eR©es
++ ] = 22050.;

421 if–
wic
.
dwF‹m©s
 & 
WAVE_FORMAT_4M16
 ||wic.dwF‹m©†& 
WAVE_FORMAT_4S16
 )

422 
ßm∂eR©es
[ 
devi˚Info
->
numSam∂eR©es
++ ] = 44100.;

425  
i
=0; i < 
NUM_CUSTOMSAMPLINGRATES
; i++ )

427 
WAVEFORMATEX
 
wfx
;

428 
wfx
.
wF‹m©Tag
 = 
WAVE_FORMAT_PCM
;

429 
wfx
.
nSam∂esPîSec
 = 
cu°omSam∂ögR©es
[
i
];

430 
wfx
.
wBôsPîSam∂e
 = 16;

431 
wfx
.
cbSize
 = 0;

432 
wfx
.
nCh™√ls
 = (
WORD
)
devi˚Info
->
maxI≈utCh™√ls
;

433 
wfx
.
nAvgByãsPîSec
 = wfx.
nCh™√ls
 * wfx.
nSam∂esPîSec
 * ();

434 
wfx
.
nBlockAlign
 = (
WORD
)(wfx.
nCh™√ls
 * ());

435 if–
	`waveInO≥n
–
NULL
, 
öputMmID
, &
wfx
, 0, 0, 
WAVE_FORMAT_QUERY
 ) =
MMSYSERR_NOERROR
 )

437 
ßm∂eR©es
[ 
devi˚Info
->
numSam∂eR©es
++ ] = 
cu°omSam∂ögR©es
[
i
];

442 if–
id
 - 
sNumI≈utDevi˚s
 < 
sNumOuçutDevi˚s
 )

445 
ouçutMmID
 = 
	`PaDevi˚IdToWöId
(
id
);

446 
WAVEOUTCAPS
 
woc
;

447 if–
	`waveOutGëDevC≠s
–
ouçutMmID
, &
woc
, –
WAVEOUTCAPS
 ) ) !
MMSYSERR_NOERROR
 )

448 
îr‹
;

450 if–
ouçutMmID
 =
WAVE_MAPPER
 )

452 
s
 = (*Ë
	`PaHo°_AŒoˇãTøckedMem‹y
–
	`°æí
–
woc
.
szP«me
 ) + 1 + (
sM≠≥rSuffixOuçut
) );

453 
	`°r˝y
–
s
, 
woc
.
szP«me
 );

454 
	`°rˇt
–
s
, 
sM≠≥rSuffixOuçut
 );

458 
s
 = (*Ë
	`PaHo°_AŒoˇãTøckedMem‹y
–
	`°æí
–
woc
.
szP«me
 ) + 1 );

459 
	`°r˝y
–
s
, 
woc
.
szP«me
 );

461 
devi˚Info
->
«me
 = 
s
;

462 
devi˚Info
->
maxOuçutCh™√ls
 = 
woc
.
wCh™√ls
;

467 if–(
devi˚Info
->
maxOuçutCh™√ls
 < 1) || (deviceInfo->maxOutputChannels > 256) )

470 
devi˚Info
->
maxOuçutCh™√ls
 = 2;

475 
	`ERR_RPT
(("Pa_GëDevi˚Info: Num ouçuàch™√l†ªp‹ãdá†%d!", 
devi˚Info
->
maxOuçutCh™√ls
 ));

476 
devi˚Info
->
maxOuçutCh™√ls
 = 0;

478  
i
=2; i<16; i += 2 )

480 
WAVEFORMATEX
 
wfx
;

481 
wfx
.
wF‹m©Tag
 = 
WAVE_FORMAT_PCM
;

482 
wfx
.
nSam∂esPîSec
 = 44100;

483 
wfx
.
wBôsPîSam∂e
 = 16;

484 
wfx
.
cbSize
 = 0;

485 
wfx
.
nCh™√ls
 = (
WORD
Ë
i
;

486 
wfx
.
nAvgByãsPîSec
 = wfx.
nCh™√ls
 * wfx.
nSam∂esPîSec
 * ();

487 
wfx
.
nBlockAlign
 = (
WORD
)(wfx.
nCh™√ls
 * ());

488 if–
	`waveOutO≥n
–
NULL
, 
ouçutMmID
, &
wfx
, 0, 0, 
WAVE_FORMAT_QUERY
 ) =
MMSYSERR_NOERROR
 )

490 
devi˚Info
->
maxOuçutCh™√ls
 = 
i
;

498 
	`ERR_RPT
((" Ch™gedÅÿ%d.\n", 
devi˚Info
->
maxOuçutCh™√ls
 ));

503 if–
woc
.
dwF‹m©s
 & 
WAVE_FORMAT_1M16
 ||woc.dwF‹m©†& 
WAVE_FORMAT_1S16
 )

504 
ßm∂eR©es
[ 
devi˚Info
->
numSam∂eR©es
++ ] = 11025.;

505 if–
woc
.
dwF‹m©s
 & 
WAVE_FORMAT_2M16
 ||woc.dwF‹m©†& 
WAVE_FORMAT_2S16
 )

506 
ßm∂eR©es
[ 
devi˚Info
->
numSam∂eR©es
++ ] = 22050.;

507 if–
woc
.
dwF‹m©s
 & 
WAVE_FORMAT_4M16
 ||woc.dwF‹m©†& 
WAVE_FORMAT_4S16
 )

508 
ßm∂eR©es
[ 
devi˚Info
->
numSam∂eR©es
++ ] = 44100.;

512  
i
=0; i < 
NUM_CUSTOMSAMPLINGRATES
; i++ )

514 
WAVEFORMATEX
 
wfx
;

515 
wfx
.
wF‹m©Tag
 = 
WAVE_FORMAT_PCM
;

516 
wfx
.
nSam∂esPîSec
 = 
cu°omSam∂ögR©es
[
i
];

517 
wfx
.
wBôsPîSam∂e
 = 16;

518 
wfx
.
cbSize
 = 0;

519 
wfx
.
nCh™√ls
 = (
WORD
)
devi˚Info
->
maxOuçutCh™√ls
;

520 
wfx
.
nAvgByãsPîSec
 = wfx.
nCh™√ls
 * wfx.
nSam∂esPîSec
 * ();

521 
wfx
.
nBlockAlign
 = (
WORD
)(wfx.
nCh™√ls
 * ());

522 if–
	`waveOutO≥n
–
NULL
, 
ouçutMmID
, &
wfx
, 0, 0, 
WAVE_FORMAT_QUERY
 ) =
MMSYSERR_NOERROR
 )

524 
ßm∂eR©es
[ 
devi˚Info
->
numSam∂eR©es
++ ] = 
cu°omSam∂ögR©es
[
i
];

528 
sDevi˚Pås
[ 
id
 ] = 
devi˚Info
;

529  
devi˚Info
;

531 
îr‹
:

532 
	`PaHo°_FªeTøckedMem‹y
–
ßm∂eR©es
 );

533 
	`PaHo°_FªeTøckedMem‹y
–
devi˚Info
 );

535  
NULL
;

536 
	}
}

547 
	#PA_ENV_BUF_SIZE
 (32)

	)

548 
	#PA_REC_IN_DEV_ENV_NAME
 ("PA_RECOMMENDED_INPUT_DEVICE")

	)

549 
	#PA_REC_OUT_DEV_ENV_NAME
 ("PA_RECOMMENDED_OUTPUT_DEVICE")

	)

550 
PaDevi˚ID
 
	$PaHo°_GëEnvDeÁu…Devi˚ID
–*
ívName
 )

552 
DWORD
 
hªsu…
;

553 
ívbuf
[
PA_ENV_BUF_SIZE
];

554 
PaDevi˚ID
 
ªcommídedID
 = 
∑NoDevi˚
;

557 
hªsu…
 = 
	`GëEnvú⁄mítV¨übÀ
–
ívName
, 
ívbuf
, 
PA_ENV_BUF_SIZE
 );

558 if–(
hªsu…
 > 0Ë&& (hªsu… < 
PA_ENV_BUF_SIZE
) )

560 
ªcommídedID
 = 
	`©oi
–
ívbuf
 );

562  
ªcommídedID
;

563 
	}
}

567 
PaDevi˚ID
 
	$Pa_GëDeÁu…I≈utDevi˚ID
( )

569 
PaDevi˚ID
 
ªsu…
;

571 
ªsu…
 = 
	`PaHo°_GëEnvDeÁu…Devi˚ID
–
PA_REC_IN_DEV_ENV_NAME
 );

572 if–
ªsu…
 =
∑NoDevi˚
 ||Ñesu… < 0 ||Ñesu… >
sNumI≈utDevi˚s
 )

574 
ªsu…
 = 
sDeÁu…I≈utDevi˚ID
;

576  
ªsu…
;

577 
	}
}

578 
PaDevi˚ID
 
	$Pa_GëDeÁu…OuçutDevi˚ID
( )

580 
PaDevi˚ID
 
ªsu…
;

582 
ªsu…
 = 
	`PaHo°_GëEnvDeÁu…Devi˚ID
–
PA_REC_OUT_DEV_ENV_NAME
 );

583 if–
ªsu…
 =
∑NoDevi˚
 ||Ñesu… < 
sNumI≈utDevi˚s
 ||Ñesu… >
sNumDevi˚s
 )

585 
ªsu…
 = 
sDeÁu…OuçutDevi˚ID
;

587  
ªsu…
;

588 
	}
}

592 
PaEº‹
 
	$PaHo°_Inô
( )

595 #i‡
PA_TRACK_MEMORY


596 
	`PRINT
(("PaHo°_Inô: sNumAŒoˇti⁄†%d\n", 
sNumAŒoˇti⁄s
 ));

599 #i‡
PA_SIMULATE_UNDERFLOW


600 
	`PRINT
(("WARNING - Underflow Simulation Enabled - Expectá Big Glitch!!!\n"));

604 
	`Pa_InôülizeNumDevi˚s
();

606  
	`Pa_AŒoˇãDevi˚Pås
();

607 
	}
}

623 
PaEº‹
 
	$Pa_TimeSli˚
–
öã∫ÆP‹tAudioSåóm
 *
°ªam
 )

625 
PaEº‹
 
ªsu…
 = 
∑NoEº‹
;

626 
MMRESULT
 
mmªsu…
;

627 *
öBufPå
;

628 *
outBufPå
;

629 
gŸI≈ut
 = 0;

630 
gŸOuçut
 = 0;

631 
i
;

632 
buf„rsPro˚s£d
 = 0;

633 
d⁄e
 = 0;

634 
PaWMMESåómD©a
 *
wmmeSåómD©a
 = (PaWMMESåómD©®*Ë
°ªam
->
∑°_Devi˚D©a
;

636 if–
wmmeSåómD©a
 =
NULL
 )  
∑I¡î«lEº‹
;

638 
°ªam
->
∑°_NumCÆlbacks
 += 1;

639 #i‡
PA_TRACE_RUN


640 
	`AddTø˚Mesßge
("Pa_TimeSli˚:Öa°_NumCÆlback†", 
°ªam
->
∑°_NumCÆlbacks
 );

645  !
d⁄e
 && !
°ªam
->
∑°_St›So⁄
 )

647 #i‡
PA_SIMULATE_UNDERFLOW


648 if(
gUndîCÆlbackCou¡î
++ =
UNDER_SLEEP_AT
)

650 
	`SÀï
(
UNDER_SLEEP_FOR
);

655 
gŸOuçut
 = 0;

656 
outBufPå
 = 
NULL
;

657 if–
°ªam
->
∑°_NumOuçutCh™√ls
 > 0 )

659 if((
wmmeSåómD©a
->
ouçutBuf„rs
[ wmmeSåómD©a->
cuºítOuçutBuf„r
 ].
dwFœgs
 & 
WHDR_DONE
) == 0)

665 
outBufPå
 = 
wmmeSåómD©a
->
ouçutBuf„rs
[ wmmeSåómD©a->
cuºítOuçutBuf„r
 ].
ÕD©a
;

666 
gŸOuçut
 = 1;

670 
gŸI≈ut
 = 0;

671 
öBufPå
 = 
NULL
;

672 if––
°ªam
->
∑°_NumI≈utCh™√ls
 > 0 ) &&

673 (
wmmeSåómD©a
->
öputBuf„rs
[ wmmeSåómD©a->
cuºítI≈utBuf„r
 ].
dwFœgs
 & 
WHDR_DONE
) )

675 
öBufPå
 = 
wmmeSåómD©a
->
öputBuf„rs
[ wmmeSåómD©a->
cuºítI≈utBuf„r
 ].
ÕD©a
;

676 
gŸI≈ut
 = 1;

677 #i‡
PA_TRACE_RUN


678 
	`AddTø˚Mesßge
("Pa_TimeSli˚: gŸ i≈uàbuf„∏© ", ()
öBufPå
 );

679 
	`AddTø˚Mesßge
("Pa_TimeSli˚: gŸ i≈uàbuf„∏# ", 
wmmeSåómD©a
->
cuºítI≈utBuf„r
 );

684 if–!
gŸI≈ut
 && !
gŸOuçut
 ) ;

685 
buf„rsPro˚s£d
 += 1;

688 
	`Pa_SèπUßgeCÆcuœti⁄
–
°ªam
 );

689  
i
=0; i<
wmmeSåómD©a
->
u£rBuf„rsPîHo°Buf„r
; i++ )

691 if–
d⁄e
 )

693 if–
gŸOuçut
 )

696 
	`AddTø˚Mesßge
("Pa_TimeSli˚: zîÿª° o‡wavêbuf„∏", 
i
 );

697 
	`mem£t
–
outBufPå
, 0, 
wmmeSåómD©a
->
byãsPîU£rOuçutBuf„r
 );

703 
ªsu…
 = 
	`Pa_CÆlC⁄vîtI¡16
–
°ªam
, (*Ë
öBufPå
, (*Ë
outBufPå
 );

704 if–
ªsu…
 !0Ë
d⁄e
 = 1;

706 if–
gŸI≈ut
 ) 
öBufPå
 +
wmmeSåómD©a
->
byãsPîU£rI≈utBuf„r
;

707 if–
gŸOuçut
Ë
outBufPå
 +
wmmeSåómD©a
->
byãsPîU£rOuçutBuf„r
;

709 
	`Pa_EndUßgeCÆcuœti⁄
–
°ªam
 );

711 if–
gŸI≈ut
 )

713 
mmªsu…
 = 
	`waveInAddBuf„r
–
wmmeSåómD©a
->
hWaveIn
,

714 &
wmmeSåómD©a
->
öputBuf„rs
[ wmmeSåómD©a->
cuºítI≈utBuf„r
 ],

715 (
WAVEHDR
) );

716 if–
mmªsu…
 !
MMSYSERR_NOERROR
 )

718 
sPaHo°Eº‹
 = 
mmªsu…
;

719 
ªsu…
 = 
∑Ho°Eº‹
;

722 
wmmeSåómD©a
->
cuºítI≈utBuf„r
 = (wmmeSåómD©a->cuºítI≈utBuf„r+1 >wmmeSåómD©a->
numHo°Buf„rs
) ?

723 0 : 
wmmeSåómD©a
->
cuºítI≈utBuf„r
+1;

726 if–
gŸOuçut
 )

728 #i‡
PA_TRACE_START_STOP


729 
	`AddTø˚Mesßge
–"Pa_TimeSli˚: wrôög buf„∏", 
wmmeSåómD©a
->
cuºítOuçutBuf„r
 );

731 
mmªsu…
 = 
	`waveOutWrôe
–
wmmeSåómD©a
->
hWaveOut
,

732 &
wmmeSåómD©a
->
ouçutBuf„rs
[ wmmeSåómD©a->
cuºítOuçutBuf„r
 ],

733 (
WAVEHDR
) );

734 if–
mmªsu…
 !
MMSYSERR_NOERROR
 )

736 
sPaHo°Eº‹
 = 
mmªsu…
;

737 
ªsu…
 = 
∑Ho°Eº‹
;

740 
wmmeSåómD©a
->
cuºítOuçutBuf„r
 = (wmmeSåómD©a->cuºítOuçutBuf„r+1 >wmmeSåómD©a->
numHo°Buf„rs
) ?

741 0 : 
wmmeSåómD©a
->
cuºítOuçutBuf„r
+1;

746 #i‡
PA_TRACE_RUN


747 
	`AddTø˚Mesßge
("Pa_TimeSli˚: buf„rsPro˚s£d ", 
buf„rsPro˚s£d
 );

749  (
ªsu…
 !0Ë?Ñesu… : 
d⁄e
;

750 
	}
}

753 
PaEº‹
 
	$PaHo°_BackgroundM™agî
–
öã∫ÆP‹tAudioSåóm
 *
°ªam
 )

755 
PaEº‹
 
ªsu…
 = 
∑NoEº‹
;

756 
i
;

757 
numQueuedouçutBuf„rs
 = 0;

758 
PaWMMESåómD©a
 *
wmmeSåómD©a
 = (PaWMMESåómD©®*Ë
°ªam
->
∑°_Devi˚D©a
;

761 if–
°ªam
->
∑°_St›Now
 )

763 
°ªam
->
∑°_IsA˘ive
 = 0;

768 if–
°ªam
->
∑°_St›So⁄
 )

772 
numQueuedouçutBuf„rs
 = 0;

773 if–
°ªam
->
∑°_NumOuçutCh™√ls
 > 0 )

775  
i
=0; i<
wmmeSåómD©a
->
numHo°Buf„rs
; i++ )

777 if–!–
wmmeSåómD©a
->
ouçutBuf„rs
[ 
i
 ].
dwFœgs
 & 
WHDR_DONE
) )

779 #i‡
PA_TRACE_START_STOP


780 
	`AddTø˚Mesßge
–"PaHo°_BackgroundM™agî: waôög f‹ buf„∏", 
i
 );

782 
numQueuedouçutBuf„rs
++;

786 #i‡
PA_TRACE_START_STOP


787 
	`AddTø˚Mesßge
–"PaHo°_BackgroundM™agî:ÇumQueuedouçutBuf„r†", 
numQueuedouçutBuf„rs
 );

789 if–
numQueuedouçutBuf„rs
 == 0 )

791 
°ªam
->
∑°_IsA˘ive
 = 0;

797 if–(
ªsu…
 = 
	`Pa_TimeSli˚
–
°ªam
 )) != 0)

800 #i‡
PA_TRACE_START_STOP


801 
	`AddTø˚Mesßge
–"PaHo°_BackgroundM™agî: TimeSli˚(Ëªtu∫ed ", 
ªsu…
 );

803 
°ªam
->
∑°_St›So⁄
 = 1;

804 
ªsu…
 = 
∑NoEº‹
;

808 
	`PaHo°_Upd©eSåómTime
–
wmmeSåómD©a
 );

809  
ªsu…
;

810 
	}
}

812 #i‡
PA_USE_TIMER_CALLBACK


814 
CALLBACK
 
	$Pa_TimîCÆlback
(
UINT
 
uID
, UINT 
uMsg
, 
DWORD
 
dwU£r
, DWORD 
dw1
, DWORD 
dw2
)

816 
öã∫ÆP‹tAudioSåóm
 *
°ªam
;

817 
PaWMMESåómD©a
 *
wmmeSåómD©a
;

818 
PaEº‹
 
ªsu…
;

820 
°ªam
 = (
öã∫ÆP‹tAudioSåóm
 *Ë
dwU£r
;

821 if–
°ªam
 =
NULL
 ) ;

822 
wmmeSåómD©a
 = (
PaWMMESåómD©a
 *Ë
°ªam
->
∑°_Devi˚D©a
;

823 if–
wmmeSåómD©a
 =
NULL
 ) ;

824 if–
wmmeSåómD©a
->
ifInsideCÆlback
 )

826 if–
wmmeSåómD©a
->
timîID
 != 0 )

828 
	`timeKûlEvít
(
wmmeSåómD©a
->
timîID
);

829 
wmmeSåómD©a
->
timîID
 = 0;

833 
wmmeSåómD©a
->
ifInsideCÆlback
 = 1;

835 
ªsu…
 = 
	`PaHo°_BackgroundM™agî
–
°ªam
 );

836 if–
ªsu…
 !
∑NoEº‹
 )

838 
°ªam
->
∑°_IsA˘ive
 = 0;

840 
wmmeSåómD©a
->
ifInsideCÆlback
 = 0;

841 
	}
}

844 
DWORD
 
WINAPI
 
	$WöMMPa_OuçutThªadProc
–*
pArg
 )

846 
öã∫ÆP‹tAudioSåóm
 *
°ªam
;

847 
PaWMMESåómD©a
 *
wmmeSåómD©a
;

848 
HANDLE
 
evíts
[2];

849 
numEvíts
 = 0;

850 
DWORD
 
ªsu…
 = 0;

851 
DWORD
 
waôResu…
;

852 
DWORD
 
numTimeouts
 = 0;

853 
DWORD
 
timeOut
;

854 
°ªam
 = (
öã∫ÆP‹tAudioSåóm
 *Ë
pArg
;

855 
wmmeSåómD©a
 = (
PaWMMESåómD©a
 *Ë
°ªam
->
∑°_Devi˚D©a
;

856 #i‡
PA_TRACE_START_STOP


857 
	`AddTø˚Mesßge
–"WöMMPa_OuçutThªadProc:ÅimeoutPîiod", 
timeoutPîiod
 );

858 
	`AddTø˚Mesßge
–"WöMMPa_OuçutThªadProc:Öa°_NumU£rBuf„rs", 
°ªam
->
∑°_NumU£rBuf„rs
 );

861 
timeOut
 = (
DWORD
Ë(500.0 * 
	`PaHo°_GëTŸÆBuf„rFømes
–
°ªam
 ) / såóm->
∑°_Sam∂eR©e
);

863 
evíts
[
numEvíts
++] = 
wmmeSåómD©a
->
buf„rEvít
;

864 if–
wmmeSåómD©a
->
ab‹tEvítInôed
 ) 
evíts
[
numEvíts
++] = wmmeSåómD©a->
ab‹tEvít
;

866  
°ªam
->
∑°_IsA˘ive
 )

871 
waôResu…
 = 
	`WaôF‹Mu…ùÀObje˘s
–
numEvíts
, 
evíts
, 
FALSE
, 
timeOut
 );

873 if–
waôResu…
 =
WAIT_FAILED
 )

875 
sPaHo°Eº‹
 = 
	`GëLa°Eº‹
();

876 
ªsu…
 = 
∑Ho°Eº‹
;

877 
°ªam
->
∑°_IsA˘ive
 = 0;

880 if–
waôResu…
 =
WAIT_TIMEOUT
 )

882 #i‡
PA_TRACE_START_STOP


883 
	`AddTø˚Mesßge
–"WöMMPa_OuçutThªadProc:Åimed ouà", 
numQueuedouçutBuf„rs
 );

885 
numTimeouts
 += 1;

888 
ªsu…
 = 
	`PaHo°_BackgroundM™agî
–
°ªam
 );

889 if–
ªsu…
 !
∑NoEº‹
 )

891 
°ªam
->
∑°_IsA˘ive
 = 0;

894  
ªsu…
;

895 
	}
}

899 
PaEº‹
 
	$PaHo°_O≥nI≈utSåóm
–
öã∫ÆP‹tAudioSåóm
 *
°ªam
 )

901 
PaEº‹
 
ªsu…
 = 
∑NoEº‹
;

902 
MMRESULT
 
mmªsu…
;

903 
PaWMMESåómD©a
 *
wmmeSåómD©a
;

904 
i
;

905 
öputMmId
;

906 
byãsPîI≈utFøme
;

907 
WAVEFORMATEX
 
wfx
;

908 c⁄° 
PaDevi˚Info
 *
devi˚Info
;

910 
wmmeSåómD©a
 = (
PaWMMESåómD©a
 *Ë
°ªam
->
∑°_Devi˚D©a
;

911 
	`DBUG
(("PaHo°_O≥nSåóm: devi˚ID = 0x%x\n", 
°ªam
->
∑°_I≈utDevi˚ID
));

912 
devi˚Info
 = 
	`Pa_GëDevi˚Info
–
°ªam
->
∑°_I≈utDevi˚ID
 );

913 if–
devi˚Info
 =
NULL
 )  
∑I¡î«lEº‹
;

915  
devi˚Info
->
«tiveSam∂eF‹m©s
 )

917 
∑I¡32
:

918 
∑Flﬂt32
:

919 
byãsPîI≈utFøme
 = (Ë* 
°ªam
->
∑°_NumI≈utCh™√ls
;

922 
byãsPîI≈utFøme
 = (Ë* 
°ªam
->
∑°_NumI≈utCh™√ls
;

925 
wfx
.
wF‹m©Tag
 = 
WAVE_FORMAT_PCM
;

926 
wfx
.
nCh™√ls
 = (
WORD
Ë
°ªam
->
∑°_NumI≈utCh™√ls
;

927 
wfx
.
nSam∂esPîSec
 = (
DWORD
Ë
°ªam
->
∑°_Sam∂eR©e
;

928 
wfx
.
nAvgByãsPîSec
 = (
DWORD
)(
byãsPîI≈utFøme
 * 
°ªam
->
∑°_Sam∂eR©e
);

929 
wfx
.
nBlockAlign
 = (
WORD
)
byãsPîI≈utFøme
;

930 
wfx
.
wBôsPîSam∂e
 = (
WORD
)((
byãsPîI≈utFøme
/
°ªam
->
∑°_NumI≈utCh™√ls
) * 8);

931 
wfx
.
cbSize
 = 0;

932 
öputMmId
 = 
	`PaDevi˚IdToWöId
–
°ªam
->
∑°_I≈utDevi˚ID
 );

933 #i‡
PA_USE_TIMER_CALLBACK


934 
mmªsu…
 = 
	`waveInO≥n
–&
wmmeSåómD©a
->
hWaveIn
, 
öputMmId
, &
wfx
,

935 0, 0, 
CALLBACK_NULL
 );

937 
mmªsu…
 = 
	`waveInO≥n
–&
wmmeSåómD©a
->
hWaveIn
, 
öputMmId
, &
wfx
,

938 (
DWORD
)
wmmeSåómD©a
->
buf„rEvít
, (DWORDË
°ªam
, 
CALLBACK_EVENT
 );

940 if–
mmªsu…
 !
MMSYSERR_NOERROR
 )

942 
	`ERR_RPT
(("PortAudio: PaHost_OpenInputStream() failed!\n"));

943 
ªsu…
 = 
∑Ho°Eº‹
;

944 
sPaHo°Eº‹
 = 
mmªsu…
;

945 
îr‹
;

948 
wmmeSåómD©a
->
öputBuf„rs
 = (
WAVEHDR
 *Ë
	`PaHo°_AŒoˇãTøckedMem‹y
–(WAVEHDR)*wmmeSåómD©a->
numHo°Buf„rs
 );

949 if–
wmmeSåómD©a
->
öputBuf„rs
 =
NULL
 )

951 
ªsu…
 = 
∑Insufficõ¡Mem‹y
;

952 
îr‹
;

955  
i
=0; i<
wmmeSåómD©a
->
numHo°Buf„rs
; i++ )

957 
wmmeSåómD©a
->
öputBuf„rs
[
i
].
ÕD©a
 = (*)
	`PaHo°_AŒoˇãTøckedMem‹y
–wmmeSåómD©a->
byãsPîHo°I≈utBuf„r
 );

958 if–
wmmeSåómD©a
->
öputBuf„rs
[
i
].
ÕD©a
 =
NULL
 )

960 
ªsu…
 = 
∑Insufficõ¡Mem‹y
;

961 
îr‹
;

963 
wmmeSåómD©a
->
öputBuf„rs
[
i
].
dwBuf„rLígth
 = wmmeSåómD©a->
byãsPîHo°I≈utBuf„r
;

964 
wmmeSåómD©a
->
öputBuf„rs
[
i
].
dwU£r
 = i;

965 if––
mmªsu…
 = 
	`waveInPª∑ªHódî
–
wmmeSåómD©a
->
hWaveIn
, &wmmeSåómD©a->
öputBuf„rs
[
i
], (
WAVEHDR
Ë)Ë!
MMSYSERR_NOERROR
 )

967 
ªsu…
 = 
∑Ho°Eº‹
;

968 
sPaHo°Eº‹
 = 
mmªsu…
;

969 
îr‹
;

972  
ªsu…
;

974 
îr‹
:

975  
ªsu…
;

976 
	}
}

978 
PaEº‹
 
	$PaHo°_O≥nOuçutSåóm
–
öã∫ÆP‹tAudioSåóm
 *
°ªam
 )

980 
PaEº‹
 
ªsu…
 = 
∑NoEº‹
;

981 
MMRESULT
 
mmªsu…
;

982 
PaWMMESåómD©a
 *
wmmeSåómD©a
;

983 
i
;

984 
ouçutMmID
;

985 
byãsPîOuçutFøme
;

986 
WAVEFORMATEX
 
wfx
;

987 c⁄° 
PaDevi˚Info
 *
devi˚Info
;

989 
wmmeSåómD©a
 = (
PaWMMESåómD©a
 *Ë
°ªam
->
∑°_Devi˚D©a
;

990 
	`DBUG
(("PaHo°_O≥nSåóm: devi˚ID = 0x%x\n", 
°ªam
->
∑°_OuçutDevi˚ID
));

992 
devi˚Info
 = 
	`Pa_GëDevi˚Info
–
°ªam
->
∑°_OuçutDevi˚ID
 );

993 if–
devi˚Info
 =
NULL
 )  
∑I¡î«lEº‹
;

995  
devi˚Info
->
«tiveSam∂eF‹m©s
 )

997 
∑I¡32
:

998 
∑Flﬂt32
:

999 
byãsPîOuçutFøme
 = (Ë* 
°ªam
->
∑°_NumOuçutCh™√ls
;

1002 
byãsPîOuçutFøme
 = (Ë* 
°ªam
->
∑°_NumOuçutCh™√ls
;

1005 
wfx
.
wF‹m©Tag
 = 
WAVE_FORMAT_PCM
;

1006 
wfx
.
nCh™√ls
 = (
WORD
Ë
°ªam
->
∑°_NumOuçutCh™√ls
;

1007 
wfx
.
nSam∂esPîSec
 = (
DWORD
Ë
°ªam
->
∑°_Sam∂eR©e
;

1008 
wfx
.
nAvgByãsPîSec
 = (
DWORD
)(
byãsPîOuçutFøme
 * 
°ªam
->
∑°_Sam∂eR©e
);

1009 
wfx
.
nBlockAlign
 = (
WORD
)
byãsPîOuçutFøme
;

1010 
wfx
.
wBôsPîSam∂e
 = (
WORD
)((
byãsPîOuçutFøme
/
°ªam
->
∑°_NumOuçutCh™√ls
) * 8);

1011 
wfx
.
cbSize
 = 0;

1012 
ouçutMmID
 = 
	`PaDevi˚IdToWöId
–
°ªam
->
∑°_OuçutDevi˚ID
 );

1013 #i‡
PA_USE_TIMER_CALLBACK


1014 
mmªsu…
 = 
	`waveOutO≥n
–&
wmmeSåómD©a
->
hWaveOut
, 
ouçutMmID
, &
wfx
,

1015 0, 0, 
CALLBACK_NULL
 );

1018 
wmmeSåómD©a
->
ab‹tEvít
 = 
	`Cª©eEvít
–
NULL
, 
TRUE
, 
FALSE
, NULL );

1019 if–
wmmeSåómD©a
->
ab‹tEvít
 =
NULL
 )

1021 
ªsu…
 = 
∑Ho°Eº‹
;

1022 
sPaHo°Eº‹
 = 
	`GëLa°Eº‹
();

1023 
îr‹
;

1025 
wmmeSåómD©a
->
ab‹tEvítInôed
 = 1;

1026 
mmªsu…
 = 
	`waveOutO≥n
–&
wmmeSåómD©a
->
hWaveOut
, 
ouçutMmID
, &
wfx
,

1027 (
DWORD
)
wmmeSåómD©a
->
buf„rEvít
, (DWORDË
°ªam
, 
CALLBACK_EVENT
 );

1029 if–
mmªsu…
 !
MMSYSERR_NOERROR
 )

1031 
	`ERR_RPT
(("PortAudio: PaHost_OpenOutputStream() failed!\n"));

1032 
ªsu…
 = 
∑Ho°Eº‹
;

1033 
sPaHo°Eº‹
 = 
mmªsu…
;

1034 
îr‹
;

1037 
wmmeSåómD©a
->
ouçutBuf„rs
 = (
WAVEHDR
 *Ë
	`PaHo°_AŒoˇãTøckedMem‹y
–(WAVEHDR)*wmmeSåómD©a->
numHo°Buf„rs
 );

1038 if–
wmmeSåómD©a
->
ouçutBuf„rs
 =
NULL
 )

1040 
ªsu…
 = 
∑Insufficõ¡Mem‹y
;

1041 
îr‹
;

1044  
i
=0; i<
wmmeSåómD©a
->
numHo°Buf„rs
; i++ )

1046 
wmmeSåómD©a
->
ouçutBuf„rs
[
i
].
ÕD©a
 = (*Ë
	`PaHo°_AŒoˇãTøckedMem‹y
–wmmeSåómD©a->
byãsPîHo°OuçutBuf„r
 );

1047 if–
wmmeSåómD©a
->
ouçutBuf„rs
[
i
].
ÕD©a
 =
NULL
 )

1049 
ªsu…
 = 
∑Insufficõ¡Mem‹y
;

1050 
îr‹
;

1052 
wmmeSåómD©a
->
ouçutBuf„rs
[
i
].
dwBuf„rLígth
 = wmmeSåómD©a->
byãsPîHo°OuçutBuf„r
;

1053 
wmmeSåómD©a
->
ouçutBuf„rs
[
i
].
dwU£r
 = i;

1054 if–(
mmªsu…
 = 
	`waveOutPª∑ªHódî
–
wmmeSåómD©a
->
hWaveOut
, &wmmeSåómD©a->
ouçutBuf„rs
[
i
], (
WAVEHDR
Ë)Ë!
MMSYSERR_NOERROR
 )

1056 
ªsu…
 = 
∑Ho°Eº‹
;

1057 
sPaHo°Eº‹
 = 
mmªsu…
;

1058 
îr‹
;

1061  
ªsu…
;

1063 
îr‹
:

1064  
ªsu…
;

1065 
	}
}

1067 
PaEº‹
 
	$PaHo°_GëTŸÆBuf„rFømes
–
öã∫ÆP‹tAudioSåóm
 *
°ªam
 )

1069 
PaWMMESåómD©a
 *
wmmeSåómD©a
 = (PaWMMESåómD©®*Ë
°ªam
->
∑°_Devi˚D©a
;

1070  
wmmeSåómD©a
->
numHo°Buf„rs
 * wmmeSåómD©a->
‰amesPîHo°Buf„r
;

1071 
	}
}

1076 
	$PaHo°_CÆcNumHo°Buf„rs
–
öã∫ÆP‹tAudioSåóm
 *
°ªam
 )

1078 
PaWMMESåómD©a
 *
wmmeSåómD©a
 = (PaWMMESåómD©®*Ë
°ªam
->
∑°_Devi˚D©a
;

1079 
möNumBuf„rs
;

1080 
mö‰amesPîHo°Buf„r
;

1081 
max‰amesPîHo°Buf„r
;

1082 
möTŸÆFømes
;

1083 
u£rBuf„rsPîHo°Buf„r
;

1084 
‰amesPîHo°Buf„r
;

1085 
numHo°Buf„rs
;

1088 
mö‰amesPîHo°Buf„r
 = (Ë(
PA_MIN_MSEC_PER_HOST_BUFFER
 * 
°ªam
->
∑°_Sam∂eR©e
 * 0.001);

1089 
mö‰amesPîHo°Buf„r
 = (minframesPerHostBuffer + 7) & ~7;

1090 
	`DBUG
(("PaHo°_CÆcNumHo°Buf„rs: mö‰amesPîHo°Buf„∏%d\n", 
mö‰amesPîHo°Buf„r
 ));

1091 
max‰amesPîHo°Buf„r
 = (Ë(
PA_MAX_MSEC_PER_HOST_BUFFER
 * 
°ªam
->
∑°_Sam∂eR©e
 * 0.001);

1092 
max‰amesPîHo°Buf„r
 = (maxframesPerHostBuffer + 7) & ~7;

1093 
	`DBUG
(("PaHo°_CÆcNumHo°Buf„rs: max‰amesPîHo°Buf„∏%d\n", 
max‰amesPîHo°Buf„r
 ));

1095 
möNumBuf„rs
 = 
	`Pa_GëMöNumBuf„rs
–
°ªam
->
∑°_FømesPîU£rBuf„r
, såóm->
∑°_Sam∂eR©e
 );

1096 
°ªam
->
∑°_NumU£rBuf„rs
 = ( 
möNumBuf„rs
 > stream->past_NumUserBuffers ) ? minNumBuffers : stream->past_NumUserBuffers;

1097 
	`DBUG
(("PaHo°_CÆcNumHo°Buf„rs: möÖa°_NumU£rBuf„r†%d\n", 
°ªam
->
∑°_NumU£rBuf„rs
 ));

1098 
möTŸÆFømes
 = 
°ªam
->
∑°_NumU£rBuf„rs
 * såóm->
∑°_FømesPîU£rBuf„r
;

1100 if–(Ë
°ªam
->
∑°_FømesPîU£rBuf„r
 < 
mö‰amesPîHo°Buf„r
 )

1102 
u£rBuf„rsPîHo°Buf„r
 =

1103 (
mö‰amesPîHo°Buf„r
 + 
°ªam
->
∑°_FømesPîU£rBuf„r
 - 1) /

1104 
°ªam
->
∑°_FømesPîU£rBuf„r
;

1108 
u£rBuf„rsPîHo°Buf„r
 = 1;

1110 
‰amesPîHo°Buf„r
 = 
°ªam
->
∑°_FømesPîU£rBuf„r
 * 
u£rBuf„rsPîHo°Buf„r
;

1112 
numHo°Buf„rs
 = (
möTŸÆFømes
 + 
‰amesPîHo°Buf„r
 - 1) / framesPerHostBuffer;

1114 if–
numHo°Buf„rs
 < 
PA_MIN_NUM_HOST_BUFFERS
)

1116 
numHo°Buf„rs
 = 
PA_MIN_NUM_HOST_BUFFERS
;

1118 if–(
numHo°Buf„rs
 > 
PA_MAX_NUM_HOST_BUFFERS
) &&

1119 ((Ë
°ªam
->
∑°_FømesPîU£rBuf„r
 < (
max‰amesPîHo°Buf„r
/2) ) )

1122 
numHo°Buf„rs
 > 
PA_MAX_NUM_HOST_BUFFERS
)

1124 
u£rBuf„rsPîHo°Buf„r
 += 1;

1125 
‰amesPîHo°Buf„r
 = 
°ªam
->
∑°_FømesPîU£rBuf„r
 * 
u£rBuf„rsPîHo°Buf„r
;

1126 
numHo°Buf„rs
 = (
möTŸÆFømes
 + 
‰amesPîHo°Buf„r
 - 1) / framesPerHostBuffer;

1128 if–(
‰amesPîHo°Buf„r
 > 
max‰amesPîHo°Buf„r
) ||

1129 (
numHo°Buf„rs
 < 
PA_MAX_NUM_HOST_BUFFERS
) )

1131 
u£rBuf„rsPîHo°Buf„r
 -= 1;

1132 
‰amesPîHo°Buf„r
 = 
°ªam
->
∑°_FømesPîU£rBuf„r
 * 
u£rBuf„rsPîHo°Buf„r
;

1133 
numHo°Buf„rs
 = (
möTŸÆFømes
 + 
‰amesPîHo°Buf„r
 - 1) / framesPerHostBuffer;

1139 
wmmeSåómD©a
->
u£rBuf„rsPîHo°Buf„r
 = userBuffersPerHostBuffer;

1140 
wmmeSåómD©a
->
‰amesPîHo°Buf„r
 = framesPerHostBuffer;

1141 
wmmeSåómD©a
->
numHo°Buf„rs
 =ÇumHostBuffers;

1142 
	`DBUG
(("PaHo°_CÆcNumHo°Buf„rs: u£rBuf„rsPîHo°Buf„∏%d\n", 
wmmeSåómD©a
->
u£rBuf„rsPîHo°Buf„r
 ));

1143 
	`DBUG
(("PaHo°_CÆcNumHo°Buf„rs:ÇumHo°Buf„r†%d\n", 
wmmeSåómD©a
->
numHo°Buf„rs
 ));

1144 
	`DBUG
(("PaHo°_CÆcNumHo°Buf„rs: fømesPîHo°Buf„∏%d\n", 
wmmeSåómD©a
->
‰amesPîHo°Buf„r
 ));

1145 
	`DBUG
(("PaHo°_CÆcNumHo°Buf„rs:Öa°_NumU£rBuf„r†%d\n", 
°ªam
->
∑°_NumU£rBuf„rs
 ));

1146 
	}
}

1148 
PaEº‹
 
	$PaHo°_O≥nSåóm
–
öã∫ÆP‹tAudioSåóm
 *
°ªam
 )

1150 
PaEº‹
 
ªsu…
 = 
∑NoEº‹
;

1151 
PaWMMESåómD©a
 *
wmmeSåómD©a
;

1153 
ªsu…
 = 
	`PaHo°_AŒoˇãWMMESåómD©a
–
°ªam
 );

1154 if–
ªsu…
 !
∑NoEº‹
 ) Ñesult;

1156 
wmmeSåómD©a
 = 
	`PaHo°_GëWMMESåómD©a
–
°ªam
 );

1159 
	`PaHo°_CÆcNumHo°Buf„rs
–
°ªam
 );

1161 
m£cL©ícy
 = (Ë((
	`PaHo°_GëTŸÆBuf„rFømes
(
°ªam
Ë* 1000Ë/ såóm->
∑°_Sam∂eR©e
);

1162 
	`DBUG
(("P‹tAudiÿ⁄ WMME - L©ícy = %d fømes, %d m£c\n", 
	`PaHo°_GëTŸÆBuf„rFømes
(
°ªam
), 
m£cL©ícy
 ));

1164 
	`InôülizeCrôiˇlSe˘i⁄
–&
wmmeSåómD©a
->
°ªamLock
 );

1165 
wmmeSåómD©a
->
°ªamLockInôed
 = 1;

1167 #i‡(
PA_USE_TIMER_CALLBACK
 == 0)

1168 
wmmeSåómD©a
->
buf„rEvítInôed
 = 0;

1169 
wmmeSåómD©a
->
buf„rEvít
 = 
	`Cª©eEvít
–
NULL
, 
FALSE
, FALSE, NULL );

1170 if–
wmmeSåómD©a
->
buf„rEvít
 =
NULL
 )

1172 
ªsu…
 = 
∑Ho°Eº‹
;

1173 
sPaHo°Eº‹
 = 
	`GëLa°Eº‹
();

1174 
îr‹
;

1176 
wmmeSåómD©a
->
buf„rEvítInôed
 = 1;

1179 
wmmeSåómD©a
->
byãsPîU£rOuçutBuf„r
 = 
°ªam
->
∑°_FømesPîU£rBuf„r
 * såóm->
∑°_NumOuçutCh™√ls
 * ();

1180 
wmmeSåómD©a
->
byãsPîHo°OuçutBuf„r
 = wmmeSåómD©a->
u£rBuf„rsPîHo°Buf„r
 * wmmeSåómD©a->
byãsPîU£rOuçutBuf„r
;

1181 if–(
°ªam
->
∑°_OuçutDevi˚ID
 !
∑NoDevi˚
Ë&& (°ªam->
∑°_NumOuçutCh™√ls
 > 0) )

1183 
ªsu…
 = 
	`PaHo°_O≥nOuçutSåóm
–
°ªam
 );

1184 if–
ªsu…
 < 0 ) 
îr‹
;

1187 
wmmeSåómD©a
->
byãsPîU£rI≈utBuf„r
 = 
°ªam
->
∑°_FømesPîU£rBuf„r
 * såóm->
∑°_NumI≈utCh™√ls
 * ();

1188 
wmmeSåómD©a
->
byãsPîHo°I≈utBuf„r
 = wmmeSåómD©a->
u£rBuf„rsPîHo°Buf„r
 * wmmeSåómD©a->
byãsPîU£rI≈utBuf„r
;

1189 if–(
°ªam
->
∑°_I≈utDevi˚ID
 !
∑NoDevi˚
Ë&& (°ªam->
∑°_NumI≈utCh™√ls
 > 0) )

1191 
ªsu…
 = 
	`PaHo°_O≥nI≈utSåóm
–
°ªam
 );

1192 if–
ªsu…
 < 0 ) 
îr‹
;

1195 
	`Pa_InôülizeCpuUßgeSˇœr
–
°ªam
 );

1197  
ªsu…
;

1199 
îr‹
:

1200 
	`PaHo°_Clo£Såóm
–
°ªam
 );

1201  
ªsu…
;

1202 
	}
}

1204 
PaEº‹
 
	$PaHo°_SèπOuçut
–
öã∫ÆP‹tAudioSåóm
 *
°ªam
 )

1206 
PaEº‹
 
ªsu…
 = 
∑NoEº‹
;

1207 
MMRESULT
 
mmªsu…
;

1208 
i
;

1209 
PaWMMESåómD©a
 *
wmmeSåómD©a
 = 
	`PaHo°_GëWMMESåómD©a
–
°ªam
 );

1211 if–
wmmeSåómD©a
 =
NULL
 )  
∑I¡î«lEº‹
;

1213 if–
°ªam
->
∑°_OuçutDevi˚ID
 !
∑NoDevi˚
 )

1215 if–(
mmªsu…
 = 
	`waveOutPau£
–
wmmeSåómD©a
->
hWaveOut
 )Ë!
MMSYSERR_NOERROR
 )

1217 
ªsu…
 = 
∑Ho°Eº‹
;

1218 
sPaHo°Eº‹
 = 
mmªsu…
;

1219 
îr‹
;

1221  
i
=0; i<
wmmeSåómD©a
->
numHo°Buf„rs
; i++ )

1223 
	`ZîoMem‹y
–
wmmeSåómD©a
->
ouçutBuf„rs
[
i
].
ÕD©a
, wmmeSåómD©a->ouçutBuf„rs[i].
dwBuf„rLígth
 );

1224 
mmªsu…
 = 
	`waveOutWrôe
–
wmmeSåómD©a
->
hWaveOut
, &wmmeSåómD©a->
ouçutBuf„rs
[
i
], (
WAVEHDR
) );

1225 if–
mmªsu…
 !
MMSYSERR_NOERROR
 )

1227 
ªsu…
 = 
∑Ho°Eº‹
;

1228 
sPaHo°Eº‹
 = 
mmªsu…
;

1229 
îr‹
;

1231 
°ªam
->
∑°_FømeCou¡
 +
wmmeSåómD©a
->
‰amesPîHo°Buf„r
;

1233 
wmmeSåómD©a
->
cuºítOuçutBuf„r
 = 0;

1234 if–(
mmªsu…
 = 
	`waveOutRe°¨t
–
wmmeSåómD©a
->
hWaveOut
 )Ë!
MMSYSERR_NOERROR
 )

1236 
ªsu…
 = 
∑Ho°Eº‹
;

1237 
sPaHo°Eº‹
 = 
mmªsu…
;

1238 
îr‹
;

1242 
îr‹
:

1243 
	`DBUG
(("PaHo°_SèπOuçut: wavêªtu∫ed mmªsu… = 0x%X.\n", 
mmªsu…
));

1244  
ªsu…
;

1245 
	}
}

1247 
PaEº‹
 
	$PaHo°_SèπI≈ut
–
öã∫ÆP‹tAudioSåóm
 *
öã∫ÆSåóm
 )

1249 
PaEº‹
 
ªsu…
 = 
∑NoEº‹
;

1250 
MMRESULT
 
mmªsu…
;

1251 
i
;

1252 
PaWMMESåómD©a
 *
wmmeSåómD©a
 = 
	`PaHo°_GëWMMESåómD©a
–
öã∫ÆSåóm
 );

1254 if–
wmmeSåómD©a
 =
NULL
 )  
∑I¡î«lEº‹
;

1256 if–
öã∫ÆSåóm
->
∑°_I≈utDevi˚ID
 !
∑NoDevi˚
 )

1258  
i
=0; i<
wmmeSåómD©a
->
numHo°Buf„rs
; i++ )

1260 
mmªsu…
 = 
	`waveInAddBuf„r
–
wmmeSåómD©a
->
hWaveIn
, &wmmeSåómD©a->
öputBuf„rs
[
i
], (
WAVEHDR
) );

1261 if–
mmªsu…
 !
MMSYSERR_NOERROR
 )

1263 
ªsu…
 = 
∑Ho°Eº‹
;

1264 
sPaHo°Eº‹
 = 
mmªsu…
;

1265 
îr‹
;

1268 
wmmeSåómD©a
->
cuºítI≈utBuf„r
 = 0;

1269 
mmªsu…
 = 
	`waveInSèπ
–
wmmeSåómD©a
->
hWaveIn
 );

1270 
	`DBUG
(("Pa_SèπSåóm: waveInSèπÑëu∫ed = 0x%X.\n", 
mmªsu…
));

1271 if–
mmªsu…
 !
MMSYSERR_NOERROR
 )

1273 
ªsu…
 = 
∑Ho°Eº‹
;

1274 
sPaHo°Eº‹
 = 
mmªsu…
;

1275 
îr‹
;

1279 
îr‹
:

1280  
ªsu…
;

1281 
	}
}

1283 
PaEº‹
 
	$PaHo°_SèπEngöe
–
öã∫ÆP‹tAudioSåóm
 *
°ªam
 )

1285 
PaEº‹
 
ªsu…
 = 
∑NoEº‹
;

1286 
PaWMMESåómD©a
 *
wmmeSåómD©a
 = 
	`PaHo°_GëWMMESåómD©a
–
°ªam
 );

1287 #i‡
PA_USE_TIMER_CALLBACK


1288 
ªsﬁuti⁄
;

1289 
bufsPîTimîCÆlback
;

1290 
m£cPîBuf„r
;

1293 if–
wmmeSåómD©a
 =
NULL
 )  
∑I¡î«lEº‹
;

1295 
°ªam
->
∑°_St›So⁄
 = 0;

1296 
°ªam
->
∑°_St›Now
 = 0;

1297 
°ªam
->
∑°_IsA˘ive
 = 1;

1298 
wmmeSåómD©a
->
‰amesPœyed
 = 0.0;

1299 
wmmeSåómD©a
->
œ°Posôi⁄
 = 0;

1300 #i‡
PA_TRACE_START_STOP


1301 
	`AddTø˚Mesßge
–"PaHo°_SèπEngöe: TimeSli˚(Ëªtu∫ed ", 
ªsu…
 );

1303 #i‡
PA_USE_TIMER_CALLBACK


1305 
bufsPîTimîCÆlback
 = 
wmmeSåómD©a
->
numHo°Buf„rs
/4;

1306 if–
bufsPîTimîCÆlback
 < 1 ) bufsPerTimerCallback = 1;

1307 if–
bufsPîTimîCÆlback
 < 1 ) bufsPerTimerCallback = 1;

1308 
m£cPîBuf„r
 = (1000 * 
bufsPîTimîCÆlback
 *

1309 
wmmeSåómD©a
->
u£rBuf„rsPîHo°Buf„r
 *

1310 
öã∫ÆSåóm
->
∑°_FømesPîU£rBuf„r
 ) / (Ëöã∫ÆSåóm->
∑°_Sam∂eR©e
;

1311 if–
m£cPîBuf„r
 < 10 ) msecPerBuffer = 10;

1312 if–
m£cPîBuf„r
 > 100 ) msecPerBuffer = 100;

1313 
ªsﬁuti⁄
 = 
m£cPîBuf„r
/4;

1314 
wmmeSåómD©a
->
timîID
 = 
	`timeSëEvít
–
m£cPîBuf„r
, 
ªsﬁuti⁄
,

1315 (
LPTIMECALLBACK
Ë
Pa_TimîCÆlback
,

1316 (
DWORD
Ë
°ªam
, 
TIME_PERIODIC
 );

1317 if–
wmmeSåómD©a
->
timîID
 == 0 )

1319 
ªsu…
 = 
∑Ho°Eº‹
;

1320 
sPaHo°Eº‹
 = 
	`GëLa°Eº‹
();;

1321 
îr‹
;

1324 
	`Re£tEvít
–
wmmeSåómD©a
->
ab‹tEvít
 );

1326 
wmmeSåómD©a
->
ígöeThªad
 = 
	`Cª©eThªad
–0, 0, 
WöMMPa_OuçutThªadProc
, 
°ªam
, 0, &wmmeSåómD©a->
ígöeThªadID
 );

1327 if–
wmmeSåómD©a
->
ígöeThªad
 =
NULL
 )

1329 
ªsu…
 = 
∑Ho°Eº‹
;

1330 
sPaHo°Eº‹
 = 
	`GëLa°Eº‹
();;

1331 
îr‹
;

1333 #i‡
PA_TRACE_START_STOP


1334 
	`AddTø˚Mesßge
–"PaHo°_SèπEngöe:Åhªad ", (Ë
wmmeSåómD©a
->
ígöeThªad
 );

1344 if–!
	`SëPri‹ôyCœss
–
	`GëCuºítPro˚ss
(), 
HIGH_PRIORITY_CLASS
 ) )

1346 
ªsu…
 = 
∑Ho°Eº‹
;

1347 
sPaHo°Eº‹
 = 
	`GëLa°Eº‹
();;

1348 
îr‹
;

1352 if–!
	`SëThªadPri‹ôy
–
wmmeSåómD©a
->
ígöeThªad
, 
THREAD_PRIORITY_HIGHEST
 ) )

1354 
ªsu…
 = 
∑Ho°Eº‹
;

1355 
sPaHo°Eº‹
 = 
	`GëLa°Eº‹
();;

1356 
îr‹
;

1360 
îr‹
:

1361  
ªsu…
;

1362 
	}
}

1364 
PaEº‹
 
	$PaHo°_St›Engöe
–
öã∫ÆP‹tAudioSåóm
 *
öã∫ÆSåóm
, 
ab‹t
 )

1366 
timeOut
;

1367 
PaWMMESåómD©a
 *
wmmeSåómD©a
 = 
	`PaHo°_GëWMMESåómD©a
–
öã∫ÆSåóm
 );

1369 if–
wmmeSåómD©a
 =
NULL
 )  
∑NoEº‹
;

1372 
öã∫ÆSåóm
->
∑°_St›So⁄
 = 1;

1374 if–
ab‹t
 ) 
öã∫ÆSåóm
->
∑°_St›Now
 = 1;

1377 
timeOut
 = (
DWORD
Ë(1500.0 * 
	`PaHo°_GëTŸÆBuf„rFømes
–
öã∫ÆSåóm
 ) / i¡î«lSåóm->
∑°_Sam∂eR©e
);

1378 if–
timeOut
 < 
MIN_TIMEOUT_MSEC
 )ÅimeOut = MIN_TIMEOUT_MSEC;

1380 #i‡
PA_USE_TIMER_CALLBACK


1381 if–(
öã∫ÆSåóm
->
∑°_OuçutDevi˚ID
 !
∑NoDevi˚
) &&

1382 
öã∫ÆSåóm
->
∑°_IsA˘ive
 &&

1383 (
wmmeSåómD©a
->
timîID
 != 0) )

1386  (
öã∫ÆSåóm
->
∑°_IsA˘ive
Ë&& (
timeOut
 > 0) )

1388 
	`SÀï
(10);

1389 
timeOut
 -= 10;

1391 
	`timeKûlEvít
–
wmmeSåómD©a
->
timîID
 );

1392 
wmmeSåómD©a
->
timîID
 = 0;

1395 #i‡
PA_TRACE_START_STOP


1396 
	`AddTø˚Mesßge
–"PaHo°_St›Engöe:Åhªad ", (Ë
wmmeSåómD©a
->
ígöeThªad
 );

1398 if–(
öã∫ÆSåóm
->
∑°_OuçutDevi˚ID
 !
∑NoDevi˚
) &&

1399 (
öã∫ÆSåóm
->
∑°_IsA˘ive
) &&

1400 (
wmmeSåómD©a
->
ígöeThªad
 !
NULL
) )

1402 
DWORD
 
gŸ
;

1404 
	`DBUG
(("PaHost_StopEngine: waiting for backgroundÅhread.\n"));

1405 
gŸ
 = 
	`WaôF‹SögÀObje˘
–
wmmeSåómD©a
->
ígöeThªad
, 
timeOut
 );

1406 if–
gŸ
 =
WAIT_TIMEOUT
 )

1408 
	`ERR_RPT
(("PaHost_StopEngine:Åimed out while waiting for backgroundÅhreadÅo finish.\n"));

1409  
∑TimedOut
;

1411 
	`Clo£H™dÀ
–
wmmeSåómD©a
->
ígöeThªad
 );

1412 
wmmeSåómD©a
->
ígöeThªad
 = 
NULL
;

1416 
öã∫ÆSåóm
->
∑°_IsA˘ive
 = 0;

1417  
∑NoEº‹
;

1418 
	}
}

1420 
PaEº‹
 
	$PaHo°_St›I≈ut
–
öã∫ÆP‹tAudioSåóm
 *
°ªam
, 
ab‹t
 )

1422 
MMRESULT
 
mmªsu…
;

1423 
PaWMMESåómD©a
 *
wmmeSåómD©a
 = 
	`PaHo°_GëWMMESåómD©a
–
°ªam
 );

1425 if–
wmmeSåómD©a
 =
NULL
 )  
∑NoEº‹
;

1426 (Ë
ab‹t
;

1428 if–
wmmeSåómD©a
->
hWaveIn
 !
NULL
 )

1430 
mmªsu…
 = 
	`waveInRe£t
–
wmmeSåómD©a
->
hWaveIn
 );

1431 if–
mmªsu…
 !
MMSYSERR_NOERROR
 )

1433 
sPaHo°Eº‹
 = 
mmªsu…
;

1434  
∑Ho°Eº‹
;

1437  
∑NoEº‹
;

1438 
	}
}

1440 
PaEº‹
 
	$PaHo°_St›Ouçut
–
öã∫ÆP‹tAudioSåóm
 *
öã∫ÆSåóm
, 
ab‹t
 )

1442 
MMRESULT
 
mmªsu…
;

1443 
PaWMMESåómD©a
 *
wmmeSåómD©a
 = 
	`PaHo°_GëWMMESåómD©a
–
öã∫ÆSåóm
 );

1445 if–
wmmeSåómD©a
 =
NULL
 )  
∑NoEº‹
;

1446 (Ë
ab‹t
;

1448 #i‡
PA_TRACE_START_STOP


1449 
	`AddTø˚Mesßge
–"PaHo°_St›Ouçut: hWaveOuà", (Ë
wmmeSåómD©a
->
hWaveOut
 );

1451 if–
wmmeSåómD©a
->
hWaveOut
 !
NULL
 )

1453 
mmªsu…
 = 
	`waveOutRe£t
–
wmmeSåómD©a
->
hWaveOut
 );

1454 if–
mmªsu…
 !
MMSYSERR_NOERROR
 )

1456 
sPaHo°Eº‹
 = 
mmªsu…
;

1457  
∑Ho°Eº‹
;

1460  
∑NoEº‹
;

1461 
	}
}

1463 
PaEº‹
 
	$PaHo°_Clo£Såóm
–
öã∫ÆP‹tAudioSåóm
 *
°ªam
 )

1465 
i
;

1466 
PaWMMESåómD©a
 *
wmmeSåómD©a
 = 
	`PaHo°_GëWMMESåómD©a
–
°ªam
 );

1468 if–
°ªam
 =
NULL
 )  
∑BadSåómPå
;

1469 if–
wmmeSåómD©a
 =
NULL
 )  
∑NoEº‹
;

1471 #i‡
PA_TRACE_START_STOP


1472 
	`AddTø˚Mesßge
–"PaHo°_Clo£Såóm: hWaveOuà", (Ë
wmmeSåómD©a
->
hWaveOut
 );

1475 if–
wmmeSåómD©a
->
hWaveOut
 )

1477 if–
wmmeSåómD©a
->
ouçutBuf„rs
 )

1479  
i
=0; i<
wmmeSåómD©a
->
numHo°Buf„rs
; i++ )

1481 
	`waveOutU≈ª∑ªHódî
–
wmmeSåómD©a
->
hWaveOut
, &wmmeSåómD©a->
ouçutBuf„rs
[
i
], (
WAVEHDR
) );

1482 
	`PaHo°_FªeTøckedMem‹y
–
wmmeSåómD©a
->
ouçutBuf„rs
[
i
].
ÕD©a
 );

1484 
	`PaHo°_FªeTøckedMem‹y
–
wmmeSåómD©a
->
ouçutBuf„rs
 );

1486 
	`waveOutClo£
–
wmmeSåómD©a
->
hWaveOut
 );

1489 if–
wmmeSåómD©a
->
hWaveIn
 )

1491 if–
wmmeSåómD©a
->
öputBuf„rs
 )

1493  
i
=0; i<
wmmeSåómD©a
->
numHo°Buf„rs
; i++ )

1495 
	`waveInU≈ª∑ªHódî
–
wmmeSåómD©a
->
hWaveIn
, &wmmeSåómD©a->
öputBuf„rs
[
i
], (
WAVEHDR
) );

1496 
	`PaHo°_FªeTøckedMem‹y
–
wmmeSåómD©a
->
öputBuf„rs
[
i
].
ÕD©a
 );

1498 
	`PaHo°_FªeTøckedMem‹y
–
wmmeSåómD©a
->
öputBuf„rs
 );

1500 
	`waveInClo£
–
wmmeSåómD©a
->
hWaveIn
 );

1502 #i‡(
PA_USE_TIMER_CALLBACK
 == 0)

1503 if–
wmmeSåómD©a
->
ab‹tEvítInôed
 ) 
	`Clo£H™dÀ
–wmmeSåómD©a->
ab‹tEvít
 );

1504 if–
wmmeSåómD©a
->
buf„rEvítInôed
 ) 
	`Clo£H™dÀ
–wmmeSåómD©a->
buf„rEvít
 );

1506 if–
wmmeSåómD©a
->
°ªamLockInôed
 )

1507 
	`DñëeCrôiˇlSe˘i⁄
–&
wmmeSåómD©a
->
°ªamLock
 );

1509 
	`PaHo°_FªeWMMESåómD©a
–
°ªam
 );

1511  
∑NoEº‹
;

1512 
	}
}

1524 
	#PA_LATENCY_ENV_NAME
 ("PA_MIN_LATENCY_MSEC")

	)

1525 
	$Pa_GëMöNumBuf„rs
–
‰amesPîBuf„r
, 
ßm∂eR©e
 )

1527 
ívbuf
[
PA_ENV_BUF_SIZE
];

1528 
DWORD
 
hªsu…
;

1529 
möL©ícyM£c
 = 0;

1530 
m£cPîBuf„r
 = (1000.0 * 
‰amesPîBuf„r
Ë/ 
ßm∂eR©e
;

1531 
möBuf„rs
;

1534 
hªsu…
 = 
	`GëEnvú⁄mítV¨übÀ
–
PA_LATENCY_ENV_NAME
, 
ívbuf
, 
PA_ENV_BUF_SIZE
 );

1535 if–(
hªsu…
 > 0Ë&& (hªsu… < 
PA_ENV_BUF_SIZE
) )

1537 
möL©ícyM£c
 = 
	`©oi
–
ívbuf
 );

1544 
OSVERSIONINFO
 
osvi
;

1545 
osvi
.
dwOSVîsi⁄InfoSize
 = ( osvi );

1546 
	`GëVîsi⁄Ex
–&
osvi
 );

1547 
	`DBUG
(("PA - Pœtf‹mId = 0x%x\n", 
osvi
.
dwPœtf‹mId
 ));

1548 
	`DBUG
(("PA - Maj‹Vîsi⁄ = 0x%x\n", 
osvi
.
dwMaj‹Vîsi⁄
 ));

1549 
	`DBUG
(("PA - Mö‹Vîsi⁄ = 0x%x\n", 
osvi
.
dwMö‹Vîsi⁄
 ));

1551 if–(
osvi
.
dwMaj‹Vîsi⁄
 =4Ë&& (osvi.
dwPœtf‹mId
 == 2) )

1553 
möL©ícyM£c
 = 
PA_WIN_NT_LATENCY
;

1555 if(
osvi
.
dwMaj‹Vîsi⁄
 >= 5)

1557 
möL©ícyM£c
 = 
PA_WIN_WDM_LATENCY
;

1561 
möL©ícyM£c
 = 
PA_WIN_9X_LATENCY
;

1563 #i‡
PA_USE_HIGH_LATENCY


1564 
	`PRINT
(("PA - Möimum L©ícy sëÅÿ%d m£c!\n", 
möL©ícyM£c
 ));

1568 
	`DBUG
(("PA - Möimum L©ícy sëÅÿ%d m£c!\n", 
möL©ícyM£c
 ));

1569 
möBuf„rs
 = (Ë(1.0 + (()
möL©ícyM£c
 / 
m£cPîBuf„r
));

1570 if–
möBuf„rs
 < 2 ) minBuffers = 2;

1571  
möBuf„rs
;

1572 
	}
}

1576 
PaEº‹
 
	$PaHo°_Tîm
( )

1578 
i
;

1580 if–
sNumDevi˚s
 > 0 )

1582 if–
sDevi˚Pås
 !
NULL
 )

1584  
i
=0; i<
sNumDevi˚s
; i++ )

1586 if–
sDevi˚Pås
[
i
] !
NULL
 )

1588 
	`PaHo°_FªeTøckedMem‹y
–(*)
sDevi˚Pås
[
i
]->
«me
 );

1589 
	`PaHo°_FªeTøckedMem‹y
–(*)
sDevi˚Pås
[
i
]->
ßm∂eR©es
 );

1590 
	`PaHo°_FªeTøckedMem‹y
–
sDevi˚Pås
[
i
] );

1593 
	`PaHo°_FªeTøckedMem‹y
–
sDevi˚Pås
 );

1594 
sDevi˚Pås
 = 
NULL
;

1596 
sNumDevi˚s
 = 0;

1599 #i‡
PA_TRACK_MEMORY


1600 
	`PRINT
(("PaHo°_Tîm: sNumAŒoˇti⁄†%d\n", 
sNumAŒoˇti⁄s
 ));

1603  
∑NoEº‹
;

1604 
	}
}

1606 
	$Pa_SÀï
–
m£c
 )

1608 
	`SÀï
–
m£c
 );

1609 
	}
}

1618 *
	$PaHo°_AŒoˇãFa°Mem‹y
–
numByãs
 )

1620  
	`PaHo°_AŒoˇãTøckedMem‹y
–
numByãs
 );

1621 
	}
}

1626 
	$PaHo°_FªeFa°Mem‹y
–*
addr
, 
numByãs
 )

1628 (Ë
numByãs
;

1630 
	`PaHo°_FªeTøckedMem‹y
–
addr
 );

1631 
	}
}

1636 *
	$PaHo°_AŒoˇãTøckedMem‹y
–
numByãs
 )

1638 *
ªsu…
 = 
	`GlobÆAŒoc
–
GPTR
, 
numByãs
 );

1640 #i‡
PA_TRACK_MEMORY


1641 if–
ªsu…
 !
NULL
 ) 
sNumAŒoˇti⁄s
 += 1;

1643  
ªsu…
;

1644 
	}
}

1646 
	$PaHo°_FªeTøckedMem‹y
–*
addr
 )

1648 if–
addr
 !
NULL
 )

1650 
	`GlobÆFªe
–
addr
 );

1651 #i‡
PA_TRACK_MEMORY


1652 
sNumAŒoˇti⁄s
 -= 1;

1655 
	}
}

1658 
PaEº‹
 
	$PaHo°_SåómA˘ive
–
öã∫ÆP‹tAudioSåóm
 *
öã∫ÆSåóm
 )

1660 if–
öã∫ÆSåóm
 =
NULL
 )  
∑BadSåómPå
;

1662  (
PaEº‹
Ë
öã∫ÆSåóm
->
∑°_IsA˘ive
;

1663 
	}
}

1668 
PaEº‹
 
	$PaHo°_Upd©eSåómTime
–
PaWMMESåómD©a
 *
wmmeSåómD©a
 )

1670 
MMRESULT
 
mmªsu…
;

1671 
MMTIME
 
mmtime
;

1672 c⁄° 
shi·
 = 6;

1673 
mmtime
.
wTy≥
 = 
TIME_SAMPLES
;

1675 if–
wmmeSåómD©a
->
hWaveOut
 !
NULL
 )

1677 
mmªsu…
 = 
	`waveOutGëPosôi⁄
–
wmmeSåómD©a
->
hWaveOut
, &
mmtime
, (mmtime) );

1681 
mmªsu…
 = 
	`waveInGëPosôi⁄
–
wmmeSåómD©a
->
hWaveIn
, &
mmtime
, (mmtime) );

1684 if–
mmªsu…
 !
MMSYSERR_NOERROR
 )

1686 
sPaHo°Eº‹
 = 
mmªsu…
;

1687  
∑Ho°Eº‹
;

1692 
	`E¡îCrôiˇlSe˘i⁄
–&
wmmeSåómD©a
->
°ªamLock
 );

1700 
wmmeSåómD©a
->
‰amesPœyed
 +=

1701 (()((((
DWORD
)
mmtime
.
u
.
ßm∂e
)<<
shi·
) -

1702 (((
DWORD
)(
wmmeSåómD©a
->
œ°Posôi⁄
))<<
shi·
)))>>shift;

1708 
wmmeSåómD©a
->
œ°Posôi⁄
 = ()
mmtime
.
u
.
ßm∂e
;

1709 
	`LóveCrôiˇlSe˘i⁄
–&
wmmeSåómD©a
->
°ªamLock
 );

1711  
∑NoEº‹
;

1712 
	}
}

1714 
PaTime°amp
 
	$Pa_SåómTime
–
P‹tAudioSåóm
 *
°ªam
 )

1716 
öã∫ÆP‹tAudioSåóm
 *
öã∫ÆSåóm
 = 
	`PaHo°_GëSåómRïª£¡©i⁄
–
°ªam
 );

1717 
PaWMMESåómD©a
 *
wmmeSåómD©a
 = 
	`PaHo°_GëWMMESåómD©a
–
öã∫ÆSåóm
 );

1719 if–
öã∫ÆSåóm
 =
NULL
 )  
∑BadSåómPå
;

1720 if–
wmmeSåómD©a
 =
NULL
 )  
∑I¡î«lEº‹
;

1722 
	`PaHo°_Upd©eSåómTime
–
wmmeSåómD©a
 );

1723  
wmmeSåómD©a
->
‰amesPœyed
;

1724 
	}
}

	@portaudio/pablio/pablio.c

41 
	~<°dio.h
>

42 
	~<°dlib.h
>

43 
	~<m©h.h
>

44 
	~"p‹èudio.h
"

45 
	~"rögbuf„r.h
"

46 
	~"∑blio.h
"

47 
	~<°rög.h
>

53 
	#FRAMES_PER_BUFFER
 (256)

	)

59 
blockögIOCÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

60 
‰amesPîBuf„r
,

61 
PaTime°amp
 
outTime
, *
u£rD©a
 );

62 
PaEº‹
 
PABLIO_InôFIFO
–
RögBuf„r
 *
rbuf
, 
numFømes
, 
byãsPîFøme
 );

63 
PaEº‹
 
PABLIO_TîmFIFO
–
RögBuf„r
 *
rbuf
 );

72 
	$blockögIOCÆlback
–*
öputBuf„r
, *
ouçutBuf„r
,

73 
‰amesPîBuf„r
,

74 
PaTime°amp
 
outTime
, *
u£rD©a
 )

76 
PABLIO_Såóm
 *
d©a
 = (PABLIO_Såóm*)
u£rD©a
;

77 
numByãs
 = 
d©a
->
byãsPîFøme
 * 
‰amesPîBuf„r
;

78 (Ë
outTime
;

81 if–
öputBuf„r
 !
NULL
 )

83 
	`RögBuf„r_Wrôe
–&
d©a
->
öFIFO
, 
öputBuf„r
, 
numByãs
 );

85 if–
ouçutBuf„r
 !
NULL
 )

87 
i
;

88 
numRód
 = 
	`RögBuf„r_Ród
–&
d©a
->
outFIFO
, 
ouçutBuf„r
, 
numByãs
 );

90  
i
=
numRód
; i<
numByãs
; i++ )

92 ((*)
ouçutBuf„r
)[
i
] = 0;

97 
	}
}

100 
PaEº‹
 
	$PABLIO_InôFIFO
–
RögBuf„r
 *
rbuf
, 
numFømes
, 
byãsPîFøme
 )

102 
numByãs
 = 
numFømes
 * 
byãsPîFøme
;

103 *
buf„r
 = (*Ë
	`mÆloc
–
numByãs
 );

104 if–
buf„r
 =
NULL
 )  
∑Insufficõ¡Mem‹y
;

105 
	`mem£t
–
buf„r
, 0, 
numByãs
 );

106  (
PaEº‹
Ë
	`RögBuf„r_Inô
–
rbuf
, 
numByãs
, 
buf„r
 );

107 
	}
}

110 
PaEº‹
 
	$PABLIO_TîmFIFO
–
RögBuf„r
 *
rbuf
 )

112 if–
rbuf
->
buf„r
 ) 
	`‰ì
(Ñbuf->buffer );

113 
rbuf
->
buf„r
 = 
NULL
;

114  
∑NoEº‹
;

115 
	}
}

121 
	$WrôeAudioSåóm
–
PABLIO_Såóm
 *
aSåóm
, *
d©a
, 
numFømes
 )

123 
byãsWrôãn
;

124 *
p
 = (*Ë
d©a
;

125 
numByãs
 = 
aSåóm
->
byãsPîFøme
 * 
numFømes
;

126  
numByãs
 > 0)

128 
byãsWrôãn
 = 
	`RögBuf„r_Wrôe
–&
aSåóm
->
outFIFO
, 
p
, 
numByãs
 );

129 
numByãs
 -
byãsWrôãn
;

130 
p
 +
byãsWrôãn
;

131 if–
numByãs
 > 0Ë
	`Pa_SÀï
(10);

133  
numFømes
;

134 
	}
}

140 
	$RódAudioSåóm
–
PABLIO_Såóm
 *
aSåóm
, *
d©a
, 
numFømes
 )

142 
byãsRód
;

143 *
p
 = (*Ë
d©a
;

144 
numByãs
 = 
aSåóm
->
byãsPîFøme
 * 
numFømes
;

145  
numByãs
 > 0)

147 
byãsRód
 = 
	`RögBuf„r_Ród
–&
aSåóm
->
öFIFO
, 
p
, 
numByãs
 );

148 
numByãs
 -
byãsRód
;

149 
p
 +
byãsRód
;

150 if–
numByãs
 > 0Ë
	`Pa_SÀï
(10);

152  
numFømes
;

153 
	}
}

159 
	$GëAudioSåómWrôóbÀ
–
PABLIO_Såóm
 *
aSåóm
 )

161 
byãsEm±y
 = 
	`RögBuf„r_GëWrôeAvaûabÀ
–&
aSåóm
->
outFIFO
 );

162  
byãsEm±y
 / 
aSåóm
->
byãsPîFøme
;

163 
	}
}

169 
	$GëAudioSåómRódabÀ
–
PABLIO_Såóm
 *
aSåóm
 )

171 
byãsFuŒ
 = 
	`RögBuf„r_GëRódAvaûabÀ
–&
aSåóm
->
öFIFO
 );

172  
byãsFuŒ
 / 
aSåóm
->
byãsPîFøme
;

173 
	}
}

176 
	$RoundUpToNextPowîOf2
–
n
 )

178 
numBôs
 = 0;

179 if–((
n
-1) &Ç) == 0) Ç;

180  
n
 > 0 )

182 
n
=Ç>>1;

183 
numBôs
++;

185  (1<<
numBôs
);

186 
	}
}

196 
PaEº‹
 
	$O≥nAudioSåóm
–
PABLIO_Såóm
 **
rwblPå
, 
ßm∂eR©e
,

197 
PaSam∂eF‹m©
 
f‹m©
, 
Êags
 )

199 
byãsPîSam∂e
;

200 
doRód
 = 0;

201 
doWrôe
 = 0;

202 
PaEº‹
 
îr
;

203 
PABLIO_Såóm
 *
aSåóm
;

204 
möNumBuf„rs
;

205 
numFømes
;

208 
aSåóm
 = (
PABLIO_Såóm
 *Ë
	`mÆloc
( (PABLIO_Stream) );

209 if–
aSåóm
 =
NULL
 )  
∑Insufficõ¡Mem‹y
;

210 
	`mem£t
–
aSåóm
, 0, (
PABLIO_Såóm
) );

213 
byãsPîSam∂e
 = 
	`Pa_GëSam∂eSize
–
f‹m©
 );

214 if–
byãsPîSam∂e
 < 0 )

216 
îr
 = (
PaEº‹
Ë
byãsPîSam∂e
;

217 
îr‹
;

219 
aSåóm
->
ßm∂esPîFøme
 = ((
Êags
&
PABLIO_MONO
) != 0) ? 1 : 2;

220 
aSåóm
->
byãsPîFøme
 = 
byãsPîSam∂e
 *áSåóm->
ßm∂esPîFøme
;

223 
îr
 = 
	`Pa_Inôülize
();

224 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

229 
möNumBuf„rs
 = 2 * 
	`Pa_GëMöNumBuf„rs
–
FRAMES_PER_BUFFER
, 
ßm∂eR©e
 );

230 
numFømes
 = 
möNumBuf„rs
 * 
FRAMES_PER_BUFFER
;

236 c⁄° 
ß„L©ícyMSec
 = 200;

237 
möL©ícyMSec
 = (1000 * 
numFømes
Ë/ 
ßm∂eR©e
;

238 if–
möL©ícyMSec
 < 
ß„L©ícyMSec
 )

240 
numFømes
 = (Ë((
ß„L©ícyMSec
 * 
ßm∂eR©e
) / 1000);

243 
numFømes
 = 
	`RoundUpToNextPowîOf2
(ÇumFrames );

246 
doRód
 = ((
Êags
 & 
PABLIO_READ
) != 0);

247 
doWrôe
 = ((
Êags
 & 
PABLIO_WRITE
) != 0);

248 if(
doRód
)

250 
îr
 = 
	`PABLIO_InôFIFO
–&
aSåóm
->
öFIFO
, 
numFømes
,áSåóm->
byãsPîFøme
 );

251 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

253 if(
doWrôe
)

255 
numByãs
;

256 
îr
 = 
	`PABLIO_InôFIFO
–&
aSåóm
->
outFIFO
, 
numFømes
,áSåóm->
byãsPîFøme
 );

257 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

259 
numByãs
 = 
	`RögBuf„r_GëWrôeAvaûabÀ
–&
aSåóm
->
outFIFO
 );

260 
	`RögBuf„r_Adv™˚WrôeIndex
–&
aSåóm
->
outFIFO
, 
numByãs
 );

265 
îr
 = 
	`Pa_O≥nSåóm
(

266 &
aSåóm
->
°ªam
,

267 (
doRód
 ? 
	`Pa_GëDeÁu…I≈utDevi˚ID
(Ë: 
∑NoDevi˚
),

268 (
doRód
 ? 
aSåóm
->
ßm∂esPîFøme
 : 0 ),

269 
f‹m©
,

270 
NULL
,

271 (
doWrôe
 ? 
	`Pa_GëDeÁu…OuçutDevi˚ID
(Ë: 
∑NoDevi˚
),

272 (
doWrôe
 ? 
aSåóm
->
ßm∂esPîFøme
 : 0 ),

273 
f‹m©
,

274 
NULL
,

275 
ßm∂eR©e
,

276 
FRAMES_PER_BUFFER
,

277 
möNumBuf„rs
,

278 
∑ClùOff
,

279 
blockögIOCÆlback
,

280 
aSåóm
 );

281 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

283 
îr
 = 
	`Pa_SèπSåóm
–
aSåóm
->
°ªam
 );

284 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

286 *
rwblPå
 = 
aSåóm
;

287  
∑NoEº‹
;

289 
îr‹
:

290 
	`Clo£AudioSåóm
–
aSåóm
 );

291 *
rwblPå
 = 
NULL
;

292  
îr
;

293 
	}
}

296 
PaEº‹
 
	$Clo£AudioSåóm
–
PABLIO_Såóm
 *
aSåóm
 )

298 
PaEº‹
 
îr
 = 
∑NoEº‹
;

299 
byãsEm±y
;

300 
byãSize
 = 
aSåóm
->
outFIFO
.
buf„rSize
;

302 if–
aSåóm
->
°ªam
 !
NULL
 )

305 if–
byãSize
 > 0 )

307 
timeOutMSec
 = 2000;

308 
byãsEm±y
 = 
	`RögBuf„r_GëWrôeAvaûabÀ
–&
aSåóm
->
outFIFO
 );

309  (
byãsEm±y
 < 
byãSize
Ë&& (
timeOutMSec
 > 0) )

311 
	`Pa_SÀï
( 20 );

312 
timeOutMSec
 -= 20;

313 
byãsEm±y
 = 
	`RögBuf„r_GëWrôeAvaûabÀ
–&
aSåóm
->
outFIFO
 );

316 
îr
 = 
	`Pa_St›Såóm
–
aSåóm
->
°ªam
 );

317 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

318 
îr
 = 
	`Pa_Clo£Såóm
–
aSåóm
->
°ªam
 );

321 
îr‹
:

322 
	`Pa_Tîmö©e
();

323 
	`PABLIO_TîmFIFO
–&
aSåóm
->
öFIFO
 );

324 
	`PABLIO_TîmFIFO
–&
aSåóm
->
outFIFO
 );

325 
	`‰ì
–
aSåóm
 );

326  
îr
;

327 
	}
}

	@portaudio/pablio/pablio.h

1 #i‚de‡
_PABLIO_H


2 
	#_PABLIO_H


	)

4 #ifde‡
__˝lu•lus


45 
	~<°dio.h
>

46 
	~<°dlib.h
>

47 
	~<m©h.h
>

48 
	~"p‹èudio.h
"

49 
	~"rögbuf„r.h
"

50 
	~<°rög.h
>

54 
RögBuf„r
 
öFIFO
;

55 
RögBuf„r
 
outFIFO
;

56 
P‹tAudioSåóm
 *
°ªam
;

57 
byãsPîFøme
;

58 
ßm∂esPîFøme
;

60 
	tPABLIO_Såóm
;

63 
	#PABLIO_READ
 (1<<0)

	)

64 
	#PABLIO_WRITE
 (1<<1)

	)

65 
	#PABLIO_READ_WRITE
 (
PABLIO_READ
|
PABLIO_WRITE
)

	)

66 
	#PABLIO_MONO
 (1<<2)

	)

67 
	#PABLIO_STEREO
 (1<<3)

	)

73 
WrôeAudioSåóm
–
PABLIO_Såóm
 *
aSåóm
, *
d©a
, 
numFømes
 );

79 
RódAudioSåóm
–
PABLIO_Såóm
 *
aSåóm
, *
d©a
, 
numFømes
 );

85 
GëAudioSåómWrôóbÀ
–
PABLIO_Såóm
 *
aSåóm
 );

91 
GëAudioSåómRódabÀ
–
PABLIO_Såóm
 *
aSåóm
 );

101 
PaEº‹
 
O≥nAudioSåóm
–
PABLIO_Såóm
 **
aSåómPå
, 
ßm∂eR©e
,

102 
PaSam∂eF‹m©
 
f‹m©
, 
Êags
 );

104 
PaEº‹
 
Clo£AudioSåóm
–
PABLIO_Såóm
 *
aSåóm
 );

106 #ifde‡
__˝lu•lus


	@portaudio/pablio/ringbuffer.c

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<m©h.h
>

39 
	~"rögbuf„r.h
"

40 
	~<°rög.h
>

46 
	$RögBuf„r_Inô
–
RögBuf„r
 *
rbuf
, 
numByãs
, *
d©aPå
 )

48 if–((
numByãs
-1) &ÇumBytes) != 0)  -1;

49 
rbuf
->
buf„rSize
 = 
numByãs
;

50 
rbuf
->
buf„r
 = (*)
d©aPå
;

51 
	`RögBuf„r_Flush
–
rbuf
 );

52 
rbuf
->
bigMask
 = (
numByãs
*2)-1;

53 
rbuf
->
smÆlMask
 = (
numByãs
)-1;

55 
	}
}

58 
	$RögBuf„r_GëRódAvaûabÀ
–
RögBuf„r
 *
rbuf
 )

60  ( (
rbuf
->
wrôeIndex
 -Ñbuf->
ªadIndex
Ë&Ñbuf->
bigMask
 );

61 
	}
}

64 
	$RögBuf„r_GëWrôeAvaûabÀ
–
RögBuf„r
 *
rbuf
 )

66  ( 
rbuf
->
buf„rSize
 - 
	`RögBuf„r_GëRódAvaûabÀ
(rbuf));

67 
	}
}

71 
	$RögBuf„r_Flush
–
RögBuf„r
 *
rbuf
 )

73 
rbuf
->
wrôeIndex
 =Ñbuf->
ªadIndex
 = 0;

74 
	}
}

82 
	$RögBuf„r_GëWrôeRegi⁄s
–
RögBuf„r
 *
rbuf
, 
numByãs
,

83 **
d©aPå1
, *
sizePå1
,

84 **
d©aPå2
, *
sizePå2
 )

86 
ödex
;

87 
avaûabÀ
 = 
	`RögBuf„r_GëWrôeAvaûabÀ
–
rbuf
 );

88 if–
numByãs
 > 
avaûabÀ
 )ÇumBytes =ávailable;

90 
ödex
 = 
rbuf
->
wrôeIndex
 &Ñbuf->
smÆlMask
;

91 if–(
ödex
 + 
numByãs
Ë> 
rbuf
->
buf„rSize
 )

94 
fú°HÆf
 = 
rbuf
->
buf„rSize
 - 
ödex
;

95 *
d©aPå1
 = &
rbuf
->
buf„r
[
ödex
];

96 *
sizePå1
 = 
fú°HÆf
;

97 *
d©aPå2
 = &
rbuf
->
buf„r
[0];

98 *
sizePå2
 = 
numByãs
 - 
fú°HÆf
;

102 *
d©aPå1
 = &
rbuf
->
buf„r
[
ödex
];

103 *
sizePå1
 = 
numByãs
;

104 *
d©aPå2
 = 
NULL
;

105 *
sizePå2
 = 0;

107  
numByãs
;

108 
	}
}

113 
	$RögBuf„r_Adv™˚WrôeIndex
–
RögBuf„r
 *
rbuf
, 
numByãs
 )

115  
rbuf
->
wrôeIndex
 = (rbuf->wrôeIndex + 
numByãs
Ë&Ñbuf->
bigMask
;

116 
	}
}

124 
	$RögBuf„r_GëRódRegi⁄s
–
RögBuf„r
 *
rbuf
, 
numByãs
,

125 **
d©aPå1
, *
sizePå1
,

126 **
d©aPå2
, *
sizePå2
 )

128 
ödex
;

129 
avaûabÀ
 = 
	`RögBuf„r_GëRódAvaûabÀ
–
rbuf
 );

130 if–
numByãs
 > 
avaûabÀ
 )ÇumBytes =ávailable;

132 
ödex
 = 
rbuf
->
ªadIndex
 &Ñbuf->
smÆlMask
;

133 if–(
ödex
 + 
numByãs
Ë> 
rbuf
->
buf„rSize
 )

136 
fú°HÆf
 = 
rbuf
->
buf„rSize
 - 
ödex
;

137 *
d©aPå1
 = &
rbuf
->
buf„r
[
ödex
];

138 *
sizePå1
 = 
fú°HÆf
;

139 *
d©aPå2
 = &
rbuf
->
buf„r
[0];

140 *
sizePå2
 = 
numByãs
 - 
fú°HÆf
;

144 *
d©aPå1
 = &
rbuf
->
buf„r
[
ödex
];

145 *
sizePå1
 = 
numByãs
;

146 *
d©aPå2
 = 
NULL
;

147 *
sizePå2
 = 0;

149  
numByãs
;

150 
	}
}

153 
	$RögBuf„r_Adv™˚RódIndex
–
RögBuf„r
 *
rbuf
, 
numByãs
 )

155  
rbuf
->
ªadIndex
 = (rbuf->ªadIndex + 
numByãs
Ë&Ñbuf->
bigMask
;

156 
	}
}

160 
	$RögBuf„r_Wrôe
–
RögBuf„r
 *
rbuf
, *
d©a
, 
numByãs
 )

162 
size1
, 
size2
, 
numWrôãn
;

163 *
d©a1
, *
d©a2
;

164 
numWrôãn
 = 
	`RögBuf„r_GëWrôeRegi⁄s
–
rbuf
, 
numByãs
, &
d©a1
, &
size1
, &
d©a2
, &
size2
 );

165 if–
size2
 > 0 )

168 
	`mem˝y
–
d©a1
, 
d©a
, 
size1
 );

169 
d©a
 = ((*)d©aË+ 
size1
;

170 
	`mem˝y
–
d©a2
, 
d©a
, 
size2
 );

174 
	`mem˝y
–
d©a1
, 
d©a
, 
size1
 );

176 
	`RögBuf„r_Adv™˚WrôeIndex
–
rbuf
, 
numWrôãn
 );

177  
numWrôãn
;

178 
	}
}

182 
	$RögBuf„r_Ród
–
RögBuf„r
 *
rbuf
, *
d©a
, 
numByãs
 )

184 
size1
, 
size2
, 
numRód
;

185 *
d©a1
, *
d©a2
;

186 
numRód
 = 
	`RögBuf„r_GëRódRegi⁄s
–
rbuf
, 
numByãs
, &
d©a1
, &
size1
, &
d©a2
, &
size2
 );

187 if–
size2
 > 0 )

189 
	`mem˝y
–
d©a
, 
d©a1
, 
size1
 );

190 
d©a
 = ((*)d©aË+ 
size1
;

191 
	`mem˝y
–
d©a
, 
d©a2
, 
size2
 );

195 
	`mem˝y
–
d©a
, 
d©a1
, 
size1
 );

197 
	`RögBuf„r_Adv™˚RódIndex
–
rbuf
, 
numRód
 );

198  
numRód
;

199 
	}
}

	@portaudio/pablio/ringbuffer.h

1 #i‚de‡
_RINGBUFFER_H


2 
	#_RINGBUFFER_H


	)

3 #ifde‡
__˝lu•lus


43 
	~<°dio.h
>

44 
	~<°dlib.h
>

45 
	~<m©h.h
>

46 
	~"rögbuf„r.h
"

47 
	~<°rög.h
>

51 
buf„rSize
;

52 
wrôeIndex
;

53 
ªadIndex
;

54 
bigMask
;

55 
smÆlMask
;

56 *
buf„r
;

58 
	tRögBuf„r
;

63 
RögBuf„r_Inô
–
RögBuf„r
 *
rbuf
, 
numByãs
, *
d©aPå
 );

66 
RögBuf„r_Flush
–
RögBuf„r
 *
rbuf
 );

69 
RögBuf„r_GëWrôeAvaûabÀ
–
RögBuf„r
 *
rbuf
 );

71 
RögBuf„r_GëRódAvaûabÀ
–
RögBuf„r
 *
rbuf
 );

73 
RögBuf„r_Wrôe
–
RögBuf„r
 *
rbuf
, *
d©a
, 
numByãs
 );

75 
RögBuf„r_Ród
–
RögBuf„r
 *
rbuf
, *
d©a
, 
numByãs
 );

82 
RögBuf„r_GëWrôeRegi⁄s
–
RögBuf„r
 *
rbuf
, 
numByãs
,

83 **
d©aPå1
, *
sizePå1
,

84 **
d©aPå2
, *
sizePå2
 );

85 
RögBuf„r_Adv™˚WrôeIndex
–
RögBuf„r
 *
rbuf
, 
numByãs
 );

92 
RögBuf„r_GëRódRegi⁄s
–
RögBuf„r
 *
rbuf
, 
numByãs
,

93 **
d©aPå1
, *
sizePå1
,

94 **
d©aPå2
, *
sizePå2
 );

96 
RögBuf„r_Adv™˚RódIndex
–
RögBuf„r
 *
rbuf
, 
numByãs
 );

98 #ifde‡
__˝lu•lus


	@portaudio/pablio/test_rw.c

38 
	~<°dio.h
>

39 
	~<°dlib.h
>

40 
	~"∑blio.h
"

47 
	#SAMPLE_RATE
 (44100)

	)

48 
	#NUM_SECONDS
 (5)

	)

49 
	#SAMPLES_PER_FRAME
 (2)

	)

50 
	#FRAMES_PER_BLOCK
 (64)

	)

54 
	#SAMPLE_TYPE
 
∑Flﬂt32


	)

55 
	tSAMPLE
;

57 
	#SAMPLE_TYPE
 
∑I¡16


	)

58 
	tSAMPLE
;

62 
maö
();

63 
	$maö
()

65 
i
;

66 
SAMPLE
 
ßm∂es
[
SAMPLES_PER_FRAME
 * 
FRAMES_PER_BLOCK
];

67 
PaEº‹
 
îr
;

68 
PABLIO_Såóm
 *
aSåóm
;

70 
	`¥ötf
("Full duplex soundÅest using PortAudioánd RingBuffers\n");

71 
	`fÊush
(
°dout
);

74 
îr
 = 
	`O≥nAudioSåóm
–&
aSåóm
, 
SAMPLE_RATE
, 
SAMPLE_TYPE
,

75 (
PABLIO_READ_WRITE
 | 
PABLIO_STEREO
) );

76 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

79  
i
=0; i<(
NUM_SECONDS
 * 
SAMPLE_RATE
); i +
FRAMES_PER_BLOCK
 )

82 
	`RódAudioSåóm
–
aSåóm
, 
ßm∂es
, 
FRAMES_PER_BLOCK
 );

84 
	`WrôeAudioSåóm
–
aSåóm
, 
ßm∂es
, 
FRAMES_PER_BLOCK
 );

87 
	`Clo£AudioSåóm
–
aSåóm
 );

89 
	`¥ötf
("Full duplex soundÅest complete.\n" );

90 
	`fÊush
(
°dout
);

93 
îr‹
:

94 
	`Pa_Tîmö©e
();

95 
	`Ârötf
–
°dîr
, "AnÉrror occured while usingÅheÖortaudio stream\n" );

96 
	`Ârötf
–
°dîr
, "Eº‹Çumbî: %d\n", 
îr
 );

97 
	`Ârötf
–
°dîr
, "Eº‹ mesßge: %s\n", 
	`Pa_GëEº‹Text
–
îr
 ) );

99 
	}
}

	@portaudio/pablio/test_rw_echo.c

43 
	~<°dio.h
>

44 
	~<°dlib.h
>

45 
	~<m©h.h
>

46 
	~"∑blio.h
"

47 
	~<°rög.h
>

54 
	#SAMPLE_RATE
 (22050)

	)

55 
	#NUM_SECONDS
 (20)

	)

56 
	#SAMPLES_PER_FRAME
 (2)

	)

60 
	#SAMPLE_TYPE
 
∑Flﬂt32


	)

61 
	tSAMPLE
;

63 
	#SAMPLE_TYPE
 
∑I¡16


	)

64 
	tSAMPLE
;

67 
	#NUM_ECHO_FRAMES
 (2*
SAMPLE_RATE
)

	)

68 
SAMPLE
 
	gßm∂es
[
NUM_ECHO_FRAMES
][
SAMPLES_PER_FRAME
] = {0.0};

71 
maö
();

72 
	$maö
()

74 
i
;

75 
PaEº‹
 
îr
;

76 
PABLIO_Såóm
 *
aInSåóm
;

77 
PABLIO_Såóm
 *
aOutSåóm
;

78 
ödex
;

80 
	`¥ötf
("Full duplex soundÅest using PABLIO\n");

81 
	`fÊush
(
°dout
);

85 
îr
 = 
	`O≥nAudioSåóm
–&
aInSåóm
, 
SAMPLE_RATE
, 
SAMPLE_TYPE
,

86 (
PABLIO_READ
 | 
PABLIO_STEREO
) );

87 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

90 
îr
 = 
	`O≥nAudioSåóm
–&
aOutSåóm
, 
SAMPLE_RATE
, 
SAMPLE_TYPE
,

91 (
PABLIO_WRITE
 | 
PABLIO_STEREO
) );

92 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

96 
ödex
 = 0;

97  
i
=0; i<(
NUM_SECONDS
 * 
SAMPLE_RATE
); i++ )

101 
	`WrôeAudioSåóm
–
aOutSåóm
, &
ßm∂es
[
ödex
][0], 1 );

104 
	`RódAudioSåóm
–
aInSåóm
, &
ßm∂es
[
ödex
][0], 1 );

105 
ödex
 += 1;

106 if–
ödex
 >
NUM_ECHO_FRAMES
 ) index = 0;

108 if–(
i
 & 0xFFFFË=0 ) 
	`¥ötf
("ò%d\n", i ); 
	`fÊush
(
°dout
);

111 
	`Clo£AudioSåóm
–
aOutSåóm
 );

112 
	`Clo£AudioSåóm
–
aInSåóm
 );

114 
	`¥ötf
("R/WÉcho soundÅest complete.\n" );

115 
	`fÊush
(
°dout
);

118 
îr‹
:

119 
	`Ârötf
–
°dîr
, "AnÉrror occured while using PortAudio\n" );

120 
	`Ârötf
–
°dîr
, "Eº‹Çumbî: %d\n", 
îr
 );

121 
	`Ârötf
–
°dîr
, "Eº‹ mesßge: %s\n", 
	`Pa_GëEº‹Text
–
îr
 ) );

123 
	}
}

	@portaudio/pablio/test_w_saw.c

39 
	~<°dio.h
>

40 
	~<°dlib.h
>

41 
	~<m©h.h
>

42 
	~"∑blio.h
"

43 
	~<°rög.h
>

45 
	#SAMPLE_RATE
 (44100)

	)

46 
	#NUM_SECONDS
 (15)

	)

47 
	#SAMPLES_PER_FRAME
 (2)

	)

49 
	#FREQUENCY
 (220.0f)

	)

50 
	#PHASE_INCREMENT
 (2.0‡* 
FREQUENCY
 / 
SAMPLE_RATE
)

	)

51 
	#FRAMES_PER_BLOCK
 (100)

	)

53 
	gßm∂es
[
FRAMES_PER_BLOCK
][
SAMPLES_PER_FRAME
];

54 
	gpha£s
[
SAMPLES_PER_FRAME
];

57 
maö
();

58 
	$maö
()

60 
i
,
j
;

61 
PaEº‹
 
îr
;

62 
PABLIO_Såóm
 *
aOutSåóm
;

64 
	`¥ötf
("Generate sawtooth waves using PABLIO.\n");

65 
	`fÊush
(
°dout
);

68 
îr
 = 
	`O≥nAudioSåóm
–&
aOutSåóm
, 
SAMPLE_RATE
, 
∑Flﬂt32
,

69 (
PABLIO_WRITE
 | 
PABLIO_STEREO
) );

70 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

73 
pha£s
[0] = 0.0;

74 
pha£s
[1] = 0.0;

76  
i
=0; i<(
NUM_SECONDS
 * 
SAMPLE_RATE
); i +
FRAMES_PER_BLOCK
 )

79  
j
=0; j<
FRAMES_PER_BLOCK
; j++ )

82 
pha£s
[0] +
PHASE_INCREMENT
;

84 if–
pha£s
[0] > 1.0f )Öhases[0] -= 2.0f;

85 
ßm∂es
[
j
][0] = 
pha£s
[0];

88 
pha£s
[1] +
PHASE_INCREMENT
 * (3.0f / 2.0f);

89 if–
pha£s
[1] > 1.0f )Öhases[1] -= 2.0f;

90 
ßm∂es
[
j
][1] = 
pha£s
[1];

94 
	`WrôeAudioSåóm
–
aOutSåóm
, 
ßm∂es
, 
FRAMES_PER_BLOCK
 );

97 
	`Clo£AudioSåóm
–
aOutSåóm
 );

99 
	`¥ötf
("Sawtooth soundÅest complete.\n" );

100 
	`fÊush
(
°dout
);

103 
îr‹
:

104 
	`Ârötf
–
°dîr
, "AnÉrror occured while using PABLIO\n" );

105 
	`Ârötf
–
°dîr
, "Eº‹Çumbî: %d\n", 
îr
 );

106 
	`Ârötf
–
°dîr
, "Eº‹ mesßge: %s\n", 
	`Pa_GëEº‹Text
–
îr
 ) );

108 
	}
}

	@portaudio/pablio/test_w_saw8.c

39 
	~<°dio.h
>

40 
	~<°dlib.h
>

41 
	~<m©h.h
>

42 
	~"∑blio.h
"

43 
	~<°rög.h
>

45 
	#SAMPLE_RATE
 (22050)

	)

46 
	#NUM_SECONDS
 (6)

	)

47 
	#SAMPLES_PER_FRAME
 (2)

	)

50 
	#FRAMES_PER_BLOCK
 (100)

	)

52 
	gßm∂es
[
FRAMES_PER_BLOCK
][
SAMPLES_PER_FRAME
];

53 
	gpha£s
[
SAMPLES_PER_FRAME
];

56 
maö
();

57 
	$maö
()

59 
i
,
j
;

60 
PaEº‹
 
îr
;

61 
PABLIO_Såóm
 *
aOutSåóm
;

63 
	`¥ötf
("Generate unsigned 8 bit sawtooth waves using PABLIO.\n");

64 
	`fÊush
(
°dout
);

67 
îr
 = 
	`O≥nAudioSåóm
–&
aOutSåóm
, 
SAMPLE_RATE
, 
∑UI¡8
,

68 (
PABLIO_WRITE
 | 
PABLIO_STEREO
) );

69 if–
îr
 !
∑NoEº‹
 ) 
îr‹
;

72 
pha£s
[0] = 128;

73 
pha£s
[1] = 128;

75  
i
=0; i<(
NUM_SECONDS
 * 
SAMPLE_RATE
); i +
FRAMES_PER_BLOCK
 )

78  
j
=0; j<
FRAMES_PER_BLOCK
; j++ )

81 
pha£s
[0] += 1;

84 
ßm∂es
[
j
][0] = 
pha£s
[0];

87 
pha£s
[1] += 3;

88 
ßm∂es
[
j
][1] = 
pha£s
[1];

92 
	`WrôeAudioSåóm
–
aOutSåóm
, 
ßm∂es
, 
FRAMES_PER_BLOCK
 );

95 
	`Clo£AudioSåóm
–
aOutSåóm
 );

97 
	`¥ötf
("Sawtooth soundÅest complete.\n" );

98 
	`fÊush
(
°dout
);

101 
îr‹
:

102 
	`Ârötf
–
°dîr
, "AnÉrror occured while using PABLIO\n" );

103 
	`Ârötf
–
°dîr
, "Eº‹Çumbî: %d\n", 
îr
 );

104 
	`Ârötf
–
°dîr
, "Eº‹ mesßge: %s\n", 
	`Pa_GëEº‹Text
–
îr
 ) );

106 
	}
}

	@portmixer/px_common/portmixer.h

1 #i‚de‡
PORT_MIXER_H


2 
	#PORT_MIXER_H


	)

4 #ifde‡
__˝lu•lus


47 
	~"p‹èudio.h
"

49 
	tPxMixî
;

51 
	tPxVﬁume
;

52 
	tPxBÆ™˚
;

62 
Px_GëNumMixîs
–*
∑_°ªam
 );

63 c⁄° *
Px_GëMixîName
–*
∑_°ªam
, 
i
 );

70 
PxMixî
 *
Px_O≥nMixî
–*
∑_°ªam
, 
i
 );

77 
Px_Clo£Mixî
(
PxMixî
 *
mixî
);

83 
PxVﬁume
 
Px_GëMa°îVﬁume
–
PxMixî
 *
mixî
 );

84 
Px_SëMa°îVﬁume
–
PxMixî
 *
mixî
, 
PxVﬁume
 
vﬁume
 );

90 
PxVﬁume
 
Px_GëPCMOuçutVﬁume
–
PxMixî
 *
mixî
 );

91 
Px_SëPCMOuçutVﬁume
–
PxMixî
 *
mixî
, 
PxVﬁume
 
vﬁume
 );

92 
Px_Suµ‹tsPCMOuçutVﬁume
–
PxMixî
* 
mixî
 ) ;

98 
Px_GëNumOuçutVﬁumes
–
PxMixî
 *
mixî
 );

99 c⁄° *
Px_GëOuçutVﬁumeName
–
PxMixî
 *
mixî
, 
i
 );

100 
PxVﬁume
 
Px_GëOuçutVﬁume
–
PxMixî
 *
mixî
, 
i
 );

101 
Px_SëOuçutVﬁume
–
PxMixî
 *
mixî
, 
i
, 
PxVﬁume
 
vﬁume
 );

107 
Px_GëNumI≈utSour˚s
–
PxMixî
 *
mixî
 );

108 c⁄° *
Px_GëI≈utSour˚Name
–
PxMixî
 *
mixî
, 
i
);

109 
Px_GëCuºítI≈utSour˚
–
PxMixî
 *
mixî
 );

110 
Px_SëCuºítI≈utSour˚
–
PxMixî
 *
mixî
, 
i
 );

116 
PxVﬁume
 
Px_GëI≈utVﬁume
–
PxMixî
 *
mixî
 );

117 
Px_SëI≈utVﬁume
–
PxMixî
 *
mixî
, 
PxVﬁume
 
vﬁume
 );

123 
Px_Suµ‹tsOuçutBÆ™˚
–
PxMixî
 *
mixî
 );

124 
PxBÆ™˚
 
Px_GëOuçutBÆ™˚
–
PxMixî
 *
mixî
 );

125 
Px_SëOuçutBÆ™˚
–
PxMixî
 *
mixî
, 
PxBÆ™˚
 
bÆ™˚
 );

131 
Px_Suµ‹tsPœythrough
–
PxMixî
 *
mixî
 );

132 
PxVﬁume
 
Px_GëPœythrough
–
PxMixî
 *
mixî
 );

133 
Px_SëPœythrough
–
PxMixî
 *
mixî
, 
PxVﬁume
 
vﬁume
 );

135 #ifde‡
__˝lu•lus


	@portmixer/px_mac/px_mac.c

38 
	~<°dlib.h
>

39 
	~<°rög.h
>

41 
	~"p‹èudio.h
"

42 
	~"∑_ho°.h
"

43 
	~"p‹tmixî.h
"

45 
	#PA_MAX_NUM_HOST_BUFFERS
 (16Ë

	)

47 
	sMu…iBuf„r


49 *
	mbuf„rs
[
PA_MAX_NUM_HOST_BUFFERS
];

50 
	mnumBuf„rs
;

51 
	m√xtWrôe
;

52 
	m√xtRód
;

54 
	tMu…iBuf„r
;

57 
	sPaHo°SoundC⁄åﬁ


59 
UI¡64
 
	m∑hsc_E¡ryCou¡
;

60 
	m∑hsc_Invî£Mi¸osPîHo°Buf„r
;

63 vﬁ©ûê
	m∑hsc_IsRec‹dög
;

64 vﬁ©ûê
	m∑hsc_St›Rec‹dög
;

65 vﬁ©ûê
	m∑hsc_IfInsideCÆlback
;

67 
SPB
 
	m∑hsc_I≈utP¨ams
;

68 
SICom∂ëi⁄UPP
 
	m∑hsc_I≈utCom∂ëi⁄Proc
;

69 
Mu…iBuf„r
 
	m∑hsc_I≈utMu…iBuf„r
;

70 
öt32
 
	m∑hsc_ByãsPîI≈utHo°Buf„r
;

71 
öt32
 
	m∑hsc_I≈utRefNum
;

73 
CmpSoundHódî
 
	m∑hsc_SoundHódîs
[
PA_MAX_NUM_HOST_BUFFERS
];

74 
öt32
 
	m∑hsc_ByãsPîOuçutHo°Buf„r
;

75 
SndCh™√lPå
 
	m∑hsc_Ch™√l
;

76 
SndCÆlBackUPP
 
	m∑hsc_OuçutCom∂ëi⁄Proc
;

77 
öt32
 
	m∑hsc_NumOutsQueued
;

78 
öt32
 
	m∑hsc_NumOutsPœyed
;

79 
PaTime°amp
 
	m∑hsc_NumFømesD⁄e
;

80 
UI¡64
 
	m∑hsc_WhíFømesD⁄eIn¸emíãd
;

82 
öt32
 
	m∑hsc_NumHo°Buf„rs
;

83 
öt32
 
	m∑hsc_FømesPîHo°Buf„r
;

84 
öt32
 
	m∑hsc_U£rBuf„rsPîHo°Buf„r
;

85 
öt32
 
	m∑hsc_MöFømesPîHo°Buf„r
;

87 
	tPaHo°SoundC⁄åﬁ
;

89 
	sPxSour˚


91 
	m«me
[256];

92 } 
	tPxSour˚
;

94 
	sPxInfo


96 
SPB
 *
	möput
;

97 
öt32
 
	möputRefNum
;

98 
SndCh™√lPå
 
	mouçut
;

99 
öt32
 
	mnumSour˚s
;

100 
PxSour˚
 *
	msour˚s
;

101 } 
	tPxInfo
;

103 
	$Px_GëNumMixîs
–*
∑_°ªam
 )

106 
	}
}

108 c⁄° *
	$Px_GëMixîName
–*
∑_°ªam
, 
ödex
 )

111 
	}
}

113 
PxMixî
 *
	$Px_O≥nMixî
–*
∑_°ªam
, 
ödex
 )

115 
PxInfo
 *
öfo
;

116 
öã∫ÆP‹tAudioSåóm
 *
∑°
;

117 
PaHo°SoundC⁄åﬁ
 *
macInfo
;

118 
OSEº
 
îr
;

119 
i
, 
j
;

120 
H™dÀ
 
h
;

121 *
d©a
;

123 
öfo
 = (
PxInfo
 *)
	`mÆloc
((PxInfo));

124 
∑°
 = (
öã∫ÆP‹tAudioSåóm
 *Ë
∑_°ªam
;

125 
macInfo
 = (
PaHo°SoundC⁄åﬁ
 *Ë
∑°
->
∑°_Devi˚D©a
;

127 
öfo
->
öput
 = &
macInfo
->
∑hsc_I≈utP¨ams
;

128 
öfo
->
öputRefNum
 = 
macInfo
->
∑hsc_I≈utRefNum
;

129 
öfo
->
ouçut
 = 
macInfo
->
∑hsc_Ch™√l
;

131 
öfo
->
numSour˚s
 = 0;

132 
öfo
->
sour˚s
 = 
NULL
;

134 
îr
 = 
	`SPBGëDevi˚Info
 (
öfo
->
öputRefNum
, 
siI≈utSour˚Names
, &
h
);

135 i‡(
îr
)

136  (
PxMixî
 *)
öfo
;

138 
	`HLock
(
h
);

139 
	`HNoPurge
(
h
);

141 
d©a
 = (*)*
h
;

142 
öfo
->
numSour˚s
 = ((*)
d©a
)[0];

143 i‡(
öfo
->
numSour˚s
 <= 0 || info->numSources > 50) {

144 
	`HU∆ock
(
h
);

145  (
PxMixî
 *)
öfo
;

148 
öfo
->
sour˚s
 = (
PxSour˚
 *)
	`mÆloc
(öfo->
numSour˚s
 * (PxSource));

149 
d©a
 += 2;

150 
i
=0; i<
öfo
->
numSour˚s
; i++) {

151 
Àn
 = *
d©a
++;

153 i‡(
Àn
 > 63) {

154 
öfo
->
numSour˚s
 = 0;

155 
	`‰ì
(
öfo
->
sour˚s
);

156 
öfo
->
sour˚s
 = 
NULL
;

157 
	`HU∆ock
(
h
);

158  (
PxMixî
 *)
öfo
;

161 
j
=0; j<
Àn
; j++)

162 
öfo
->
sour˚s
[
i
].
«me
[
j
] = *
d©a
++;

164 
öfo
->
sour˚s
[
i
].
«me
[
Àn
] = 0;

166 
	`HU∆ock
(
h
);

168  (
PxMixî
 *)
öfo
;

169 
	}
}

176 
	$Px_Clo£Mixî
(
PxMixî
 *
mixî
)

178 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

180 i‡(
öfo
->
sour˚s
)

181 
	`‰ì
(
öfo
->
sour˚s
);

182 
	`‰ì
(
öfo
);

183 
	}
}

189 
PxVﬁume
 
	$Px_GëMa°îVﬁume
–
PxMixî
 *
mixî
 )

191 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

194 
	}
}

196 
	$Px_SëMa°îVﬁume
–
PxMixî
 *
mixî
, 
PxVﬁume
 
vﬁume
 )

198 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

199 
	}
}

205 
	$Px_Suµ‹tsPCMOuçutVﬁume
–
PxMixî
* 
mixî
 )

208 
	}
}

210 
PxVﬁume
 
	$Px_GëPCMOuçutVﬁume
–
PxMixî
 *
mixî
 )

212 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

213 
OSEº
 
îr
;

214 
∑ckedVﬁ
;

215 
SndComm™d
 
cmd
;

217 
cmd
.cmd = 
gëVﬁumeCmd
;

218 
cmd
.
∑øm1
 = 0;

219 
cmd
.
∑øm2
 = ()&
∑ckedVﬁ
;

221 
îr
 = 
	`SndDoImmedüã
(
öfo
->
ouçut
, &
cmd
);

222 i‡(
îr
)

225  ((
∑ckedVﬁ
 & 0xFFFF) + ((packedVol & 0xFFFF0000) >> 16) / 2.0) / 256.0;

226 
	}
}

228 
	$Px_SëPCMOuçutVﬁume
–
PxMixî
 *
mixî
, 
PxVﬁume
 
vﬁume
 )

230 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

231 
OSEº
 
îr
;

232 
∑ckedVﬁ
;

233 
SndComm™d
 
cmd
;

235 
∑ckedVﬁ
 = ()
vﬁume
 * 256.0;

236 
∑ckedVﬁ
 += (packedVol << 16);

238 
cmd
.cmd = 
vﬁumeCmd
;

239 
cmd
.
∑øm1
 = 0;

240 
cmd
.
∑øm2
 = 
∑ckedVﬁ
;

241 
îr
 = 
	`SndDoImmedüã
(
öfo
->
ouçut
, &
cmd
);

242 
	}
}

248 
	$Px_GëNumOuçutVﬁumes
–
PxMixî
 *
mixî
 )

250 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

253 
	}
}

255 c⁄° *
	$Px_GëOuçutVﬁumeName
–
PxMixî
 *
mixî
, 
i
 )

257 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

259  
NULL
;

260 
	}
}

262 
PxVﬁume
 
	$Px_GëOuçutVﬁume
–
PxMixî
 *
mixî
, 
i
 )

264 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

266  
NULL
;

267 
	}
}

269 
	$Px_SëOuçutVﬁume
–
PxMixî
 *
mixî
, 
i
, 
PxVﬁume
 
vﬁume
 )

271 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

272 
	}
}

278 
	$Px_GëNumI≈utSour˚s
–
PxMixî
 *
mixî
 )

280 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

282  
öfo
->
numSour˚s
;

283 
	}
}

285 c⁄° *
	$Px_GëI≈utSour˚Name
–
PxMixî
 *
mixî
, 
i
)

287 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

289 i‡(
i
 >0 && i < 
öfo
->
numSour˚s
)

290  
öfo
->
sour˚s
[
i
].
«me
;

293 
	}
}

295 
	$Px_GëCuºítI≈utSour˚
–
PxMixî
 *
mixî
 )

297 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

298 
£À˘ed
;

299 
OSEº
 
îr
;

301 
îr
 = 
	`SPBGëDevi˚Info
 (
öfo
->
öputRefNum
, 
siI≈utSour˚
, &
£À˘ed
);

302 i‡(
îr
)

305  
£À˘ed
 - 1;

306 
	}
}

308 
	$Px_SëCuºítI≈utSour˚
–
PxMixî
 *
mixî
, 
i
 )

310 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

311 
£À˘ed
 = 
i
+1;

312 
OSEº
 
îr
;

314 
îr
 = 
	`SPBSëDevi˚Info
 (
öfo
->
öputRefNum
, 
siI≈utSour˚
, &
£À˘ed
);

315 
	}
}

321 
PxVﬁume
 
	$Px_GëI≈utVﬁume
–
PxMixî
 *
mixî
 )

323 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

324 
Fixed
 
fixedGaö
;

325 
PxVﬁume
 
vﬁ
;

326 
OSEº
 
îr
;

328 i‡(
öfo
->
öput
) {

329 
îr
 = 
	`SPBGëDevi˚Info
(
öfo
->
öputRefNum
, 
siI≈utGaö
, (
På
)&
fixedGaö
);

330 i‡(
îr
)

333 
vﬁ
 = (
fixedGaö
 / 65536.0) - 0.5;

334  
vﬁ
;

338 
	}
}

340 
	$Px_SëI≈utVﬁume
–
PxMixî
 *
mixî
, 
PxVﬁume
 
vﬁume
 )

342 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

343 
Fixed
 
fixedGaö
;

344 
OSEº
 
îr
;

346 i‡(
öfo
->
öput
) {

347 
fixedGaö
 = (
Fixed
)((
vﬁume
 + 0.5) * 65536.0);

348 
îr
 = 
	`SPBSëDevi˚Info
(
öfo
->
öputRefNum
, 
siI≈utGaö
, (
På
)&
fixedGaö
);

350 
	}
}

356 
	$Px_Suµ‹tsOuçutBÆ™˚
–
PxMixî
 *
mixî
 )

359 
	}
}

361 
PxBÆ™˚
 
	$Px_GëOuçutBÆ™˚
–
PxMixî
 *
mixî
 )

364 
	}
}

366 
	$Px_SëOuçutBÆ™˚
–
PxMixî
 *
mixî
, 
PxBÆ™˚
 
bÆ™˚
 )

368 
	}
}

374 
	$Px_Suµ‹tsPœythrough
–
PxMixî
 *
mixî
 )

376 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

378  (
öfo
->
öput
 !
NULL
);

379 
	}
}

381 
PxVﬁume
 
	$Px_GëPœythrough
–
PxMixî
 *
mixî
 )

383 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

384 
OSEº
 
îr
;

385 
Àvñ
;

387 
îr
 = 
	`SPBGëDevi˚Info
(
öfo
->
öputRefNum
, 
siPœyThruOnOff
, (
På
)&
Àvñ
);

388 i‡(
îr
)

391 i‡(
Àvñ
 < 0)

392 
Àvñ
 = 0;

393 i‡(
Àvñ
 > 7)

394 
Àvñ
 = 7;

396  (
PxVﬁume
)(
Àvñ
 / 7.0);

397 
	}
}

399 
	$Px_SëPœythrough
–
PxMixî
 *
mixî
, 
PxVﬁume
 
vﬁume
 )

401 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

402 
OSEº
 
îr
;

403 
Àvñ
 = ()(
vﬁume
 * 7.0 + 0.5);

405 
îr
 = 
	`SPBSëDevi˚Info
(
öfo
->
öputRefNum
, 
siPœyThruOnOff
, (
På
)&
Àvñ
);

406 
	}
}

	@portmixer/px_mac_core/px_mac_core.c

38 
	~<C‹eSîvi˚s/C‹eSîvi˚s.h
>

39 
	~<C‹eAudio/C‹eAudio.h
>

40 
	~<AudioToﬁbox/AudioC⁄vîãr.h
>

41 
	~<sys/time.h
>

42 
	~<sys/ªsour˚.h
>

43 
	~<uni°d.h
>

44 
	~<°dlib.h
>

46 
	~"p‹èudio.h
"

47 
	~"∑_ho°.h
"

48 
	~"p‹tmixî.h
"

50 
	ePaDevi˚Mode


52 
	mPA_MODE_OUTPUT_ONLY
,

53 
	mPA_MODE_INPUT_ONLY
,

54 
	mPA_MODE_IO_ONE_DEVICE
,

55 
	mPA_MODE_IO_TWO_DEVICES


56 } 
	tPaDevi˚Mode
;

58 
	sPaHo°InOut_s


60 
AudioDevi˚ID
 
	maudioDevi˚ID
;

61 
	mbyãsPîU£rN©iveBuf„r
;

62 
AudioC⁄vîãrRef
 
	mc⁄vîãr
;

63 *
	mc⁄vîãrBuf„r
;

64 
	mnumCh™√ls
;

65 } 
	tPaHo°InOut
;

71 
	sPaHo°SoundC⁄åﬁ


73 
PaHo°InOut
 
	möput
;

74 
PaHo°InOut
 
	mouçut
;

75 
AudioDevi˚ID
 
	m¥im¨yDevi˚ID
;

76 } 
	tPaHo°SoundC⁄åﬁ
;

79 
	#IS_INPUT
 (
åue
)

	)

80 
	#IS_OUTPUT
 (
Ál£
)

	)

82 
	sPxInfo


84 
AudioDevi˚ID
 
	möput
;

85 
AudioDevi˚ID
 
	mouçut
;

86 } 
	tPxInfo
;

88 
	$Px_GëNumMixîs
–*
∑_°ªam
 )

91 
	}
}

93 c⁄° *
	$Px_GëMixîName
–*
∑_°ªam
, 
ödex
 )

96 
	}
}

98 
PxMixî
 *
	$Px_O≥nMixî
–*
∑_°ªam
, 
ödex
 )

100 
PxInfo
 *
öfo
;

101 
öã∫ÆP‹tAudioSåóm
 *
∑°
;

102 
PaHo°SoundC⁄åﬁ
 *
macInfo
;

104 
öfo
 = (
PxInfo
 *)
	`mÆloc
((PxInfo));

105 
∑°
 = (
öã∫ÆP‹tAudioSåóm
 *Ë
∑_°ªam
;

106 
macInfo
 = (
PaHo°SoundC⁄åﬁ
 *Ë
∑°
->
∑°_Devi˚D©a
;

108 
öfo
->
öput
 = 
macInfo
->öput.
audioDevi˚ID
;

109 
öfo
->
ouçut
 = 
macInfo
->ouçut.
audioDevi˚ID
;

111  (
PxMixî
 *)
öfo
;

112 
	}
}

119 
	$Px_Clo£Mixî
(
PxMixî
 *
mixî
)

121 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

123 
	`‰ì
(
öfo
);

124 
	}
}

130 
PxVﬁume
 
	$Px_GëMa°îVﬁume
–
PxMixî
 *
mixî
 )

132 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

135 
	}
}

137 
	$Px_SëMa°îVﬁume
–
PxMixî
 *
mixî
, 
PxVﬁume
 
vﬁume
 )

139 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

140 
	}
}

146 
PxVﬁume
 
	$Px_GëVﬁume
(
AudioDevi˚ID
 
devi˚
, 
Boﬁón
 
isI≈ut
)

148 
OSSètus
 
îr
;

149 
UI¡32
 
outSize
;

150 
Flﬂt32
 
vﬁ
, 
maxvﬁ
=0.0;

151 
UI¡32
 
muã
, 
™ymuãd
=0;

152 
ch
;

153 
PxVﬁume
 
max
;

155 
ch
=0; ch<=2; ch++) {

156 
outSize
 = (
Flﬂt32
);

157 
îr
 = 
	`AudioDevi˚GëPr›îty
(
devi˚
, 
ch
, 
isI≈ut
,

158 
kAudioDevi˚Pr›îtyVﬁumeSˇœr
,

159 &
outSize
, &
vﬁ
);

160 i‡(!
îr
) {

161 i‡(
vﬁ
 > 
maxvﬁ
)

162 
maxvﬁ
 = 
vﬁ
;

165 
outSize
 = (
UI¡32
);

166 
îr
 = 
	`AudioDevi˚GëPr›îty
(
devi˚
, 
ch
, 
isI≈ut
,

167 
kAudioDevi˚Pr›îtyMuã
,

168 &
outSize
, &
muã
);

170 i‡(!
îr
) {

171 i‡(
muã
)

172 
™ymuãd
 = 1;

176 i‡(
™ymuãd
)

177 
maxvﬁ
 = 0.0;

179  
maxvﬁ
;

180 
	}
}

182 
	$Px_SëVﬁume
(
AudioDevi˚ID
 
devi˚
, 
Boﬁón
 
isI≈ut
,

183 
PxVﬁume
 
vﬁume
)

185 
Flﬂt32
 
vﬁ
 = 
vﬁume
;

186 
UI¡32
 
muã
 = 0;

187 
ch
;

188 
OSSètus
 
îr
;

196 
ch
=0; ch<=2; ch++) {

197 
îr
 = 
	`AudioDevi˚SëPr›îty
(
devi˚
, 0, 
ch
, 
isI≈ut
,

198 
kAudioDevi˚Pr›îtyVﬁumeSˇœr
,

199 (
Flﬂt32
), &
vﬁ
);

201 i‡(
vﬁ
 > 0.05) {

202 
îr
 = 
	`AudioDevi˚SëPr›îty
(
devi˚
, 0, 
ch
, 
isI≈ut
,

203 
kAudioDevi˚Pr›îtyMuã
,

204 (
UI¡32
), &
muã
);

207 
	}
}

209 
	$Px_Suµ‹tsPCMOuçutVﬁume
–
PxMixî
* 
mixî
 )

212 
	}
}

214 
PxVﬁume
 
	$Px_GëPCMOuçutVﬁume
–
PxMixî
 *
mixî
 )

216 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

218  
	`Px_GëVﬁume
(
öfo
->
ouçut
, 
IS_OUTPUT
);

219 
	}
}

221 
	$Px_SëPCMOuçutVﬁume
–
PxMixî
 *
mixî
, 
PxVﬁume
 
vﬁume
 )

223 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

225 
	`Px_SëVﬁume
(
öfo
->
ouçut
, 
IS_OUTPUT
, 
vﬁume
);

226 
	}
}

232 
	$Px_GëNumOuçutVﬁumes
–
PxMixî
 *
mixî
 )

234 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

237 
	}
}

239 c⁄° *
	$Px_GëOuçutVﬁumeName
–
PxMixî
 *
mixî
, 
i
 )

241 i‡(
i
 == 0)

245 
	}
}

247 
PxVﬁume
 
	$Px_GëOuçutVﬁume
–
PxMixî
 *
mixî
, 
i
 )

249  
	`Px_GëPCMOuçutVﬁume
(
mixî
);

250 
	}
}

252 
	$Px_SëOuçutVﬁume
–
PxMixî
 *
mixî
, 
i
, 
PxVﬁume
 
vﬁume
 )

254 
	`Px_SëPCMOuçutVﬁume
(
mixî
, 
vﬁume
);

255 
	}
}

261 
	$Px_GëNumI≈utSour˚s
–
PxMixî
 *
mixî
 )

263 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

266 
	}
}

268 c⁄° *
	$Px_GëI≈utSour˚Name
–
PxMixî
 *
mixî
, 
i
)

270 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

273 
	}
}

275 
	$Px_GëCuºítI≈utSour˚
–
PxMixî
 *
mixî
 )

277 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

280 
	}
}

282 
	$Px_SëCuºítI≈utSour˚
–
PxMixî
 *
mixî
, 
i
 )

284 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

285 
	}
}

291 
PxVﬁume
 
	$Px_GëI≈utVﬁume
–
PxMixî
 *
mixî
 )

293 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

295  
	`Px_GëVﬁume
(
öfo
->
öput
, 
IS_INPUT
);

296 
	}
}

298 
	$Px_SëI≈utVﬁume
–
PxMixî
 *
mixî
, 
PxVﬁume
 
vﬁume
 )

300 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

302 
	`Px_SëVﬁume
(
öfo
->
öput
, 
IS_INPUT
, 
vﬁume
);

303 
	}
}

309 
	$Px_Suµ‹tsOuçutBÆ™˚
–
PxMixî
 *
mixî
 )

312 
	}
}

314 
PxBÆ™˚
 
	$Px_GëOuçutBÆ™˚
–
PxMixî
 *
mixî
 )

317 
	}
}

319 
	$Px_SëOuçutBÆ™˚
–
PxMixî
 *
mixî
, 
PxBÆ™˚
 
bÆ™˚
 )

321 
	}
}

327 
	$Px_Suµ‹tsPœythrough
–
PxMixî
 *
mixî
 )

329 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

330 
OSSètus
 
îr
;

331 
UI¡32
 
outSize
;

332 
UI¡32
 
Êag
;

333 
ªsu…
 = 0;

334 
ch
;

336 
outSize
 = (
UI¡32
);

338 
ch
=0; ch<=2; ch++) {

339 
Êag
 = 0;

340 
îr
 = 
	`AudioDevi˚GëPr›îty
(
öfo
->
öput
, 
ch
, 
IS_INPUT
,

341 
kAudioDevi˚Pr›îtyPœyThru
,

342 &
outSize
, &
Êag
);

343 i‡(!
îr
)

344 
ªsu…
 = 1;

347  
ªsu…
;

348 
	}
}

350 
PxVﬁume
 
	$Px_GëPœythrough
–
PxMixî
 *
mixî
 )

352 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

353 
OSSètus
 
îr
;

354 
UI¡32
 
outSize
;

355 
UI¡32
 
Êag
;

356 
PxVﬁume
 
ªsu…
 = 0.0;

357 
ch
;

359 
outSize
 = (
UI¡32
);

361 
ch
=0; ch<=2; ch++) {

362 
Êag
 = 0;

363 
îr
 = 
	`AudioDevi˚GëPr›îty
(
öfo
->
öput
, 
ch
, 
IS_INPUT
,

364 
kAudioDevi˚Pr›îtyPœyThru
,

365 &
outSize
, &
Êag
);

366 i‡(!
îr
 && 
Êag
)

367 
ªsu…
 = 1.0;

370  
ªsu…
;

371 
	}
}

373 
	$Px_SëPœythrough
–
PxMixî
 *
mixî
, 
PxVﬁume
 
vﬁume
 )

375 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

376 
UI¡32
 
Êag
 = (
vﬁume
 > 0.01);

377 
OSSètus
 
îr
;

378 
ch
;

380 
ch
=0; ch<=2; ch++) {

381 
îr
 = 
	`AudioDevi˚SëPr›îty
(
öfo
->
öput
, 0, 
ch
, 
IS_INPUT
,

382 
kAudioDevi˚Pr›îtyPœyThru
,

383 (
UI¡32
), &
Êag
);

385 
	}
}

	@portmixer/px_none/px_none.c

39 
	~<°dlib.h
>

41 
	~"p‹èudio.h
"

42 
	~"p‹tmixî.h
"

44 
	sPxInfo


46 
	mdummy
;

47 } 
	tPxInfo
;

49 
	$Px_GëNumMixîs
–*
∑_°ªam
 )

52 
	}
}

54 c⁄° *
	$Px_GëMixîName
–*
∑_°ªam
, 
ödex
 )

56  
NULL
;

57 
	}
}

59 
PxMixî
 *
	$Px_O≥nMixî
–*
∑_°ªam
, 
ödex
 )

61  
NULL
;

62 
	}
}

69 
	$Px_Clo£Mixî
(
PxMixî
 *
mixî
)

71 
	}
}

77 
PxVﬁume
 
	$Px_GëMa°îVﬁume
–
PxMixî
 *
mixî
 )

79 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

82 
	}
}

84 
	$Px_SëMa°îVﬁume
–
PxMixî
 *
mixî
, 
PxVﬁume
 
vﬁume
 )

86 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

87 
	}
}

93 
PxVﬁume
 
	$Px_GëPCMOuçutVﬁume
–
PxMixî
 *
mixî
 )

95 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

98 
	}
}

100 
	$Px_SëPCMOuçutVﬁume
–
PxMixî
 *
mixî
, 
PxVﬁume
 
vﬁume
 )

102 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

103 
	}
}

109 
	$Px_GëNumOuçutVﬁumes
–
PxMixî
 *
mixî
 )

111 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

114 
	}
}

116 c⁄° *
	$Px_GëOuçutVﬁumeName
–
PxMixî
 *
mixî
, 
i
 )

118 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

120  
NULL
;

121 
	}
}

123 
PxVﬁume
 
	$Px_GëOuçutVﬁume
–
PxMixî
 *
mixî
, 
i
 )

125 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

127  
NULL
;

128 
	}
}

130 
	$Px_SëOuçutVﬁume
–
PxMixî
 *
mixî
, 
i
, 
PxVﬁume
 
vﬁume
 )

132 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

133 
	}
}

139 
	$Px_GëNumI≈utSour˚s
–
PxMixî
 *
mixî
 )

141 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

144 
	}
}

146 c⁄° *
	$Px_GëI≈utSour˚Name
–
PxMixî
 *
mixî
, 
i
)

148 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

150  
NULL
;

151 
	}
}

153 
	$Px_GëCuºítI≈utSour˚
–
PxMixî
 *
mixî
 )

155 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

158 
	}
}

160 
	$Px_SëCuºítI≈utSour˚
–
PxMixî
 *
mixî
, 
i
 )

162 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

163 
	}
}

169 
PxVﬁume
 
	$Px_GëI≈utVﬁume
–
PxMixî
 *
mixî
 )

171 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

174 
	}
}

176 
	$Px_SëI≈utVﬁume
–
PxMixî
 *
mixî
, 
PxVﬁume
 
vﬁume
 )

178 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

179 
	}
}

185 
	$Px_Suµ‹tsOuçutBÆ™˚
–
PxMixî
 *
mixî
 )

188 
	}
}

190 
PxBÆ™˚
 
	$Px_GëOuçutBÆ™˚
–
PxMixî
 *
mixî
 )

193 
	}
}

195 
	$Px_SëOuçutBÆ™˚
–
PxMixî
 *
mixî
, 
PxBÆ™˚
 
bÆ™˚
 )

197 
	}
}

203 
	$Px_Suµ‹tsPœythrough
–
PxMixî
 *
mixî
 )

206 
	}
}

208 
PxBÆ™˚
 
	$Px_GëPœythrough
–
PxMixî
 *
mixî
 )

211 
	}
}

213 
	$Px_SëPœythrough
–
PxMixî
 *
mixî
, 
PxBÆ™˚
 
bÆ™˚
 )

215 
	}
}

	@portmixer/px_tests/px_test.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<uni°d.h
>

6 
	~"p‹tmixî.h
"

7 
	~"p‹èudio.h
"

10 *
›èrg
;

11 
›töd
, 
›ãº
, 
›t›t
;

13 
	$DummyCÆlbackFunc
(*
öputBuf„r
, *
ouçutBuf„r
,

14 
‰amesPîBuf„r
,

15 
PaTime°amp
 
outTime
, *
u£rD©a
)

18 
	}
}

20 
	$gëvﬁ¨g
(c⁄° *
p
)

22 
f
 = 
	`©of
(
p
);

23 i‡(
f
 < 0.0)

25 i‡(
f
 > 1.0)

28  
f
;

29 
	}
}

31 
	$maö
(
¨gc
, **
¨gv
)

33 
num_mixîs
;

34 
i
;

35 
PaEº‹
 
îr‹
;

36 
P‹tAudioSåóm
 *
°ªam
;

37 
ªcDevi˚Num
;

38 
∂ayDevi˚Num
;

39 
öputCh™√ls
;

40 
ouçutCh™√ls
;

41 
num_devi˚s
;

42 
devi˚
;

43 
›t
;

44 
›ts
=-1, 
›tm
=0;

45 
›tv
=-2, 
›to
=-2, 
›ti
=-2, 
›th
=-2, 
›tb
=-2;

47 
	`¥ötf
("px_test:áÖrogramÅo demonstrateÅhe capabilities of PortMixer\n");

48 
	`¥ötf
("By Dominic Mazzoni\n");

49 
	`¥ötf
("\n");

50 
	`¥ötf
("Usage:\n");

51 
	`¥ötf
(" -d [deviceÇumber]\n");

52 
	`¥ötf
(" -m [mixerÇumber]\n");

53 
	`¥ötf
(" -v [vol] (Master volume)\n");

54 
	`¥ötf
(" -o [vol] (PCM output volume)\n");

55 
	`¥ötf
(" -i [vol] (Input volume)\n");

56 
	`¥ötf
(" -s [sourceÇumber] (Input source)\n");

57 
	`¥ötf
(" -h [vol] (Playthrough)\n");

58 
	`¥ötf
(" -b [bal] (Balance: -1.0....1.0)\n");

59 
	`¥ötf
("\n");

60 
	`¥ötf
("All volumesáre between 0.0ánd 1.0.\n");

61 
	`¥ötf
("\n");

63 
îr‹
 = 
	`Pa_Inôülize
();

64 i‡(
îr‹
 != 0) {

65 
	`¥ötf
("P‹tAudiÿîr‹: %s\n", 
	`Pa_GëEº‹Text
(
îr‹
));

69 
num_devi˚s
 = 
	`Pa_Cou¡Devi˚s
();

71 
devi˚
 = 
	`Pa_GëDeÁu…I≈utDevi˚ID
();

72 
ªcDevi˚Num
 = 
∑NoDevi˚
;

73 
∂ayDevi˚Num
 = 
∑NoDevi˚
;

74 
öputCh™√ls
 = 0;

75 
ouçutCh™√ls
 = 0;

77 -1 !(
›t
=
	`gë›t
(
¨gc
, 
¨gv
, "d:m:v:o:i:s:h:b:"))) {

78 
›t
) {

80 
devi˚
 = 
	`©oi
(
›èrg
);

81 
	`¥ötf
("Së devi˚Åÿ%d\n", 
devi˚
);

84 
›tm
 = 
	`©oi
(
›èrg
);

85 
	`¥ötf
("Së mixîÇumbîÅÿ%d\n", 
›tm
);

88 
›tv
 = 
	`gëvﬁ¨g
(
›èrg
); ;

90 
›to
 = 
	`gëvﬁ¨g
(
›èrg
); ;

92 
›ti
 = 
	`gëvﬁ¨g
(
›èrg
); ;

94 
›th
 = 
	`gëvﬁ¨g
(
›èrg
); ;

96 
›tb
 = 
	`©of
(
›èrg
); ;

98 
›ts
 = 
	`©oi
(
›èrg
); ;

102 
	`¥ötf
("Devices:\n");

103 
i
=0; i<
num_devi˚s
; i++) {

104 c⁄° 
PaDevi˚Info
* 
devi˚Info
 = 
	`Pa_GëDevi˚Info
(
i
);

105 i‡(
i
==
devi˚
) {

106 
	`¥ötf
("* ");

107 i‡(
devi˚Info
->
maxI≈utCh™√ls
 > 0) {

108 
ªcDevi˚Num
 = 
devi˚
;

109 
öputCh™√ls
 = 
devi˚Info
->
maxI≈utCh™√ls
;

111 i‡(
devi˚Info
->
maxOuçutCh™√ls
 > 0) {

112 
∂ayDevi˚Num
 = 
devi˚
;

113 
ouçutCh™√ls
 = 
devi˚Info
->
maxOuçutCh™√ls
;

117 
	`¥ötf
(" ");

118 
	`¥ötf
("Device %d: %s in=%d out=%d",

119 
i
, 
devi˚Info
->
«me
,

120 
devi˚Info
->
maxI≈utCh™√ls
, devi˚Info->
maxOuçutCh™√ls
);

121 i‡(
i
 =
	`Pa_GëDeÁu…I≈utDevi˚ID
())

122 
	`¥ötf
(" (default input)");

123 i‡(
i
 =
	`Pa_GëDeÁu…OuçutDevi˚ID
())

124 
	`¥ötf
(" (default output)");

125 
	`¥ötf
("\n");

127 
	`¥ötf
("\n");

129 
îr‹
 = 
	`Pa_O≥nSåóm
(&
°ªam
, 
ªcDevi˚Num
, 
öputCh™√ls
, 
∑Flﬂt32
, 
NULL
,

130 
∂ayDevi˚Num
, 
ouçutCh™√ls
, 
∑Flﬂt32
, 
NULL
,

131 44101, 512, 1, 
∑ClùOff
 | 
∑DôhîOff
,

132 
DummyCÆlbackFunc
, 
NULL
);

134 i‡(
îr‹
) {

135 
	`¥ötf
("P‹tAudiÿîr‹ %d: %s\n", 
îr‹
,

136 
	`Pa_GëEº‹Text
(
îr‹
));

140 
num_mixîs
 = 
	`Px_GëNumMixîs
(
°ªam
);

141 
	`¥ötf
("Numbî o‡mixî†f‹ devi˚ %d: %d\n", 
devi˚
, 
num_mixîs
);

142 
i
=0; i<
num_mixîs
; i++) {

143 
PxMixî
 *
mixî
;

144 
num
;

145 
j
;

147 
	`¥ötf
("Mixî %d: %s\n", 
i
, 
	`Px_GëMixîName
(
°ªam
, i));

148 
mixî
 = 
	`Px_O≥nMixî
(
°ªam
, 
i
);

149 i‡(!
mixî
) {

150 
	`¥ötf
(" CouldÇot open mixer!\n");

154 i‡(
i
 =
›tm
) {

155 i‡(
›tv
!=-2) {

156 
	`Px_SëMa°îVﬁume
(
mixî
, 
›tv
);

157 
	`¥ötf
(" Set master volume\n");

159 i‡(
›to
!=-2) {

160 
	`Px_SëPCMOuçutVﬁume
(
mixî
, 
›to
);

161 
	`¥ötf
(" Set output volume\n");

163 i‡(
›ti
!=-2) {

164 
	`Px_SëI≈utVﬁume
(
mixî
, 
›ti
);

165 
	`¥ötf
(" Set input volume\n");

167 i‡(
›th
!=-2) {

168 
	`Px_SëPœythrough
(
mixî
, 
›th
);

169 
	`¥ötf
(" SetÖlaythrough volume\n");

171 i‡(
›ts
!=-2) {

172 
	`Px_SëCuºítI≈utSour˚
(
mixî
, 
›ts
);

173 
	`¥ötf
(" Set input source\n");

175 i‡(
›tb
!=-2) {

176 
	`Px_SëOuçutBÆ™˚
(
mixî
, 
›tb
);

177 
	`¥ötf
(" Set balance\n");

181 
	`¥ötf
(" Ma°î vﬁume: %.2f\n", 
	`Px_GëMa°îVﬁume
(
mixî
));

182 
	`¥ötf
(" PCM ouçuàvﬁume: %.2f\n", 
	`Px_GëPCMOuçutVﬁume
(
mixî
));

184 
num
 = 
	`Px_GëNumOuçutVﬁumes
(
mixî
);

185 
	`¥ötf
(" Num ouçuts: %d\n", 
num
);

186 
j
=0; j<
num
; j++) {

187 
	`¥ötf
(" Output %d (%s): %.2f\n",

188 
j
,

189 
	`Px_GëOuçutVﬁumeName
(
mixî
, 
j
),

190 
	`Px_GëOuçutVﬁume
(
mixî
, 
j
));

193 
num
 = 
	`Px_GëNumI≈utSour˚s
(
mixî
);

194 
	`¥ötf
(" Num i≈uàsour˚s: %d\n", 
num
);

195 
j
=0; j<
num
; j++) {

196 
	`¥ötf
(" Input %d (%s) %s\n",

197 
j
,

198 
	`Px_GëI≈utSour˚Name
(
mixî
, 
j
),

199 (
	`Px_GëCuºítI≈utSour˚
(
mixî
)==
j
?

202 
	`¥ötf
(" I≈uàvﬁume: %.2f\n", 
	`Px_GëI≈utVﬁume
(
mixî
));

204 
	`¥ötf
(" Playthrough:");

205 i‡(
	`Px_Suµ‹tsPœythrough
(
mixî
))

206 
	`¥ötf
(" %.2f\n", 
	`Px_GëPœythrough
(
mixî
));

208 
	`¥ötf
("Çot supported.\n");

210 
	`¥ötf
(" Output balance:");

211 i‡(
	`Px_Suµ‹tsOuçutBÆ™˚
(
mixî
))

212 
	`¥ötf
(" %.2f\n", 
	`Px_GëOuçutBÆ™˚
(
mixî
));

214 
	`¥ötf
("Çot supported.\n");

216 
	`Px_Clo£Mixî
(
mixî
);

219 
	`Pa_Clo£Såóm
(
°ªam
);

221 
	`Pa_Tîmö©e
();

224 
	}
}

	@portmixer/px_unix_oss/px_unix_oss.c

38 #ifde‡
__löux__


39 
	~<löux/soundˇrd.h
>

41 
	~<machöe/soundˇrd.h
>

44 
	~<°dio.h
>

45 
	~<°dlib.h
>

46 
	~<f˙é.h
>

47 
	~<uni°d.h
>

48 
	~<sys/ty≥s.h
>

49 
	~<sys/°©.h
>

50 
	~<sys/io˘l.h
>

52 
	~"p‹èudio.h
"

53 
	~"p‹tmixî.h
"

55 
	sPxInfo


57 
	mödex
;

58 
	mfd
;

60 
	mnum_out
;

61 
	mouts
[
SOUND_MIXER_NRDEVICES
];

62 
	mnum_ªc
;

63 
	mªcs
[
SOUND_MIXER_NRDEVICES
];

64 } 
	tPxInfo
;

66 
	gPxDevi˚
[20] = "/dev/mixerX";

68 
	gPxNumDevi˚s
 = 0;

69 
	gPxDevi˚s
[10];

71 
	$Px_GëNumMixîs
–*
∑_°ªam
 )

73 
i
;

74 
fd
;

76 
PxNumDevi˚s
 = 0;

78 
i
=0; i<11; i++) {

79 i‡(
i
==0)

80 
PxDevi˚
[10] = 0;

82 
PxDevi˚
[10] = '0'+(
i
-1);

83 
fd
 = 
	`›í
(
PxDevi˚
, 
O_RDWR
);

84 i‡(
fd
 >= 0) {

85 
PxDevi˚s
[
PxNumDevi˚s
] = 
i
;

86 
PxNumDevi˚s
++;

87 
	`˛o£
(
fd
);

91  
PxNumDevi˚s
;

92 
	}
}

94 c⁄° *
	$Px_GëMixîName
–*
∑_°ªam
, 
ödex
 )

96 i‡(
PxNumDevi˚s
 <= 0)

97 
	`Px_GëNumMixîs
(
∑_°ªam
);

99 i‡(
ödex
 < 0 || index >
PxNumDevi˚s
)

100  
NULL
;

102 i‡(
PxDevi˚s
[
ödex
]==0)

103 
PxDevi˚
[10] = 0;

105 
PxDevi˚
[10] = '0'+(
PxDevi˚s
[
ödex
]-1);

106  
PxDevi˚
;

107 
	}
}

109 
PxMixî
 *
	$Px_O≥nMixî
–*
∑_°ªam
, 
ödex
 )

111 
PxInfo
 *
öfo
;

112 
devmask
, 
ªcmask
, 
outmask
;

113 
i
;

115 i‡(
PxNumDevi˚s
 <= 0)

116 
	`Px_GëNumMixîs
(
∑_°ªam
);

118 i‡(
ödex
 < 0 || index >
PxNumDevi˚s
)

119  
NULL
;

121 
öfo
 = (
PxInfo
 *)
	`mÆloc
((PxInfo));

122 
öfo
->
ödex
 = 
PxDevi˚
[index];

124 i‡(
PxDevi˚s
[
ödex
]==0)

125 
PxDevi˚
[10] = 0;

127 
PxDevi˚
[10] = '0'+(
PxDevi˚s
[
ödex
]-1);

128 
öfo
->
fd
 = 
	`›í
(
PxDevi˚
, 
O_RDWR
);

129 i‡(
öfo
->
fd
 < 0)

130 
bad
;

132 i‡(
	`io˘l
(
öfo
->
fd
, 
	`MIXER_READ
(
SOUND_MIXER_READ_DEVMASK
),

133 &
devmask
) == -1)

134 
bad
;

135 i‡(
	`io˘l
(
öfo
->
fd
, 
	`MIXER_READ
(
SOUND_MIXER_READ_RECMASK
),

136 &
ªcmask
) == -1)

137 
bad
;

138 
outmask
 = 
devmask
 ^ 
ªcmask
;

140 
öfo
->
num_out
 = 0;

141 
öfo
->
num_ªc
 = 0;

143 
i
=0; i<
SOUND_MIXER_NRDEVICES
; i++)

144 i‡(
ªcmask
 & (1<<
i
))

145 
öfo
->
ªcs
[öfo->
num_ªc
++] = 
i
;

146 i‡(
devmask
 & (1<<
i
))

147 
öfo
->
outs
[öfo->
num_out
++] = 
i
;

149  (
PxMixî
 *)
öfo
;

151 
bad
:

152 
	`‰ì
(
öfo
);

153  
NULL
;

154 
	}
}

161 
	$Px_Clo£Mixî
(
PxMixî
 *
mixî
)

163 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

165 
	`˛o£
(
öfo
->
fd
);

167 
	`‰ì
(
öfo
);

168 
	}
}

170 
PxVﬁume
 
	$GëVﬁume
(
fd
, 
ch™√l
)

172 
vﬁ
;

173 
°îeo
;

175 i‡(
	`io˘l
(
fd
, 
SOUND_MIXER_READ_STEREODEVS
, &
°îeo
) == 0)

176 
°îeo
 = ((°îeÿ& (1 << 
ch™√l
)) != 0);

178 
°îeo
 = 0;

180 i‡(
	`io˘l
(
fd
, 
	`MIXER_READ
(
ch™√l
), &
vﬁ
) == -1)

183 i‡(
°îeo
)

184  ((
vﬁ
 & 0xFF)/200.0) + (((vol>>8) & 0xFF)/200.0);

186  (
vﬁ
 & 0xFF)/100.0;

187 
	}
}

193 
PxVﬁume
 
	$Px_GëMa°îVﬁume
–
PxMixî
 *
mixî
 )

195 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

197  
	`GëVﬁume
(
öfo
->
fd
, 
SOUND_MIXER_VOLUME
);

198 
	}
}

200 
	$Px_SëMa°îVﬁume
–
PxMixî
 *
mixî
, 
PxVﬁume
 
vﬁume
 )

202 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

204 
vﬁ
 = ()((
vﬁume
 * 100.0) + 0.5);

205 
vﬁ
 = (vol | (vol<<8));

206 
	`io˘l
(
öfo
->
fd
, 
	`MIXER_WRITE
(
SOUND_MIXER_VOLUME
), &
vﬁ
);

207 
	}
}

213 
	$Px_Suµ‹tsPCMOuçutVﬁume
–
PxMixî
* 
mixî
 )

216 
	}
}

218 
PxVﬁume
 
	$Px_GëPCMOuçutVﬁume
–
PxMixî
 *
mixî
 )

220 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

222  
	`GëVﬁume
(
öfo
->
fd
, 
SOUND_MIXER_PCM
);

223 
	}
}

225 
	$Px_SëPCMOuçutVﬁume
–
PxMixî
 *
mixî
, 
PxVﬁume
 
vﬁume
 )

227 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

229 
vﬁ
 = ()((
vﬁume
 * 100.0) + 0.5);

230 
vﬁ
 = (vol | (vol<<8));

231 
	`io˘l
(
öfo
->
fd
, 
	`MIXER_WRITE
(
SOUND_MIXER_PCM
), &
vﬁ
);

232 
	}
}

238 
	$Px_GëNumOuçutVﬁumes
–
PxMixî
 *
mixî
 )

240 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

242  
öfo
->
num_out
;

243 
	}
}

245 c⁄° *
	$Px_GëOuçutVﬁumeName
–
PxMixî
 *
mixî
, 
i
 )

247 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

248 c⁄° *
œbñs
[] = 
SOUND_DEVICE_LABELS
;

250  
œbñs
[
öfo
->
outs
[
i
]];

251 
	}
}

253 
PxVﬁume
 
	$Px_GëOuçutVﬁume
–
PxMixî
 *
mixî
, 
i
 )

255 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

257  
	`GëVﬁume
(
öfo
->
fd
, info->
outs
[
i
]);

258 
	}
}

260 
	$Px_SëOuçutVﬁume
–
PxMixî
 *
mixî
, 
i
, 
PxVﬁume
 
vﬁume
 )

262 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

264 
vﬁ
 = ()((
vﬁume
 * 100.0) + 0.5);

265 
vﬁ
 = (vol | (vol<<8));

266 
	`io˘l
(
öfo
->
fd
, 
	`MIXER_WRITE
(öfo->
outs
[
i
]), &
vﬁ
);

267 
	}
}

273 
	$Px_GëNumI≈utSour˚s
–
PxMixî
 *
mixî
 )

275 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

277  
öfo
->
num_ªc
;

278 
	}
}

280 c⁄° *
	$Px_GëI≈utSour˚Name
–
PxMixî
 *
mixî
, 
i
)

282 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

284 c⁄° *
œbñs
[] = 
SOUND_DEVICE_LABELS
;

285  
œbñs
[
öfo
->
ªcs
[
i
]];

286 
	}
}

288 
	$Px_GëCuºítI≈utSour˚
–
PxMixî
 *
mixî
 )

290 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

291 
ªcmask
;

292 
i
;

297 i‡(
	`io˘l
(
öfo
->
fd
, 
	`MIXER_READ
(
SOUND_MIXER_READ_RECSRC
),

298 &
ªcmask
) == -1)

301 
i
=0; i<
öfo
->
num_ªc
; i++)

302 i‡(
ªcmask
 & (1 << (
öfo
->
ªcs
[
i
])))

303  
i
;

306 
	}
}

308 
	$Px_SëCuºítI≈utSour˚
–
PxMixî
 *
mixî
, 
i
 )

310 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

311 
√wªc§cmask
 = (1 << (
öfo
->
ªcs
[
i
]));

313 
	`io˘l
(
öfo
->
fd
, 
	`MIXER_WRITE
(
SOUND_MIXER_READ_RECSRC
),

314 &
√wªc§cmask
);

315 
	}
}

321 
PxVﬁume
 
	$Px_GëI≈utVﬁume
–
PxMixî
 *
mixî
 )

323 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

324 
i
;

326 
i
 = 
	`Px_GëCuºítI≈utSour˚
(
mixî
);

327 i‡(
i
 < 0)

330  
	`GëVﬁume
(
öfo
->
fd
, 
SOUND_MIXER_IGAIN
);

331 
	}
}

333 
	$Px_SëI≈utVﬁume
–
PxMixî
 *
mixî
, 
PxVﬁume
 
vﬁume
 )

335 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

336 
vﬁ
;

337 
i
;

339 
i
 = 
	`Px_GëCuºítI≈utSour˚
(
mixî
);

340 i‡(
i
 < 0)

343 
vﬁ
 = ()((
vﬁume
 * 100.0) + 0.5);

344 
vﬁ
 = (vol | (vol<<8));

345 
	`io˘l
(
öfo
->
fd
, 
	`MIXER_WRITE
(
SOUND_MIXER_IGAIN
), &
vﬁ
);

346 
	}
}

352 
	$Px_Suµ‹tsOuçutBÆ™˚
–
PxMixî
 *
mixî
 )

355 
	}
}

357 
PxBÆ™˚
 
	$Px_GëOuçutBÆ™˚
–
PxMixî
 *
mixî
 )

360 
	}
}

362 
	$Px_SëOuçutBÆ™˚
–
PxMixî
 *
mixî
, 
PxBÆ™˚
 
bÆ™˚
 )

364 
	}
}

370 
	$Px_Suµ‹tsPœythrough
–
PxMixî
 *
mixî
 )

373 
	}
}

375 
PxVﬁume
 
	$Px_GëPœythrough
–
PxMixî
 *
mixî
 )

377 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

378 
i
;

380 
i
 = 
	`Px_GëCuºítI≈utSour˚
(
mixî
);

381 i‡(
i
 < 0)

384  
	`GëVﬁume
(
öfo
->
fd
, info->
ªcs
[
i
]);

385 
	}
}

387 
	$Px_SëPœythrough
–
PxMixî
 *
mixî
, 
PxVﬁume
 
vﬁume
 )

389 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

390 
vﬁ
;

391 
i
;

393 
i
 = 
	`Px_GëCuºítI≈utSour˚
(
mixî
);

394 i‡(
i
 < 0)

397 
vﬁ
 = ()((
vﬁume
 * 100.0) + 0.5);

398 
vﬁ
 = (vol | (vol<<8));

399 
	`io˘l
(
öfo
->
fd
, 
	`MIXER_WRITE
(öfo->
ªcs
[
i
]), &
vﬁ
);

400 
	}
}

	@portmixer/px_win_wmme/px_win_wmme.c

38 
	~<Wödows.h
>

40 
	~"p‹èudio.h
"

41 
	~"∑_ho°.h
"

43 
	~"p‹tmixî.h
"

45 
	sPaWMMESåómD©a


48 
HWAVEIN
 
	mhWaveIn
;

49 
WAVEHDR
 *
	möputBuf„rs
;

50 
	mcuºítI≈utBuf„r
;

51 
	mbyãsPîHo°I≈utBuf„r
;

52 
	mbyãsPîU£rI≈utBuf„r
;

54 
HWAVEOUT
 
	mhWaveOut
;

55 } 
	tPaWMMESåómD©a
;

57 
	sPxSrcInfo


59 
	m«me
[256];

60 
DWORD
 
	mlöeID
;

61 
DWORD
 
	mc⁄åﬁID
;

62 } 
	tPxSrcInfo
;

64 
	sPxInfo


66 
HMIXEROBJ
 
	mhI≈utMixî
;

67 
HMIXEROBJ
 
	mhOuçutMixî
;

68 
	mnumI≈uts
;

69 
PxSrcInfo
 
	m§c
[32];

70 
DWORD
 
	mmuxID
;

71 
DWORD
 
	m•ókîID
;

72 
DWORD
 
	mwaveID
;

73 } 
	tPxInfo
;

75 
	$Px_GëNumMixîs
–*
∑_°ªam
 )

78 
	}
}

80 c⁄° *
	$Px_GëMixîName
–*
∑_°ªam
, 
ödex
 )

83 
	}
}

85 
PxMixî
 *
	$Px_O≥nMixî
–*
∑_°ªam
, 
ödex
 )

87 
öã∫ÆP‹tAudioSåóm
 *
∑°
;

88 
PaWMMESåómD©a
 *
wmmeSåómD©a
;

89 
HWAVEIN
 
hWaveIn
;

90 
HWAVEOUT
 
hWaveOut
;

91 
PxInfo
 *
mixî
;

92 
MMRESULT
 
ªsu…
;

93 
MIXERLINE
 
löe
;

94 
MIXERLINECONTROLS
 
c⁄åﬁs
;

95 
MIXERCONTROL
 
c⁄åﬁ
;

96 
MIXERCONTROLDETAILS
 
dëaûs
;

97 
MIXERCONTROLDETAILS_LISTTEXT
 
mixLi°
[32];

98 
j
;

100 
mixî
 = (
PxMixî
 *)
	`mÆloc
((
PxInfo
));

101 
mixî
->
hI≈utMixî
 = 
NULL
;

102 
mixî
->
hOuçutMixî
 = 
NULL
;

104 
∑°
 = (
öã∫ÆP‹tAudioSåóm
 *Ë
∑_°ªam
;

105 
wmmeSåómD©a
 = (
PaWMMESåómD©a
 *Ë
∑°
->
∑°_Devi˚D©a
;

107 
hWaveIn
 = 
wmmeSåómD©a
->hWaveIn;

108 i‡(
hWaveIn
) {

109 
ªsu…
 = 
	`mixîO≥n
((
HMIXER
 *)&
mixî
->
hI≈utMixî
, (
UINT
)
hWaveIn
, 0, 0, 
MIXER_OBJECTF_HWAVEIN
);

110 i‡(
ªsu…
 !
MMSYSERR_NOERROR
) {

111 
	`‰ì
(
mixî
);

112  
NULL
;

116 
hWaveOut
 = 
wmmeSåómD©a
->hWaveOut;

117 i‡(
hWaveOut
) {

118 
ªsu…
 = 
	`mixîO≥n
((
HMIXER
 *)&
mixî
->
hOuçutMixî
, (
UINT
)
hWaveOut
, 0, 0, 
MIXER_OBJECTF_HWAVEOUT
);

119 i‡(
ªsu…
 !
MMSYSERR_NOERROR
) {

120 
	`‰ì
(
mixî
);

121  
NULL
;

125 
mixî
->
numI≈uts
 = 0;

126 
mixî
->
muxID
 = 0;

129 
mixî
->
waveID
 = 0 ;

136 i‡(
mixî
->
hI≈utMixî
) {

137 
löe
.
cbSåu˘
 = (
MIXERLINE
);

138 
löe
.
dwComp⁄ítTy≥
 = 
MIXERLINE_COMPONENTTYPE_DST_WAVEIN
;

139 
ªsu…
 = 
	`mixîGëLöeInfo
(
mixî
->
hI≈utMixî
,

140 &
löe
,

141 
MIXER_GETLINEINFOF_COMPONENTTYPE
);

142 i‡(
ªsu…
 =
MMSYSERR_NOERROR
) {

144 
c⁄åﬁs
.
cbSåu˘
 = (
MIXERLINECONTROLS
);

145 
c⁄åﬁs
.
dwLöeID
 = 
löe
.dwLineID;

146 
c⁄åﬁs
.
dwC⁄åﬁTy≥
 = 
MIXERCONTROL_CONTROLTYPE_MUX
;

147 
c⁄åﬁs
.
cbmx˘æ
 = (
MIXERCONTROL
);

148 
c⁄åﬁs
.
∑mx˘æ
 = &
c⁄åﬁ
;

150 
c⁄åﬁ
.
cbSåu˘
 = (
MIXERCONTROL
);

152 
ªsu…
 = 
	`mixîGëLöeC⁄åﬁs
(
mixî
->
hI≈utMixî
,

153 &
c⁄åﬁs
,

154 
MIXER_GETLINECONTROLSF_ONEBYTYPE
);

156 i‡(
ªsu…
 !
MMSYSERR_NOERROR
) {

157 
c⁄åﬁs
.
dwC⁄åﬁTy≥
 = 
MIXERCONTROL_CONTROLTYPE_MIXER
;

158 
ªsu…
 = 
	`mixîGëLöeC⁄åﬁs
(
mixî
->
hI≈utMixî
,

159 &
c⁄åﬁs
,

160 
MIXER_GETLINECONTROLSF_ONEBYTYPE
);

163 i‡(
ªsu…
 =
MMSYSERR_NOERROR
) {

164 
mixî
->
numI≈uts
 = 
c⁄åﬁ
.
cMu…ùÀIãms
;

165 
mixî
->
muxID
 = 
c⁄åﬁ
.
dwC⁄åﬁID
;

167 
dëaûs
.
cbSåu˘
 = (
MIXERCONTROLDETAILS
);

168 
dëaûs
.
dwC⁄åﬁID
 = 
mixî
->
muxID
;

169 
dëaûs
.
cCh™√ls
 = 1;

170 
dëaûs
.
cbDëaûs
 = (
MIXERCONTROLDETAILS_LISTTEXT
);

171 
dëaûs
.
∑Dëaûs
 = (
LPMIXERCONTROLDETAILS_LISTTEXT
)&
mixLi°
[0];

172 
dëaûs
.
cMu…ùÀIãms
 = 
mixî
->
numI≈uts
;

174 
ªsu…
 = 
	`mixîGëC⁄åﬁDëaûs
(
mixî
->
hI≈utMixî
,

175 (
LPMIXERCONTROLDETAILS
)&
dëaûs
,

176 
MIXER_GETCONTROLDETAILSF_LISTTEXT
);

178 i‡(
ªsu…
 !
MMSYSERR_NOERROR
)

179 
mixî
->
numI≈uts
 = 0;

181 
j
=0; j<
mixî
->
numI≈uts
; j++) {

182 
mixî
->
§c
[
j
].
löeID
 = 
mixLi°
[j].
dwP¨am1
;

183 
	`°r˝y
(
mixî
->
§c
[
j
].
«me
, 
mixLi°
[j].
szName
);

192 
j
=0; j<
mixî
->
numI≈uts
; j++) {

193 
c⁄åﬁs
.
cbSåu˘
 = (
MIXERLINECONTROLS
);

194 
c⁄åﬁs
.
dwLöeID
 = 
mixî
->
§c
[
j
].
löeID
;

195 
c⁄åﬁs
.
dwC⁄åﬁTy≥
 = 
MIXERCONTROL_CONTROLTYPE_VOLUME
;

196 
c⁄åﬁs
.
cbmx˘æ
 = (
MIXERCONTROL
);

197 
c⁄åﬁs
.
∑mx˘æ
 = &
c⁄åﬁ
;

199 
c⁄åﬁ
.
cbSåu˘
 = (
MIXERCONTROL
);

201 
ªsu…
 = 
	`mixîGëLöeC⁄åﬁs
(
mixî
->
hI≈utMixî
,

202 &
c⁄åﬁs
,

203 
MIXER_GETLINECONTROLSF_ONEBYTYPE
);

204 i‡(
ªsu…
 =
MMSYSERR_NOERROR
)

205 
mixî
->
§c
[
j
].
c⁄åﬁID
 = 
c⁄åﬁ
.
dwC⁄åﬁID
;

207 
mixî
->
§c
[
j
].
c⁄åﬁID
 = 0;

216 
mixî
->
•ókîID
 = 0;

218 i‡(
mixî
->
hOuçutMixî
) {

219 
löe
.
cbSåu˘
 = (
MIXERLINE
);

220 
löe
.
dwComp⁄ítTy≥
 = 
MIXERLINE_COMPONENTTYPE_DST_SPEAKERS
;

221 
ªsu…
 = 
	`mixîGëLöeInfo
(
mixî
->
hOuçutMixî
,

222 &
löe
,

223 
MIXER_GETLINEINFOF_COMPONENTTYPE
);

224 i‡(
ªsu…
 =
MMSYSERR_NOERROR
) {

225 
c⁄åﬁs
.
cbSåu˘
 = (
MIXERLINECONTROLS
);

226 
c⁄åﬁs
.
dwLöeID
 = 
löe
.dwLineID;

227 
c⁄åﬁs
.
dwC⁄åﬁTy≥
 = 
MIXERCONTROL_CONTROLTYPE_VOLUME
;

228 
c⁄åﬁs
.
cbmx˘æ
 = (
MIXERCONTROL
);

229 
c⁄åﬁs
.
∑mx˘æ
 = &
c⁄åﬁ
;

231 
c⁄åﬁ
.
cbSåu˘
 = (
MIXERCONTROL
);

233 
ªsu…
 = 
	`mixîGëLöeC⁄åﬁs
(
mixî
->
hOuçutMixî
,

234 &
c⁄åﬁs
,

235 
MIXER_GETLINECONTROLSF_ONEBYTYPE
);

237 i‡(
ªsu…
 =
MMSYSERR_NOERROR
)

238 
mixî
->
•ókîID
 = 
c⁄åﬁ
.
dwC⁄åﬁID
;

242  (
PxMixî
 *)
mixî
;

243 
	}
}

245 
	$VﬁumeFun˘i⁄
(
HMIXEROBJ
 
hMixî
, 
DWORD
 
c⁄åﬁID
, 
PxVﬁume
 *
vﬁume
)

247 
MIXERCONTROLDETAILS
 
dëaûs
;

248 
MMRESULT
 
ªsu…
;

249 
MIXERCONTROLDETAILS_UNSIGNED
 
vÆue
;

251 
	`mem£t
(&
vÆue
, 0, (
MIXERCONTROLDETAILS_UNSIGNED
));

253 
dëaûs
.
cbSåu˘
 = (
MIXERCONTROLDETAILS
);

254 
dëaûs
.
dwC⁄åﬁID
 = 
c⁄åﬁID
;

255 
dëaûs
.
cCh™√ls
 = 1;

256 
dëaûs
.
cMu…ùÀIãms
 = 0;

257 
dëaûs
.
cbDëaûs
 = (
MIXERCONTROLDETAILS_UNSIGNED
);

258 
dëaûs
.
∑Dëaûs
 = &
vÆue
;

260 
ªsu…
 = 
	`mixîGëC⁄åﬁDëaûs
(
hMixî
, &
dëaûs
,

261 
MIXER_GETCONTROLDETAILSF_VALUE
);

263 i‡(*
vﬁume
 < 0.0) {

264 *
vﬁume
 = (
PxVﬁume
)(
vÆue
.
dwVÆue
 / 65535.0);

267 i‡(
ªsu…
 !
MMSYSERR_NOERROR
)

269 
vÆue
.
dwVÆue
 = ()(*
vﬁume
 * 65535.0);

270 
	`mixîSëC⁄åﬁDëaûs
(
hMixî
, &
dëaûs
,

271 
MIXER_GETCONTROLDETAILSF_VALUE
);

273 
	}
}

280 
	$Px_Clo£Mixî
(
PxMixî
 *
mixî
)

282 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

284 i‡(
öfo
->
hI≈utMixî
)

285 
	`mixîClo£
((
HMIXER
)
öfo
->
hI≈utMixî
);

286 i‡(
öfo
->
hOuçutMixî
)

287 
	`mixîClo£
((
HMIXER
)
öfo
->
hOuçutMixî
);

288 
	`‰ì
–
mixî
 );

289 
	}
}

295 
PxVﬁume
 
	$Px_GëMa°îVﬁume
–
PxMixî
 *
mixî
 )

297 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

298 
PxVﬁume
 
vﬁ
;

300 
vﬁ
 = -1.0;

301 
	`VﬁumeFun˘i⁄
(
öfo
->
hOuçutMixî
, info->
•ókîID
, &
vﬁ
);

302  
vﬁ
;

303 
	}
}

305 
	$Px_SëMa°îVﬁume
–
PxMixî
 *
mixî
, 
PxVﬁume
 
vﬁume
 )

307 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

309 
	`VﬁumeFun˘i⁄
(
öfo
->
hOuçutMixî
, info->
•ókîID
, &
vﬁume
);

310 
	}
}

316 
	$Px_Suµ‹tsPCMOuçutVﬁume
–
PxMixî
* 
mixî
 )

318 
PxInfo
* 
öfo
 = ( PxInfo* )–
mixî
 ) ;

319  ( 
öfo
->
waveID
 == -1 ) ? 0 : 1 ;

320 
	}
}

322 
PxVﬁume
 
	$Px_GëPCMOuçutVﬁume
–
PxMixî
 *
mixî
 )

324 
MMRESULT
 
ªsu…
;

325 
DWORD
 
vﬁ
 = 0;

326 
m⁄o_vﬁ
 = 0;

327 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

330 i‡–
öfo
->
waveID
 == -1 )

334 
ªsu…
 = 
	`waveOutGëVﬁume
–(
HWAVEOUT
)–
öfo
->
waveID
 ), &
vﬁ
);

337 i‡–
ªsu…
 !
MMSYSERR_NOERROR
 )

339 
öfo
->
waveID
 = -1 ;

343 
m⁄o_vﬁ
 = ()
vﬁ
;

344  (
PxVﬁume
)
m⁄o_vﬁ
/65535.0;

345 
	}
}

347 
	$Px_SëPCMOuçutVﬁume
–
PxMixî
 *
mixî
, 
PxVﬁume
 
vﬁume
 )

349 
MMRESULT
 
ªsu…
;

350 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

353 i‡–
öfo
->
waveID
 == -1 )

357 
ªsu…
 = 
	`waveOutSëVﬁume
–(
HWAVEOUT
)–
öfo
->
waveID
 ), 
	`MAKELONG
(
vﬁume
*0xFFFF, volume*0xFFFF));

360 i‡–
ªsu…
 !
MMSYSERR_NOERROR
 )

362 
öfo
->
waveID
 = -1 ;

366 
	}
}

372 
	$Px_GëNumOuçutVﬁumes
–
PxMixî
 *
mixî
 )

374 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

377 
	}
}

379 c⁄° *
	$Px_GëOuçutVﬁumeName
–
PxMixî
 *
mixî
, 
i
 )

381 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

383 i‡(
i
==1)

387 
	}
}

389 
PxVﬁume
 
	$Px_GëOuçutVﬁume
–
PxMixî
 *
mixî
, 
i
 )

391 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

393 i‡(
i
==1)

394  
	`Px_GëPCMOuçutVﬁume
(
mixî
);

396  
	`Px_GëMa°îVﬁume
(
mixî
);

397 
	}
}

399 
	$Px_SëOuçutVﬁume
–
PxMixî
 *
mixî
, 
i
, 
PxVﬁume
 
vﬁume
 )

401 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

403 i‡(
i
==1)

404 
	`Px_SëPCMOuçutVﬁume
(
mixî
, 
vﬁume
);

406 
	`Px_SëMa°îVﬁume
(
mixî
, 
vﬁume
);

407 
	}
}

413 
	$Px_GëNumI≈utSour˚s
–
PxMixî
 *
mixî
 )

415 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

417  
öfo
->
numI≈uts
;

418 
	}
}

420 c⁄° *
	$Px_GëI≈utSour˚Name
–
PxMixî
 *
mixî
, 
i
)

422 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

424  
öfo
->
§c
[
i
].
«me
;

425 
	}
}

427 
	$Px_GëCuºítI≈utSour˚
–
PxMixî
 *
mixî
 )

429 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

430 
MIXERCONTROLDETAILS
 
dëaûs
;

431 
MIXERCONTROLDETAILS_BOOLEAN
 
Êags
[32];

432 
MMRESULT
 
ªsu…
;

433 
i
;

435 
dëaûs
.
cbSåu˘
 = (
MIXERCONTROLDETAILS
);

436 
dëaûs
.
dwC⁄åﬁID
 = 
öfo
->
muxID
;

437 
dëaûs
.
cMu…ùÀIãms
 = 
öfo
->
numI≈uts
;

438 
dëaûs
.
cCh™√ls
 = 1;

439 
dëaûs
.
cbDëaûs
 = (
MIXERCONTROLDETAILS_BOOLEAN
);

440 
dëaûs
.
∑Dëaûs
 = (
LPMIXERCONTROLDETAILS_BOOLEAN
)&
Êags
[0];

442 
ªsu…
 = 
	`mixîGëC⁄åﬁDëaûs
(
öfo
->
hI≈utMixî
,

443 (
LPMIXERCONTROLDETAILS
)&
dëaûs
,

444 
MIXER_GETCONTROLDETAILSF_VALUE
);

446 i‡(
ªsu…
 =
MMSYSERR_NOERROR
) {

447 
i
=0; i<
öfo
->
numI≈uts
; i++)

448 i‡(
Êags
[
i
].
fVÆue
)

449  
i
;

453 
	}
}

455 
	$Px_SëCuºítI≈utSour˚
–
PxMixî
 *
mixî
, 
i
 )

457 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

458 
MIXERCONTROLDETAILS
 
dëaûs
;

459 
MIXERCONTROLDETAILS_BOOLEAN
 
Êags
[32];

460 
MMRESULT
 
ªsu…
;

461 
j
;

463 
dëaûs
.
cbSåu˘
 = (
MIXERCONTROLDETAILS
);

464 
dëaûs
.
dwC⁄åﬁID
 = 
öfo
->
muxID
;

465 
dëaûs
.
cMu…ùÀIãms
 = 
öfo
->
numI≈uts
;

466 
dëaûs
.
cCh™√ls
 = 1;

467 
dëaûs
.
cbDëaûs
 = (
MIXERCONTROLDETAILS_BOOLEAN
);

468 
dëaûs
.
∑Dëaûs
 = (
LPMIXERCONTROLDETAILS_BOOLEAN
)&
Êags
[0];

470 
j
=0; j<
öfo
->
numI≈uts
; j++)

471 
Êags
[
j
].
fVÆue
 = (
i
 == j);

473 
ªsu…
 = 
	`mixîSëC⁄åﬁDëaûs
(
öfo
->
hI≈utMixî
,

474 (
LPMIXERCONTROLDETAILS
)&
dëaûs
,

475 
MIXER_SETCONTROLDETAILSF_VALUE
);

476 
	}
}

482 
PxVﬁume
 
	$Px_GëI≈utVﬁume
–
PxMixî
 *
mixî
 )

484 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

485 
PxVﬁume
 
vﬁ
;

486 
§c
 = 
	`Px_GëCuºítI≈utSour˚
(
mixî
);

488 
vﬁ
 = -1.0;

489 
	`VﬁumeFun˘i⁄
(
öfo
->
hI≈utMixî
, info->
§c
[§c].
c⁄åﬁID
, &
vﬁ
);

490  
vﬁ
;

491 
	}
}

493 
	$Px_SëI≈utVﬁume
–
PxMixî
 *
mixî
, 
PxVﬁume
 
vﬁume
 )

495 
PxInfo
 *
öfo
 = (PxInfÿ*)
mixî
;

496 
§c
 = 
	`Px_GëCuºítI≈utSour˚
(
mixî
);

498 
	`VﬁumeFun˘i⁄
(
öfo
->
hI≈utMixî
, info->
§c
[§c].
c⁄åﬁID
, &
vﬁume
);

499 
	}
}

505 
	$Px_Suµ‹tsOuçutBÆ™˚
–
PxMixî
 *
mixî
 )

508 
	}
}

510 
PxBÆ™˚
 
	$Px_GëOuçutBÆ™˚
–
PxMixî
 *
mixî
 )

513 
	}
}

515 
	$Px_SëOuçutBÆ™˚
–
PxMixî
 *
mixî
, 
PxBÆ™˚
 
bÆ™˚
 )

517 
	}
}

523 
	$Px_Suµ‹tsPœythrough
–
PxMixî
 *
mixî
 )

526 
	}
}

528 
PxVﬁume
 
	$Px_GëPœythrough
–
PxMixî
 *
mixî
 )

531 
	}
}

533 
	$Px_SëPœythrough
–
PxMixî
 *
mixî
, 
PxVﬁume
 
vﬁume
 )

535 
	}
}

	@px_tests/px_test.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<uni°d.h
>

6 
	~"p‹tmixî.h
"

7 
	~"p‹èudio.h
"

10 *
›èrg
;

11 
›töd
, 
›ãº
, 
›t›t
;

13 
	$DummyCÆlbackFunc
(*
öputBuf„r
, *
ouçutBuf„r
,

14 
‰amesPîBuf„r
,

15 
PaTime°amp
 
outTime
, *
u£rD©a
)

18 
	}
}

20 
	$gëvﬁ¨g
(c⁄° *
p
)

22 
f
 = 
	`©of
(
p
);

23 i‡(
f
 < 0.0)

25 i‡(
f
 > 1.0)

28  
f
;

29 
	}
}

31 
	$maö
(
¨gc
, **
¨gv
)

33 
num_mixîs
;

34 
i
;

35 
PaEº‹
 
îr‹
;

36 
P‹tAudioSåóm
 *
°ªam
;

37 
ªcDevi˚Num
;

38 
∂ayDevi˚Num
;

39 
öputCh™√ls
;

40 
ouçutCh™√ls
;

41 
num_devi˚s
;

42 
devi˚
;

43 
›t
;

44 
›ts
=-1, 
›tm
=0;

45 
›tv
=-2, 
›to
=-2, 
›ti
=-2, 
›th
=-2, 
›tb
=-2;

47 
	`¥ötf
("px_test:áÖrogramÅo demonstrateÅhe capabilities of PortMixer\n");

48 
	`¥ötf
("By Dominic Mazzoni\n");

49 
	`¥ötf
("\n");

50 
	`¥ötf
("Usage:\n");

51 
	`¥ötf
(" -d [deviceÇumber]\n");

52 
	`¥ötf
(" -m [mixerÇumber]\n");

53 
	`¥ötf
(" -v [vol] (Master volume)\n");

54 
	`¥ötf
(" -o [vol] (PCM output volume)\n");

55 
	`¥ötf
(" -i [vol] (Input volume)\n");

56 
	`¥ötf
(" -s [sourceÇumber] (Input source)\n");

57 
	`¥ötf
(" -h [vol] (Playthrough)\n");

58 
	`¥ötf
(" -b [bal] (Balance: -1.0....1.0)\n");

59 
	`¥ötf
("\n");

60 
	`¥ötf
("All volumesáre between 0.0ánd 1.0.\n");

61 
	`¥ötf
("\n");

63 
îr‹
 = 
	`Pa_Inôülize
();

64 i‡(
îr‹
 != 0) {

65 
	`¥ötf
("P‹tAudiÿîr‹: %s\n", 
	`Pa_GëEº‹Text
(
îr‹
));

69 
num_devi˚s
 = 
	`Pa_Cou¡Devi˚s
();

71 
devi˚
 = 
	`Pa_GëDeÁu…I≈utDevi˚ID
();

72 
ªcDevi˚Num
 = 
∑NoDevi˚
;

73 
∂ayDevi˚Num
 = 
∑NoDevi˚
;

74 
öputCh™√ls
 = 0;

75 
ouçutCh™√ls
 = 0;

77 -1 !(
›t
=
	`gë›t
(
¨gc
, 
¨gv
, "d:m:v:o:i:s:h:b:"))) {

78 
›t
) {

80 
devi˚
 = 
	`©oi
(
›èrg
);

81 
	`¥ötf
("Së devi˚Åÿ%d\n", 
devi˚
);

84 
›tm
 = 
	`©oi
(
›èrg
);

85 
	`¥ötf
("Së mixîÇumbîÅÿ%d\n", 
›tm
);

88 
›tv
 = 
	`gëvﬁ¨g
(
›èrg
); ;

90 
›to
 = 
	`gëvﬁ¨g
(
›èrg
); ;

92 
›ti
 = 
	`gëvﬁ¨g
(
›èrg
); ;

94 
›th
 = 
	`gëvﬁ¨g
(
›èrg
); ;

96 
›tb
 = 
	`©of
(
›èrg
); ;

98 
›ts
 = 
	`©oi
(
›èrg
); ;

102 
	`¥ötf
("Devices:\n");

103 
i
=0; i<
num_devi˚s
; i++) {

104 c⁄° 
PaDevi˚Info
* 
devi˚Info
 = 
	`Pa_GëDevi˚Info
(
i
);

105 i‡(
i
==
devi˚
) {

106 
	`¥ötf
("* ");

107 i‡(
devi˚Info
->
maxI≈utCh™√ls
 > 0) {

108 
ªcDevi˚Num
 = 
devi˚
;

109 
öputCh™√ls
 = 
devi˚Info
->
maxI≈utCh™√ls
;

111 i‡(
devi˚Info
->
maxOuçutCh™√ls
 > 0) {

112 
∂ayDevi˚Num
 = 
devi˚
;

113 
ouçutCh™√ls
 = 
devi˚Info
->
maxOuçutCh™√ls
;

117 
	`¥ötf
(" ");

118 
	`¥ötf
("Device %d: %s in=%d out=%d",

119 
i
, 
devi˚Info
->
«me
,

120 
devi˚Info
->
maxI≈utCh™√ls
, devi˚Info->
maxOuçutCh™√ls
);

121 i‡(
i
 =
	`Pa_GëDeÁu…I≈utDevi˚ID
())

122 
	`¥ötf
(" (default input)");

123 i‡(
i
 =
	`Pa_GëDeÁu…OuçutDevi˚ID
())

124 
	`¥ötf
(" (default output)");

125 
	`¥ötf
("\n");

127 
	`¥ötf
("\n");

129 
îr‹
 = 
	`Pa_O≥nSåóm
(&
°ªam
, 
ªcDevi˚Num
, 
öputCh™√ls
, 
∑Flﬂt32
, 
NULL
,

130 
∂ayDevi˚Num
, 
ouçutCh™√ls
, 
∑Flﬂt32
, 
NULL
,

131 44101, 512, 1, 
∑ClùOff
 | 
∑DôhîOff
,

132 
DummyCÆlbackFunc
, 
NULL
);

134 i‡(
îr‹
) {

135 
	`¥ötf
("P‹tAudiÿîr‹ %d: %s\n", 
îr‹
,

136 
	`Pa_GëEº‹Text
(
îr‹
));

140 
num_mixîs
 = 
	`Px_GëNumMixîs
(
°ªam
);

141 
	`¥ötf
("Numbî o‡mixî†f‹ devi˚ %d: %d\n", 
devi˚
, 
num_mixîs
);

142 
i
=0; i<
num_mixîs
; i++) {

143 
PxMixî
 *
mixî
;

144 
num
;

145 
j
;

147 
	`¥ötf
("Mixî %d: %s\n", 
i
, 
	`Px_GëMixîName
(
°ªam
, i));

148 
mixî
 = 
	`Px_O≥nMixî
(
°ªam
, 
i
);

149 i‡(!
mixî
) {

150 
	`¥ötf
(" CouldÇot open mixer!\n");

154 i‡(
i
 =
›tm
) {

155 i‡(
›tv
!=-2) {

156 
	`Px_SëMa°îVﬁume
(
mixî
, 
›tv
);

157 
	`¥ötf
(" Set master volume\n");

159 i‡(
›to
!=-2) {

160 
	`Px_SëPCMOuçutVﬁume
(
mixî
, 
›to
);

161 
	`¥ötf
(" Set output volume\n");

163 i‡(
›ti
!=-2) {

164 
	`Px_SëI≈utVﬁume
(
mixî
, 
›ti
);

165 
	`¥ötf
(" Set input volume\n");

167 i‡(
›th
!=-2) {

168 
	`Px_SëPœythrough
(
mixî
, 
›th
);

169 
	`¥ötf
(" SetÖlaythrough volume\n");

171 i‡(
›ts
!=-2) {

172 
	`Px_SëCuºítI≈utSour˚
(
mixî
, 
›ts
);

173 
	`¥ötf
(" Set input source\n");

175 i‡(
›tb
!=-2) {

176 
	`Px_SëOuçutBÆ™˚
(
mixî
, 
›tb
);

177 
	`¥ötf
(" Set balance\n");

181 
	`¥ötf
(" Ma°î vﬁume: %.2f\n", 
	`Px_GëMa°îVﬁume
(
mixî
));

182 
	`¥ötf
(" PCM ouçuàvﬁume: %.2f\n", 
	`Px_GëPCMOuçutVﬁume
(
mixî
));

184 
num
 = 
	`Px_GëNumOuçutVﬁumes
(
mixî
);

185 
	`¥ötf
(" Num ouçuts: %d\n", 
num
);

186 
j
=0; j<
num
; j++) {

187 
	`¥ötf
(" Output %d (%s): %.2f\n",

188 
j
,

189 
	`Px_GëOuçutVﬁumeName
(
mixî
, 
j
),

190 
	`Px_GëOuçutVﬁume
(
mixî
, 
j
));

193 
num
 = 
	`Px_GëNumI≈utSour˚s
(
mixî
);

194 
	`¥ötf
(" Num i≈uàsour˚s: %d\n", 
num
);

195 
j
=0; j<
num
; j++) {

196 
	`¥ötf
(" Input %d (%s) %s\n",

197 
j
,

198 
	`Px_GëI≈utSour˚Name
(
mixî
, 
j
),

199 (
	`Px_GëCuºítI≈utSour˚
(
mixî
)==
j
?

202 
	`¥ötf
(" I≈uàvﬁume: %.2f\n", 
	`Px_GëI≈utVﬁume
(
mixî
));

204 
	`¥ötf
(" Playthrough:");

205 i‡(
	`Px_Suµ‹tsPœythrough
(
mixî
))

206 
	`¥ötf
(" %.2f\n", 
	`Px_GëPœythrough
(
mixî
));

208 
	`¥ötf
("Çot supported.\n");

210 
	`¥ötf
(" Output balance:");

211 i‡(
	`Px_Suµ‹tsOuçutBÆ™˚
(
mixî
))

212 
	`¥ötf
(" %.2f\n", 
	`Px_GëOuçutBÆ™˚
(
mixî
));

214 
	`¥ötf
("Çot supported.\n");

216 
	`Px_Clo£Mixî
(
mixî
);

219 
	`Pa_Clo£Såóm
(
°ªam
);

221 
	`Pa_Tîmö©e
();

224 
	}
}

	@test.c

1 
	~<°dio.h
>

3 
	$maö
(
¨gc
, *
¨gv
[]) {

4 
	`¥ötf
("test sound.");

6 
	}
}

	@
1
.
0
91
2661
pa_tests/debug_dual.c
pa_tests/debug_multi_in.c
pa_tests/debug_multi_out.c
pa_tests/debug_record.c
pa_tests/debug_sine.c
pa_tests/debug_test1.c
pa_tests/pa_devs.c
pa_tests/pa_fuzz.c
pa_tests/pa_minlat.c
pa_tests/paqa_devs.c
pa_tests/paqa_errs.c
pa_tests/patest1.c
pa_tests/patest_clip.c
pa_tests/patest_dither.c
pa_tests/patest_latency.c
pa_tests/patest_leftright.c
pa_tests/patest_longsine.c
pa_tests/patest_many.c
pa_tests/patest_maxsines.c
pa_tests/patest_pink.c
pa_tests/patest_record.c
pa_tests/patest_ringmix.c
pa_tests/patest_saw.c
pa_tests/patest_sine.c
pa_tests/patest_sine8.c
pa_tests/patest_sine_time.c
pa_tests/patest_stop.c
pa_tests/patest_sync.c
pa_tests/patest_wire.c
portaudio/pa_common/pa_convert.c
portaudio/pa_common/pa_host.h
portaudio/pa_common/pa_lib.c
portaudio/pa_common/pa_trace.c
portaudio/pa_common/pa_trace.h
portaudio/pa_common/portaudio.h
portaudio/pa_mac/pa_mac.c
portaudio/pa_mac/patest_devinfo.c
portaudio/pa_mac_core/pa_mac_core.c
portaudio/pa_tests/debug_dual.c
portaudio/pa_tests/debug_multi_in.c
portaudio/pa_tests/debug_multi_out.c
portaudio/pa_tests/debug_record.c
portaudio/pa_tests/debug_sine.c
portaudio/pa_tests/debug_test1.c
portaudio/pa_tests/pa_devs.c
portaudio/pa_tests/pa_fuzz.c
portaudio/pa_tests/pa_minlat.c
portaudio/pa_tests/paqa_devs.c
portaudio/pa_tests/paqa_errs.c
portaudio/pa_tests/patest1.c
portaudio/pa_tests/patest_clip.c
portaudio/pa_tests/patest_dither.c
portaudio/pa_tests/patest_latency.c
portaudio/pa_tests/patest_leftright.c
portaudio/pa_tests/patest_longsine.c
portaudio/pa_tests/patest_many.c
portaudio/pa_tests/patest_maxsines.c
portaudio/pa_tests/patest_pink.c
portaudio/pa_tests/patest_record.c
portaudio/pa_tests/patest_ringmix.c
portaudio/pa_tests/patest_saw.c
portaudio/pa_tests/patest_sine.c
portaudio/pa_tests/patest_sine8.c
portaudio/pa_tests/patest_sine_time.c
portaudio/pa_tests/patest_stop.c
portaudio/pa_tests/patest_sync.c
portaudio/pa_tests/patest_wire.c
portaudio/pa_unix_oss/pa_unix.c
portaudio/pa_unix_oss/pa_unix.h
portaudio/pa_unix_oss/pa_unix_oss.c
portaudio/pa_win_ds/dsound_wrapper.c
portaudio/pa_win_ds/dsound_wrapper.h
portaudio/pa_win_ds/pa_dsound.c
portaudio/pa_win_wmme/pa_win_wmme.c
portaudio/pablio/pablio.c
portaudio/pablio/pablio.h
portaudio/pablio/ringbuffer.c
portaudio/pablio/ringbuffer.h
portaudio/pablio/test_rw.c
portaudio/pablio/test_rw_echo.c
portaudio/pablio/test_w_saw.c
portaudio/pablio/test_w_saw8.c
portmixer/px_common/portmixer.h
portmixer/px_mac/px_mac.c
portmixer/px_mac_core/px_mac_core.c
portmixer/px_none/px_none.c
portmixer/px_tests/px_test.c
portmixer/px_unix_oss/px_unix_oss.c
portmixer/px_win_wmme/px_win_wmme.c
px_tests/px_test.c
test.c
